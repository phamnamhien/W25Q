
W25Q_STM32F107RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000712c  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ccc  08007318  08007318  00008318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe4  08007fe4  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fe4  08007fe4  00008fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fec  08007fec  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fec  08007fec  00008fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ff0  08007ff0  00008ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007ff4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001d4  080081c8  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080081c8  0000946c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eee0  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002644  00000000  00000000  000180dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bed  00000000  00000000  0001b678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021972  00000000  00000000  0001c265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011911  00000000  00000000  0003dbd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf391  00000000  00000000  0004f4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  0010e8bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001138bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001d4 	.word	0x200001d4
 8000204:	00000000 	.word	0x00000000
 8000208:	080072fc 	.word	0x080072fc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001d8 	.word	0x200001d8
 8000224:	080072fc 	.word	0x080072fc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	@ 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_uldivmod>:
 8000b60:	b953      	cbnz	r3, 8000b78 <__aeabi_uldivmod+0x18>
 8000b62:	b94a      	cbnz	r2, 8000b78 <__aeabi_uldivmod+0x18>
 8000b64:	2900      	cmp	r1, #0
 8000b66:	bf08      	it	eq
 8000b68:	2800      	cmpeq	r0, #0
 8000b6a:	bf1c      	itt	ne
 8000b6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b70:	f04f 30ff 	movne.w	r0, #4294967295
 8000b74:	f000 b98c 	b.w	8000e90 <__aeabi_idiv0>
 8000b78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b80:	f000 f806 	bl	8000b90 <__udivmoddi4>
 8000b84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b8c:	b004      	add	sp, #16
 8000b8e:	4770      	bx	lr

08000b90 <__udivmoddi4>:
 8000b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b94:	9d08      	ldr	r5, [sp, #32]
 8000b96:	468e      	mov	lr, r1
 8000b98:	4604      	mov	r4, r0
 8000b9a:	4688      	mov	r8, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14a      	bne.n	8000c36 <__udivmoddi4+0xa6>
 8000ba0:	428a      	cmp	r2, r1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	d962      	bls.n	8000c6c <__udivmoddi4+0xdc>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	b14e      	cbz	r6, 8000bc0 <__udivmoddi4+0x30>
 8000bac:	f1c6 0320 	rsb	r3, r6, #32
 8000bb0:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	40b7      	lsls	r7, r6
 8000bba:	ea43 0808 	orr.w	r8, r3, r8
 8000bbe:	40b4      	lsls	r4, r6
 8000bc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc8:	fa1f fc87 	uxth.w	ip, r7
 8000bcc:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bd0:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd4:	0c23      	lsrs	r3, r4, #16
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d909      	bls.n	8000bf2 <__udivmoddi4+0x62>
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be4:	f080 80eb 	bcs.w	8000dbe <__udivmoddi4+0x22e>
 8000be8:	429a      	cmp	r2, r3
 8000bea:	f240 80e8 	bls.w	8000dbe <__udivmoddi4+0x22e>
 8000bee:	3902      	subs	r1, #2
 8000bf0:	443b      	add	r3, r7
 8000bf2:	1a9a      	subs	r2, r3, r2
 8000bf4:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf8:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c06:	459c      	cmp	ip, r3
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x8e>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c10:	f080 80d7 	bcs.w	8000dc2 <__udivmoddi4+0x232>
 8000c14:	459c      	cmp	ip, r3
 8000c16:	f240 80d4 	bls.w	8000dc2 <__udivmoddi4+0x232>
 8000c1a:	443b      	add	r3, r7
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	eba3 030c 	sub.w	r3, r3, ip
 8000c28:	b11d      	cbz	r5, 8000c32 <__udivmoddi4+0xa2>
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	40f3      	lsrs	r3, r6
 8000c2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d905      	bls.n	8000c46 <__udivmoddi4+0xb6>
 8000c3a:	b10d      	cbz	r5, 8000c40 <__udivmoddi4+0xb0>
 8000c3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c40:	2100      	movs	r1, #0
 8000c42:	4608      	mov	r0, r1
 8000c44:	e7f5      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000c46:	fab3 f183 	clz	r1, r3
 8000c4a:	2900      	cmp	r1, #0
 8000c4c:	d146      	bne.n	8000cdc <__udivmoddi4+0x14c>
 8000c4e:	4573      	cmp	r3, lr
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xc8>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 8108 	bhi.w	8000e68 <__udivmoddi4+0x2d8>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	4690      	mov	r8, r2
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d0e5      	beq.n	8000c32 <__udivmoddi4+0xa2>
 8000c66:	e9c5 4800 	strd	r4, r8, [r5]
 8000c6a:	e7e2      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	f000 8091 	beq.w	8000d94 <__udivmoddi4+0x204>
 8000c72:	fab2 f682 	clz	r6, r2
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	f040 80a5 	bne.w	8000dc6 <__udivmoddi4+0x236>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	2101      	movs	r1, #1
 8000c80:	0c03      	lsrs	r3, r0, #16
 8000c82:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c86:	b280      	uxth	r0, r0
 8000c88:	b2bc      	uxth	r4, r7
 8000c8a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c8e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb04 f20c 	mul.w	r2, r4, ip
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x11e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca4:	d202      	bcs.n	8000cac <__udivmoddi4+0x11c>
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	f200 80e3 	bhi.w	8000e72 <__udivmoddi4+0x2e2>
 8000cac:	46c4      	mov	ip, r8
 8000cae:	1a9b      	subs	r3, r3, r2
 8000cb0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb8:	fb02 f404 	mul.w	r4, r2, r4
 8000cbc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc0:	429c      	cmp	r4, r3
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x144>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x142>
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	f200 80cd 	bhi.w	8000e6c <__udivmoddi4+0x2dc>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	1b1b      	subs	r3, r3, r4
 8000cd6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0x98>
 8000cdc:	f1c1 0620 	rsb	r6, r1, #32
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce6:	431f      	orrs	r7, r3
 8000ce8:	fa2e fa06 	lsr.w	sl, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	fbba f8f9 	udiv	r8, sl, r9
 8000cf4:	fa0e fe01 	lsl.w	lr, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	ea43 030e 	orr.w	r3, r3, lr
 8000d08:	fa00 fe01 	lsl.w	lr, r0, r1
 8000d0c:	fb08 f00c 	mul.w	r0, r8, ip
 8000d10:	0c1c      	lsrs	r4, r3, #16
 8000d12:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1c:	d90a      	bls.n	8000d34 <__udivmoddi4+0x1a4>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d24:	f080 809e 	bcs.w	8000e64 <__udivmoddi4+0x2d4>
 8000d28:	42a0      	cmp	r0, r4
 8000d2a:	f240 809b 	bls.w	8000e64 <__udivmoddi4+0x2d4>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	1a24      	subs	r4, r4, r0
 8000d36:	b298      	uxth	r0, r3
 8000d38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d44:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d48:	45a4      	cmp	ip, r4
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x1d0>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d52:	f080 8085 	bcs.w	8000e60 <__udivmoddi4+0x2d0>
 8000d56:	45a4      	cmp	ip, r4
 8000d58:	f240 8082 	bls.w	8000e60 <__udivmoddi4+0x2d0>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	443c      	add	r4, r7
 8000d60:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d64:	eba4 040c 	sub.w	r4, r4, ip
 8000d68:	fba0 8c02 	umull	r8, ip, r0, r2
 8000d6c:	4564      	cmp	r4, ip
 8000d6e:	4643      	mov	r3, r8
 8000d70:	46e1      	mov	r9, ip
 8000d72:	d364      	bcc.n	8000e3e <__udivmoddi4+0x2ae>
 8000d74:	d061      	beq.n	8000e3a <__udivmoddi4+0x2aa>
 8000d76:	b15d      	cbz	r5, 8000d90 <__udivmoddi4+0x200>
 8000d78:	ebbe 0203 	subs.w	r2, lr, r3
 8000d7c:	eb64 0409 	sbc.w	r4, r4, r9
 8000d80:	fa04 f606 	lsl.w	r6, r4, r6
 8000d84:	fa22 f301 	lsr.w	r3, r2, r1
 8000d88:	431e      	orrs	r6, r3
 8000d8a:	40cc      	lsrs	r4, r1
 8000d8c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d90:	2100      	movs	r1, #0
 8000d92:	e74e      	b.n	8000c32 <__udivmoddi4+0xa2>
 8000d94:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d9e:	b280      	uxth	r0, r0
 8000da0:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000da4:	463b      	mov	r3, r7
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	4638      	mov	r0, r7
 8000dac:	463c      	mov	r4, r7
 8000dae:	46b8      	mov	r8, r7
 8000db0:	46be      	mov	lr, r7
 8000db2:	2620      	movs	r6, #32
 8000db4:	eba2 0208 	sub.w	r2, r2, r8
 8000db8:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dbc:	e765      	b.n	8000c8a <__udivmoddi4+0xfa>
 8000dbe:	4601      	mov	r1, r0
 8000dc0:	e717      	b.n	8000bf2 <__udivmoddi4+0x62>
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	e72b      	b.n	8000c1e <__udivmoddi4+0x8e>
 8000dc6:	f1c6 0120 	rsb	r1, r6, #32
 8000dca:	fa2e fc01 	lsr.w	ip, lr, r1
 8000dce:	40b7      	lsls	r7, r6
 8000dd0:	fa0e fe06 	lsl.w	lr, lr, r6
 8000dd4:	fa20 f101 	lsr.w	r1, r0, r1
 8000dd8:	ea41 010e 	orr.w	r1, r1, lr
 8000ddc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de0:	fbbc f8fe 	udiv	r8, ip, lr
 8000de4:	b2bc      	uxth	r4, r7
 8000de6:	fb0e cc18 	mls	ip, lr, r8, ip
 8000dea:	fb08 f904 	mul.w	r9, r8, r4
 8000dee:	0c0a      	lsrs	r2, r1, #16
 8000df0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8000df4:	40b0      	lsls	r0, r6
 8000df6:	4591      	cmp	r9, r2
 8000df8:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dfc:	b280      	uxth	r0, r0
 8000dfe:	d93e      	bls.n	8000e7e <__udivmoddi4+0x2ee>
 8000e00:	18ba      	adds	r2, r7, r2
 8000e02:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e06:	d201      	bcs.n	8000e0c <__udivmoddi4+0x27c>
 8000e08:	4591      	cmp	r9, r2
 8000e0a:	d81f      	bhi.n	8000e4c <__udivmoddi4+0x2bc>
 8000e0c:	eba2 0209 	sub.w	r2, r2, r9
 8000e10:	fbb2 f9fe 	udiv	r9, r2, lr
 8000e14:	fb09 f804 	mul.w	r8, r9, r4
 8000e18:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000e1c:	b28a      	uxth	r2, r1
 8000e1e:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8000e22:	4542      	cmp	r2, r8
 8000e24:	d229      	bcs.n	8000e7a <__udivmoddi4+0x2ea>
 8000e26:	18ba      	adds	r2, r7, r2
 8000e28:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e2c:	d2c2      	bcs.n	8000db4 <__udivmoddi4+0x224>
 8000e2e:	4542      	cmp	r2, r8
 8000e30:	d2c0      	bcs.n	8000db4 <__udivmoddi4+0x224>
 8000e32:	f1a9 0102 	sub.w	r1, r9, #2
 8000e36:	443a      	add	r2, r7
 8000e38:	e7bc      	b.n	8000db4 <__udivmoddi4+0x224>
 8000e3a:	45c6      	cmp	lr, r8
 8000e3c:	d29b      	bcs.n	8000d76 <__udivmoddi4+0x1e6>
 8000e3e:	ebb8 0302 	subs.w	r3, r8, r2
 8000e42:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e46:	3801      	subs	r0, #1
 8000e48:	46e1      	mov	r9, ip
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1e6>
 8000e4c:	eba7 0909 	sub.w	r9, r7, r9
 8000e50:	444a      	add	r2, r9
 8000e52:	fbb2 f9fe 	udiv	r9, r2, lr
 8000e56:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5a:	fb09 f804 	mul.w	r8, r9, r4
 8000e5e:	e7db      	b.n	8000e18 <__udivmoddi4+0x288>
 8000e60:	4603      	mov	r3, r0
 8000e62:	e77d      	b.n	8000d60 <__udivmoddi4+0x1d0>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e765      	b.n	8000d34 <__udivmoddi4+0x1a4>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e6fa      	b.n	8000c62 <__udivmoddi4+0xd2>
 8000e6c:	443b      	add	r3, r7
 8000e6e:	3a02      	subs	r2, #2
 8000e70:	e730      	b.n	8000cd4 <__udivmoddi4+0x144>
 8000e72:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e76:	443b      	add	r3, r7
 8000e78:	e719      	b.n	8000cae <__udivmoddi4+0x11e>
 8000e7a:	4649      	mov	r1, r9
 8000e7c:	e79a      	b.n	8000db4 <__udivmoddi4+0x224>
 8000e7e:	eba2 0209 	sub.w	r2, r2, r9
 8000e82:	fbb2 f9fe 	udiv	r9, r2, lr
 8000e86:	46c4      	mov	ip, r8
 8000e88:	fb09 f804 	mul.w	r8, r9, r4
 8000e8c:	e7c4      	b.n	8000e18 <__udivmoddi4+0x288>
 8000e8e:	bf00      	nop

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea8:	4b27      	ldr	r3, [pc, #156]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a26      	ldr	r2, [pc, #152]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000eae:	f043 0320 	orr.w	r3, r3, #32
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b24      	ldr	r3, [pc, #144]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0320 	and.w	r3, r3, #32
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a1a      	ldr	r2, [pc, #104]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <MX_GPIO_Init+0xb4>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TXEN_GPIO_Port, RS485_TXEN_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef6:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <MX_GPIO_Init+0xb8>)
 8000ef8:	f001 fa62 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	2140      	movs	r1, #64	@ 0x40
 8000f00:	4813      	ldr	r0, [pc, #76]	@ (8000f50 <MX_GPIO_Init+0xbc>)
 8000f02:	f001 fa5d 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RS485_TXEN_Pin */
  GPIO_InitStruct.Pin = RS485_TXEN_Pin;
 8000f06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS485_TXEN_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <MX_GPIO_Init+0xb8>)
 8000f20:	f001 f8ca 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : W25Q_CS_Pin */
  GPIO_InitStruct.Pin = W25Q_CS_Pin;
 8000f24:	2340      	movs	r3, #64	@ 0x40
 8000f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(W25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <MX_GPIO_Init+0xbc>)
 8000f3c:	f001 f8bc 	bl	80020b8 <HAL_GPIO_Init>

}
 8000f40:	bf00      	nop
 8000f42:	3720      	adds	r7, #32
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40010c00 	.word	0x40010c00

08000f54 <_write>:
/* USER CODE BEGIN 0 */
/**
 * \brief           Printf qua UART1 - Sử dụng _write() cho GCC
 */
#if defined(__GNUC__)
int _write(int fd, char *ptr, int len) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <_write+0x28>)
 8000f6c:	f002 ffea 	bl	8003f44 <HAL_UART_Transmit>
    return len;
 8000f70:	687b      	ldr	r3, [r7, #4]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200002d4 	.word	0x200002d4

08000f80 <prv_spi_init>:
/**
 * \brief           Initialize SPI peripheral
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_spi_init(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    /* SPI đã được khởi tạo trong MX_SPI1_Init() */
    /* Chỉ cần đảm bảo CS pin ở mức cao */
    HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2140      	movs	r1, #64	@ 0x40
 8000f88:	4802      	ldr	r0, [pc, #8]	@ (8000f94 <prv_spi_init+0x14>)
 8000f8a:	f001 fa19 	bl	80023c0 <HAL_GPIO_WritePin>
    return 1;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40010c00 	.word	0x40010c00

08000f98 <prv_spi_select>:
/**
 * \brief           Select chip (pull CS low)
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_spi_select(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2140      	movs	r1, #64	@ 0x40
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <prv_spi_select+0x14>)
 8000fa2:	f001 fa0d 	bl	80023c0 <HAL_GPIO_WritePin>
    return 1;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <prv_spi_deselect>:
/**
 * \brief           Deselect chip (pull CS high)
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_spi_deselect(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W25Q_CS_GPIO_Port, W25Q_CS_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2140      	movs	r1, #64	@ 0x40
 8000fb8:	4802      	ldr	r0, [pc, #8]	@ (8000fc4 <prv_spi_deselect+0x14>)
 8000fba:	f001 fa01 	bl	80023c0 <HAL_GPIO_WritePin>
    return 1;
 8000fbe:	2301      	movs	r3, #1
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40010c00 	.word	0x40010c00

08000fc8 <prv_spi_transmit>:
 * \param[in]       data: Data buffer to transmit
 * \param[in]       len: Number of bytes to transmit
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_spi_transmit(const uint8_t* data, uint32_t len) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;

    status = HAL_SPI_Transmit(&hspi1, (uint8_t*)data, len, HAL_MAX_DELAY);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <prv_spi_transmit+0x34>)
 8000fde:	f001 ffff 	bl	8002fe0 <HAL_SPI_Transmit>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
    return (status == HAL_OK) ? 1 : 0;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000230 	.word	0x20000230

08001000 <prv_spi_receive>:
 * \param[out]      data: Buffer to store received data
 * \param[in]       len: Number of bytes to receive
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_spi_receive(uint8_t* data, uint32_t len) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;

    status = HAL_SPI_Receive(&hspi1, data, len, HAL_MAX_DELAY);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b29a      	uxth	r2, r3
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <prv_spi_receive+0x34>)
 8001016:	f002 f927 	bl	8003268 <HAL_SPI_Receive>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]
    return (status == HAL_OK) ? 1 : 0;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b00      	cmp	r3, #0
 8001022:	bf0c      	ite	eq
 8001024:	2301      	moveq	r3, #1
 8001026:	2300      	movne	r3, #0
 8001028:	b2db      	uxtb	r3, r3
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000230 	.word	0x20000230

08001038 <prv_spi_transmit_receive>:
 * \param[out]      rx_data: Buffer to store received data
 * \param[in]       len: Number of bytes to transfer
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_spi_transmit_receive(const uint8_t* tx_data, uint8_t* rx_data, uint32_t len) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af02      	add	r7, sp, #8
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status;

    status = HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)tx_data, rx_data, len, HAL_MAX_DELAY);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	b29b      	uxth	r3, r3
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	9200      	str	r2, [sp, #0]
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	68f9      	ldr	r1, [r7, #12]
 8001052:	4807      	ldr	r0, [pc, #28]	@ (8001070 <prv_spi_transmit_receive+0x38>)
 8001054:	f002 fa21 	bl	800349a <HAL_SPI_TransmitReceive>
 8001058:	4603      	mov	r3, r0
 800105a:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK) ? 1 : 0;
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	2b00      	cmp	r3, #0
 8001060:	bf0c      	ite	eq
 8001062:	2301      	moveq	r3, #1
 8001064:	2300      	movne	r3, #0
 8001066:	b2db      	uxtb	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000230 	.word	0x20000230

08001074 <prv_delay_ms>:
/**
 * \brief           Delay in milliseconds
 * \param[in]       ms: Milliseconds to delay
 */
static void
prv_delay_ms(uint32_t ms) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 ff17 	bl	8001eb0 <HAL_Delay>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <print_chip_info>:
/**
 * \brief           Print chip information
 * \param[in]       info: Chip information structure
 */
static void
print_chip_info(const w25q_info_t* info) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    printf("\r\n========== W25Q Flash Info ==========\r\n");
 8001094:	4858      	ldr	r0, [pc, #352]	@ (80011f8 <print_chip_info+0x16c>)
 8001096:	f004 f9b5 	bl	8005404 <puts>
    printf("Manufacturer ID : 0x%02X\r\n", info->manufacturer_id);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	4619      	mov	r1, r3
 80010a0:	4856      	ldr	r0, [pc, #344]	@ (80011fc <print_chip_info+0x170>)
 80010a2:	f004 f947 	bl	8005334 <iprintf>
    printf("Device ID       : 0x%02X\r\n", info->device_id);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	789b      	ldrb	r3, [r3, #2]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4854      	ldr	r0, [pc, #336]	@ (8001200 <print_chip_info+0x174>)
 80010ae:	f004 f941 	bl	8005334 <iprintf>

    printf("Chip Type       : W25Q");
 80010b2:	4854      	ldr	r0, [pc, #336]	@ (8001204 <print_chip_info+0x178>)
 80010b4:	f004 f93e 	bl	8005334 <iprintf>
    switch (info->type) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b11      	subs	r3, #17
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d838      	bhi.n	8001134 <print_chip_info+0xa8>
 80010c2:	a201      	add	r2, pc, #4	@ (adr r2, 80010c8 <print_chip_info+0x3c>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010ed 	.word	0x080010ed
 80010cc:	080010f5 	.word	0x080010f5
 80010d0:	080010fd 	.word	0x080010fd
 80010d4:	08001105 	.word	0x08001105
 80010d8:	0800110d 	.word	0x0800110d
 80010dc:	08001115 	.word	0x08001115
 80010e0:	0800111d 	.word	0x0800111d
 80010e4:	08001125 	.word	0x08001125
 80010e8:	0800112d 	.word	0x0800112d
        case W25Q10:  printf("10 (1Mbit)\r\n"); break;
 80010ec:	4846      	ldr	r0, [pc, #280]	@ (8001208 <print_chip_info+0x17c>)
 80010ee:	f004 f989 	bl	8005404 <puts>
 80010f2:	e023      	b.n	800113c <print_chip_info+0xb0>
        case W25Q20:  printf("20 (2Mbit)\r\n"); break;
 80010f4:	4845      	ldr	r0, [pc, #276]	@ (800120c <print_chip_info+0x180>)
 80010f6:	f004 f985 	bl	8005404 <puts>
 80010fa:	e01f      	b.n	800113c <print_chip_info+0xb0>
        case W25Q40:  printf("40 (4Mbit)\r\n"); break;
 80010fc:	4844      	ldr	r0, [pc, #272]	@ (8001210 <print_chip_info+0x184>)
 80010fe:	f004 f981 	bl	8005404 <puts>
 8001102:	e01b      	b.n	800113c <print_chip_info+0xb0>
        case W25Q80:  printf("80 (8Mbit)\r\n"); break;
 8001104:	4843      	ldr	r0, [pc, #268]	@ (8001214 <print_chip_info+0x188>)
 8001106:	f004 f97d 	bl	8005404 <puts>
 800110a:	e017      	b.n	800113c <print_chip_info+0xb0>
        case W25Q16:  printf("16 (16Mbit)\r\n"); break;
 800110c:	4842      	ldr	r0, [pc, #264]	@ (8001218 <print_chip_info+0x18c>)
 800110e:	f004 f979 	bl	8005404 <puts>
 8001112:	e013      	b.n	800113c <print_chip_info+0xb0>
        case W25Q32:  printf("32 (32Mbit)\r\n"); break;
 8001114:	4841      	ldr	r0, [pc, #260]	@ (800121c <print_chip_info+0x190>)
 8001116:	f004 f975 	bl	8005404 <puts>
 800111a:	e00f      	b.n	800113c <print_chip_info+0xb0>
        case W25Q64:  printf("64 (64Mbit)\r\n"); break;
 800111c:	4840      	ldr	r0, [pc, #256]	@ (8001220 <print_chip_info+0x194>)
 800111e:	f004 f971 	bl	8005404 <puts>
 8001122:	e00b      	b.n	800113c <print_chip_info+0xb0>
        case W25Q128: printf("128 (128Mbit)\r\n"); break;
 8001124:	483f      	ldr	r0, [pc, #252]	@ (8001224 <print_chip_info+0x198>)
 8001126:	f004 f96d 	bl	8005404 <puts>
 800112a:	e007      	b.n	800113c <print_chip_info+0xb0>
        case W25Q256: printf("256 (256Mbit)\r\n"); break;
 800112c:	483e      	ldr	r0, [pc, #248]	@ (8001228 <print_chip_info+0x19c>)
 800112e:	f004 f969 	bl	8005404 <puts>
 8001132:	e003      	b.n	800113c <print_chip_info+0xb0>
        default:      printf("Unknown\r\n"); break;
 8001134:	483d      	ldr	r0, [pc, #244]	@ (800122c <print_chip_info+0x1a0>)
 8001136:	f004 f965 	bl	8005404 <puts>
 800113a:	bf00      	nop
    }

    printf("Capacity        : %lu bytes (%lu KB)\r\n",
           info->capacity_bytes, info->capacity_bytes / 1024);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6859      	ldr	r1, [r3, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
    printf("Capacity        : %lu bytes (%lu KB)\r\n",
 8001144:	0a9b      	lsrs	r3, r3, #10
 8001146:	461a      	mov	r2, r3
 8001148:	4839      	ldr	r0, [pc, #228]	@ (8001230 <print_chip_info+0x1a4>)
 800114a:	f004 f8f3 	bl	8005334 <iprintf>
    printf("Page Size       : %lu bytes\r\n", info->page_size);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4619      	mov	r1, r3
 8001154:	4837      	ldr	r0, [pc, #220]	@ (8001234 <print_chip_info+0x1a8>)
 8001156:	f004 f8ed 	bl	8005334 <iprintf>
    printf("Sector Size     : %lu bytes\r\n", info->sector_size);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4619      	mov	r1, r3
 8001160:	4835      	ldr	r0, [pc, #212]	@ (8001238 <print_chip_info+0x1ac>)
 8001162:	f004 f8e7 	bl	8005334 <iprintf>
    printf("Block Size      : %lu bytes\r\n", info->block_size);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	4619      	mov	r1, r3
 800116c:	4833      	ldr	r0, [pc, #204]	@ (800123c <print_chip_info+0x1b0>)
 800116e:	f004 f8e1 	bl	8005334 <iprintf>
    printf("Total Pages     : %lu\r\n", info->page_count);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	4619      	mov	r1, r3
 8001178:	4831      	ldr	r0, [pc, #196]	@ (8001240 <print_chip_info+0x1b4>)
 800117a:	f004 f8db 	bl	8005334 <iprintf>
    printf("Total Sectors   : %lu\r\n", info->sector_count);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4619      	mov	r1, r3
 8001184:	482f      	ldr	r0, [pc, #188]	@ (8001244 <print_chip_info+0x1b8>)
 8001186:	f004 f8d5 	bl	8005334 <iprintf>
    printf("Total Blocks    : %lu\r\n", info->block_count);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4619      	mov	r1, r3
 8001190:	482d      	ldr	r0, [pc, #180]	@ (8001248 <print_chip_info+0x1bc>)
 8001192:	f004 f8cf 	bl	8005334 <iprintf>
    printf("=====================================\r\n\r\n");
 8001196:	482d      	ldr	r0, [pc, #180]	@ (800124c <print_chip_info+0x1c0>)
 8001198:	f004 f934 	bl	8005404 <puts>

    /* Đọc JEDEC ID để kiểm tra kỹ hơn */
    uint8_t jedec_cmd = 0x9F;
 800119c:	239f      	movs	r3, #159	@ 0x9f
 800119e:	73fb      	strb	r3, [r7, #15]
    uint8_t jedec_id[3];

    printf("========== JEDEC ID Check ==========\r\n");
 80011a0:	482b      	ldr	r0, [pc, #172]	@ (8001250 <print_chip_info+0x1c4>)
 80011a2:	f004 f92f 	bl	8005404 <puts>
    w25q_device.ll.select();
 80011a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001254 <print_chip_info+0x1c8>)
 80011a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011aa:	4798      	blx	r3
    w25q_device.ll.transmit(&jedec_cmd, 1);
 80011ac:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <print_chip_info+0x1c8>)
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	f107 020f 	add.w	r2, r7, #15
 80011b4:	2101      	movs	r1, #1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4798      	blx	r3
    w25q_device.ll.receive(jedec_id, 3);
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <print_chip_info+0x1c8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f107 020c 	add.w	r2, r7, #12
 80011c2:	2103      	movs	r1, #3
 80011c4:	4610      	mov	r0, r2
 80011c6:	4798      	blx	r3
    w25q_device.ll.deselect();
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <print_chip_info+0x1c8>)
 80011ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011cc:	4798      	blx	r3

    printf("JEDEC ID: 0x%02X 0x%02X 0x%02X\r\n",
           jedec_id[0], jedec_id[1], jedec_id[2]);
 80011ce:	7b3b      	ldrb	r3, [r7, #12]
    printf("JEDEC ID: 0x%02X 0x%02X 0x%02X\r\n",
 80011d0:	4619      	mov	r1, r3
           jedec_id[0], jedec_id[1], jedec_id[2]);
 80011d2:	7b7b      	ldrb	r3, [r7, #13]
    printf("JEDEC ID: 0x%02X 0x%02X 0x%02X\r\n",
 80011d4:	461a      	mov	r2, r3
           jedec_id[0], jedec_id[1], jedec_id[2]);
 80011d6:	7bbb      	ldrb	r3, [r7, #14]
    printf("JEDEC ID: 0x%02X 0x%02X 0x%02X\r\n",
 80011d8:	481f      	ldr	r0, [pc, #124]	@ (8001258 <print_chip_info+0x1cc>)
 80011da:	f004 f8ab 	bl	8005334 <iprintf>
    printf("Expected for W25Q16: 0xEF 0x40 0x15\r\n");
 80011de:	481f      	ldr	r0, [pc, #124]	@ (800125c <print_chip_info+0x1d0>)
 80011e0:	f004 f910 	bl	8005404 <puts>
    printf("Expected for W25Q80: 0xEF 0x40 0x14\r\n");
 80011e4:	481e      	ldr	r0, [pc, #120]	@ (8001260 <print_chip_info+0x1d4>)
 80011e6:	f004 f90d 	bl	8005404 <puts>
    printf("====================================\r\n\r\n");
 80011ea:	481e      	ldr	r0, [pc, #120]	@ (8001264 <print_chip_info+0x1d8>)
 80011ec:	f004 f90a 	bl	8005404 <puts>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	08007318 	.word	0x08007318
 80011fc:	08007344 	.word	0x08007344
 8001200:	08007360 	.word	0x08007360
 8001204:	0800737c 	.word	0x0800737c
 8001208:	08007394 	.word	0x08007394
 800120c:	080073a0 	.word	0x080073a0
 8001210:	080073ac 	.word	0x080073ac
 8001214:	080073b8 	.word	0x080073b8
 8001218:	080073c4 	.word	0x080073c4
 800121c:	080073d4 	.word	0x080073d4
 8001220:	080073e4 	.word	0x080073e4
 8001224:	080073f4 	.word	0x080073f4
 8001228:	08007404 	.word	0x08007404
 800122c:	08007414 	.word	0x08007414
 8001230:	08007420 	.word	0x08007420
 8001234:	08007448 	.word	0x08007448
 8001238:	08007468 	.word	0x08007468
 800123c:	08007488 	.word	0x08007488
 8001240:	080074a8 	.word	0x080074a8
 8001244:	080074c0 	.word	0x080074c0
 8001248:	080074d8 	.word	0x080074d8
 800124c:	080074f0 	.word	0x080074f0
 8001250:	0800751c 	.word	0x0800751c
 8001254:	200001f0 	.word	0x200001f0
 8001258:	08007544 	.word	0x08007544
 800125c:	08007568 	.word	0x08007568
 8001260:	08007590 	.word	0x08007590
 8001264:	080075b8 	.word	0x080075b8

08001268 <w25q_demo_test>:

/**
 * \brief           Test basic read/write operations
 */
static void
w25q_demo_test(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 800126e:	af00      	add	r7, sp, #0
    w25q_info_t info;
    uint8_t write_buffer[256], read_buffer[256];
    uint32_t test_address, i;
    uint8_t test_passed;

    printf("\r\n");
 8001270:	48cd      	ldr	r0, [pc, #820]	@ (80015a8 <w25q_demo_test+0x340>)
 8001272:	f004 f8c7 	bl	8005404 <puts>
    printf("*****************************************\r\n");
 8001276:	48cd      	ldr	r0, [pc, #820]	@ (80015ac <w25q_demo_test+0x344>)
 8001278:	f004 f8c4 	bl	8005404 <puts>
    printf("*   W25Q Flash Memory Test Program     *\r\n");
 800127c:	48cc      	ldr	r0, [pc, #816]	@ (80015b0 <w25q_demo_test+0x348>)
 800127e:	f004 f8c1 	bl	8005404 <puts>
    printf("*   STM32F107VCT6 Example               *\r\n");
 8001282:	48cc      	ldr	r0, [pc, #816]	@ (80015b4 <w25q_demo_test+0x34c>)
 8001284:	f004 f8be 	bl	8005404 <puts>
    printf("*****************************************\r\n\r\n");
 8001288:	48cb      	ldr	r0, [pc, #812]	@ (80015b8 <w25q_demo_test+0x350>)
 800128a:	f004 f8bb 	bl	8005404 <puts>

    /* Khởi tạo W25Q */
    printf("Initializing W25Q flash...\r\n");
 800128e:	48cb      	ldr	r0, [pc, #812]	@ (80015bc <w25q_demo_test+0x354>)
 8001290:	f004 f8b8 	bl	8005404 <puts>
    result = w25q_init(&w25q_device, &w25q_ll_stm32);
 8001294:	49ca      	ldr	r1, [pc, #808]	@ (80015c0 <w25q_demo_test+0x358>)
 8001296:	48cb      	ldr	r0, [pc, #812]	@ (80015c4 <w25q_demo_test+0x35c>)
 8001298:	f003 f8d0 	bl	800443c <w25q_init>
 800129c:	4603      	mov	r3, r0
 800129e:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233

    if (result != W25Q_OK) {
 80012a2:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00f      	beq.n	80012ca <w25q_demo_test+0x62>
        printf("ERROR: W25Q initialization failed!\r\n");
 80012aa:	48c7      	ldr	r0, [pc, #796]	@ (80015c8 <w25q_demo_test+0x360>)
 80012ac:	f004 f8aa 	bl	8005404 <puts>
        printf("Please check:\r\n");
 80012b0:	48c6      	ldr	r0, [pc, #792]	@ (80015cc <w25q_demo_test+0x364>)
 80012b2:	f004 f8a7 	bl	8005404 <puts>
        printf("  - SPI connections (MISO, MOSI, CLK, CS)\r\n");
 80012b6:	48c6      	ldr	r0, [pc, #792]	@ (80015d0 <w25q_demo_test+0x368>)
 80012b8:	f004 f8a4 	bl	8005404 <puts>
        printf("  - Power supply (3.3V)\r\n");
 80012bc:	48c5      	ldr	r0, [pc, #788]	@ (80015d4 <w25q_demo_test+0x36c>)
 80012be:	f004 f8a1 	bl	8005404 <puts>
        printf("  - SPI configuration\r\n");
 80012c2:	48c5      	ldr	r0, [pc, #788]	@ (80015d8 <w25q_demo_test+0x370>)
 80012c4:	f004 f89e 	bl	8005404 <puts>
        return;
 80012c8:	e261      	b.n	800178e <w25q_demo_test+0x526>
    }

    printf("SUCCESS: W25Q initialized!\r\n\r\n");
 80012ca:	48c4      	ldr	r0, [pc, #784]	@ (80015dc <w25q_demo_test+0x374>)
 80012cc:	f004 f89a 	bl	8005404 <puts>

    /* Lấy thông tin chip */
    w25q_get_info(&w25q_device, &info);
 80012d0:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80012d4:	4619      	mov	r1, r3
 80012d6:	48bb      	ldr	r0, [pc, #748]	@ (80015c4 <w25q_demo_test+0x35c>)
 80012d8:	f003 faf3 	bl	80048c2 <w25q_get_info>
    print_chip_info(&info);
 80012dc:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fed3 	bl	800108c <print_chip_info>

    /* Test 1: Basic Read/Write */
    printf("========== Test 1: Basic Read/Write ==========\r\n");
 80012e6:	48be      	ldr	r0, [pc, #760]	@ (80015e0 <w25q_demo_test+0x378>)
 80012e8:	f004 f88c 	bl	8005404 <puts>
    test_address = 0x001000; /* Address at 4KB offset */
 80012ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f0:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

    /* Chuẩn bị dữ liệu test */
    printf("Preparing test data (256 bytes)...\r\n");
 80012f4:	48bb      	ldr	r0, [pc, #748]	@ (80015e4 <w25q_demo_test+0x37c>)
 80012f6:	f004 f885 	bl	8005404 <puts>
    for (i = 0; i < 256; ++i) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8001300:	e010      	b.n	8001324 <w25q_demo_test+0xbc>
        write_buffer[i] = (uint8_t)(i & 0xFF);
 8001302:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001306:	b2d9      	uxtb	r1, r3
 8001308:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800130c:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8001310:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001314:	4413      	add	r3, r2
 8001316:	460a      	mov	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 256; ++i) {
 800131a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800131e:	3301      	adds	r3, #1
 8001320:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8001324:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001328:	2bff      	cmp	r3, #255	@ 0xff
 800132a:	d9ea      	bls.n	8001302 <w25q_demo_test+0x9a>
    }

    /* Xóa sector */
    printf("Erasing sector at 0x%06lX...\r\n", test_address);
 800132c:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 8001330:	48ad      	ldr	r0, [pc, #692]	@ (80015e8 <w25q_demo_test+0x380>)
 8001332:	f003 ffff 	bl	8005334 <iprintf>
    result = w25q_erase_sector(&w25q_device, test_address);
 8001336:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 800133a:	48a2      	ldr	r0, [pc, #648]	@ (80015c4 <w25q_demo_test+0x35c>)
 800133c:	f003 fa26 	bl	800478c <w25q_erase_sector>
 8001340:	4603      	mov	r3, r0
 8001342:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
    if (result != W25Q_OK) {
 8001346:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <w25q_demo_test+0xee>
        printf("ERROR: Sector erase failed!\r\n");
 800134e:	48a7      	ldr	r0, [pc, #668]	@ (80015ec <w25q_demo_test+0x384>)
 8001350:	f004 f858 	bl	8005404 <puts>
        return;
 8001354:	e21b      	b.n	800178e <w25q_demo_test+0x526>
    }
    printf("Sector erased successfully!\r\n");
 8001356:	48a6      	ldr	r0, [pc, #664]	@ (80015f0 <w25q_demo_test+0x388>)
 8001358:	f004 f854 	bl	8005404 <puts>

    /* Ghi dữ liệu */
    printf("Writing 256 bytes...\r\n");
 800135c:	48a5      	ldr	r0, [pc, #660]	@ (80015f4 <w25q_demo_test+0x38c>)
 800135e:	f004 f851 	bl	8005404 <puts>
    result = w25q_write_page(&w25q_device, test_address, write_buffer, 256);
 8001362:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 8001366:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136a:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 800136e:	4895      	ldr	r0, [pc, #596]	@ (80015c4 <w25q_demo_test+0x35c>)
 8001370:	f003 f99c 	bl	80046ac <w25q_write_page>
 8001374:	4603      	mov	r3, r0
 8001376:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
    if (result != W25Q_OK) {
 800137a:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <w25q_demo_test+0x122>
        printf("ERROR: Write failed!\r\n");
 8001382:	489d      	ldr	r0, [pc, #628]	@ (80015f8 <w25q_demo_test+0x390>)
 8001384:	f004 f83e 	bl	8005404 <puts>
        return;
 8001388:	e201      	b.n	800178e <w25q_demo_test+0x526>
    }
    printf("Write completed!\r\n");
 800138a:	489c      	ldr	r0, [pc, #624]	@ (80015fc <w25q_demo_test+0x394>)
 800138c:	f004 f83a 	bl	8005404 <puts>

    /* Đọc lại */
    printf("Reading 256 bytes...\r\n");
 8001390:	489b      	ldr	r0, [pc, #620]	@ (8001600 <w25q_demo_test+0x398>)
 8001392:	f004 f837 	bl	8005404 <puts>
    result = w25q_read(&w25q_device, test_address, read_buffer, 256);
 8001396:	1d3a      	adds	r2, r7, #4
 8001398:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139c:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 80013a0:	4888      	ldr	r0, [pc, #544]	@ (80015c4 <w25q_demo_test+0x35c>)
 80013a2:	f003 f922 	bl	80045ea <w25q_read>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
    if (result != W25Q_OK) {
 80013ac:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <w25q_demo_test+0x154>
        printf("ERROR: Read failed!\r\n");
 80013b4:	4893      	ldr	r0, [pc, #588]	@ (8001604 <w25q_demo_test+0x39c>)
 80013b6:	f004 f825 	bl	8005404 <puts>
        return;
 80013ba:	e1e8      	b.n	800178e <w25q_demo_test+0x526>
    }
    printf("Read completed!\r\n");
 80013bc:	4892      	ldr	r0, [pc, #584]	@ (8001608 <w25q_demo_test+0x3a0>)
 80013be:	f004 f821 	bl	8005404 <puts>

    /* Verify */
    printf("Verifying data...\r\n");
 80013c2:	4892      	ldr	r0, [pc, #584]	@ (800160c <w25q_demo_test+0x3a4>)
 80013c4:	f004 f81e 	bl	8005404 <puts>
    test_passed = 1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
    for (i = 0; i < 256; ++i) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80013d4:	e031      	b.n	800143a <w25q_demo_test+0x1d2>
        if (write_buffer[i] != read_buffer[i]) {
 80013d6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80013da:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80013de:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80013e2:	4413      	add	r3, r2
 80013e4:	781a      	ldrb	r2, [r3, #0]
 80013e6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80013ea:	f5a3 710f 	sub.w	r1, r3, #572	@ 0x23c
 80013ee:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80013f2:	440b      	add	r3, r1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d01a      	beq.n	8001430 <w25q_demo_test+0x1c8>
            printf("ERROR at byte %lu: wrote 0x%02X, read 0x%02X\r\n",
                   i, write_buffer[i], read_buffer[i]);
 80013fa:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80013fe:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8001402:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001406:	4413      	add	r3, r2
 8001408:	781b      	ldrb	r3, [r3, #0]
            printf("ERROR at byte %lu: wrote 0x%02X, read 0x%02X\r\n",
 800140a:	4619      	mov	r1, r3
                   i, write_buffer[i], read_buffer[i]);
 800140c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001410:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 8001414:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001418:	4413      	add	r3, r2
 800141a:	781b      	ldrb	r3, [r3, #0]
            printf("ERROR at byte %lu: wrote 0x%02X, read 0x%02X\r\n",
 800141c:	460a      	mov	r2, r1
 800141e:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8001422:	487b      	ldr	r0, [pc, #492]	@ (8001610 <w25q_demo_test+0x3a8>)
 8001424:	f003 ff86 	bl	8005334 <iprintf>
            test_passed = 0;
 8001428:	2300      	movs	r3, #0
 800142a:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
            break;
 800142e:	e008      	b.n	8001442 <w25q_demo_test+0x1da>
    for (i = 0; i < 256; ++i) {
 8001430:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001434:	3301      	adds	r3, #1
 8001436:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 800143a:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800143e:	2bff      	cmp	r3, #255	@ 0xff
 8001440:	d9c9      	bls.n	80013d6 <w25q_demo_test+0x16e>
        }
    }

    if (test_passed) {
 8001442:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 8001446:	2b00      	cmp	r3, #0
 8001448:	d040      	beq.n	80014cc <w25q_demo_test+0x264>
        printf("SUCCESS: All data verified!\r\n");
 800144a:	4872      	ldr	r0, [pc, #456]	@ (8001614 <w25q_demo_test+0x3ac>)
 800144c:	f003 ffda 	bl	8005404 <puts>

        /* In 16 bytes đầu */
        printf("\r\nFirst 16 bytes (hex):\r\n");
 8001450:	4871      	ldr	r0, [pc, #452]	@ (8001618 <w25q_demo_test+0x3b0>)
 8001452:	f003 ffd7 	bl	8005404 <puts>
        printf("Write: ");
 8001456:	4871      	ldr	r0, [pc, #452]	@ (800161c <w25q_demo_test+0x3b4>)
 8001458:	f003 ff6c 	bl	8005334 <iprintf>
        for (i = 0; i < 16; ++i) {
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8001462:	e010      	b.n	8001486 <w25q_demo_test+0x21e>
            printf("%02X ", write_buffer[i]);
 8001464:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001468:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800146c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	486a      	ldr	r0, [pc, #424]	@ (8001620 <w25q_demo_test+0x3b8>)
 8001478:	f003 ff5c 	bl	8005334 <iprintf>
        for (i = 0; i < 16; ++i) {
 800147c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001480:	3301      	adds	r3, #1
 8001482:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8001486:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800148a:	2b0f      	cmp	r3, #15
 800148c:	d9ea      	bls.n	8001464 <w25q_demo_test+0x1fc>
        }
        printf("\r\nRead : ");
 800148e:	4865      	ldr	r0, [pc, #404]	@ (8001624 <w25q_demo_test+0x3bc>)
 8001490:	f003 ff50 	bl	8005334 <iprintf>
        for (i = 0; i < 16; ++i) {
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 800149a:	e010      	b.n	80014be <w25q_demo_test+0x256>
            printf("%02X ", read_buffer[i]);
 800149c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80014a0:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 80014a4:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	485c      	ldr	r0, [pc, #368]	@ (8001620 <w25q_demo_test+0x3b8>)
 80014b0:	f003 ff40 	bl	8005334 <iprintf>
        for (i = 0; i < 16; ++i) {
 80014b4:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80014b8:	3301      	adds	r3, #1
 80014ba:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80014be:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80014c2:	2b0f      	cmp	r3, #15
 80014c4:	d9ea      	bls.n	800149c <w25q_demo_test+0x234>
        }
        printf("\r\n");
 80014c6:	4838      	ldr	r0, [pc, #224]	@ (80015a8 <w25q_demo_test+0x340>)
 80014c8:	f003 ff9c 	bl	8005404 <puts>
    }
    printf("==============================================\r\n\r\n");
 80014cc:	4856      	ldr	r0, [pc, #344]	@ (8001628 <w25q_demo_test+0x3c0>)
 80014ce:	f003 ff99 	bl	8005404 <puts>

    /* Test 2: Large Write (1KB) */
    printf("========== Test 2: Large Write (1KB) ==========\r\n");
 80014d2:	4856      	ldr	r0, [pc, #344]	@ (800162c <w25q_demo_test+0x3c4>)
 80014d4:	f003 ff96 	bl	8005404 <puts>
    test_address = 0x002000;
 80014d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014dc:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

    printf("Writing 1KB data (4 pages)...\r\n");
 80014e0:	4853      	ldr	r0, [pc, #332]	@ (8001630 <w25q_demo_test+0x3c8>)
 80014e2:	f003 ff8f 	bl	8005404 <puts>

    /* Xóa sector */
    w25q_erase_sector(&w25q_device, test_address);
 80014e6:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 80014ea:	4836      	ldr	r0, [pc, #216]	@ (80015c4 <w25q_demo_test+0x35c>)
 80014ec:	f003 f94e 	bl	800478c <w25q_erase_sector>

    /* Ghi 4 pages */
    for (i = 0; i < 4; ++i) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80014f6:	e034      	b.n	8001562 <w25q_demo_test+0x2fa>
        uint32_t offset;

        offset = i * 256;
 80014f8:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
        memset(write_buffer, (uint8_t)(i + 0x55), 256);
 8001502:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001506:	b2db      	uxtb	r3, r3
 8001508:	3355      	adds	r3, #85	@ 0x55
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4619      	mov	r1, r3
 800150e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f854 	bl	80055c4 <memset>

        result = w25q_write_page(&w25q_device, test_address + offset,
 800151c:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 8001520:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8001524:	18d1      	adds	r1, r2, r3
 8001526:	f507 7282 	add.w	r2, r7, #260	@ 0x104
 800152a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800152e:	4825      	ldr	r0, [pc, #148]	@ (80015c4 <w25q_demo_test+0x35c>)
 8001530:	f003 f8bc 	bl	80046ac <w25q_write_page>
 8001534:	4603      	mov	r3, r0
 8001536:	f887 3233 	strb.w	r3, [r7, #563]	@ 0x233
                                 write_buffer, 256);
        if (result != W25Q_OK) {
 800153a:	f897 3233 	ldrb.w	r3, [r7, #563]	@ 0x233
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <w25q_demo_test+0x2e6>
            printf("ERROR: Write page %lu failed!\r\n", i);
 8001542:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8001546:	483b      	ldr	r0, [pc, #236]	@ (8001634 <w25q_demo_test+0x3cc>)
 8001548:	f003 fef4 	bl	8005334 <iprintf>
            return;
 800154c:	e11f      	b.n	800178e <w25q_demo_test+0x526>
        }
        printf("  Page %lu written\r\n", i);
 800154e:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8001552:	4839      	ldr	r0, [pc, #228]	@ (8001638 <w25q_demo_test+0x3d0>)
 8001554:	f003 feee 	bl	8005334 <iprintf>
    for (i = 0; i < 4; ++i) {
 8001558:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800155c:	3301      	adds	r3, #1
 800155e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8001562:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001566:	2b03      	cmp	r3, #3
 8001568:	d9c6      	bls.n	80014f8 <w25q_demo_test+0x290>
    }

    /* Đọc và verify tất cả 4 pages */
    printf("Verifying 1KB data...\r\n");
 800156a:	4834      	ldr	r0, [pc, #208]	@ (800163c <w25q_demo_test+0x3d4>)
 800156c:	f003 ff4a 	bl	8005404 <puts>
    test_passed = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
    for (i = 0; i < 4; ++i) {
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 800157c:	e08c      	b.n	8001698 <w25q_demo_test+0x430>
        uint32_t offset, j;

        offset = i * 256;
 800157e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
        w25q_read(&w25q_device, test_address + offset, read_buffer, 256);
 8001588:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800158c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8001590:	18d1      	adds	r1, r2, r3
 8001592:	1d3a      	adds	r2, r7, #4
 8001594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001598:	480a      	ldr	r0, [pc, #40]	@ (80015c4 <w25q_demo_test+0x35c>)
 800159a:	f003 f826 	bl	80045ea <w25q_read>

        for (j = 0; j < 256; ++j) {
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 80015a4:	e06b      	b.n	800167e <w25q_demo_test+0x416>
 80015a6:	bf00      	nop
 80015a8:	080075e0 	.word	0x080075e0
 80015ac:	080075e4 	.word	0x080075e4
 80015b0:	08007610 	.word	0x08007610
 80015b4:	0800763c 	.word	0x0800763c
 80015b8:	08007668 	.word	0x08007668
 80015bc:	08007698 	.word	0x08007698
 80015c0:	08007c1c 	.word	0x08007c1c
 80015c4:	200001f0 	.word	0x200001f0
 80015c8:	080076b4 	.word	0x080076b4
 80015cc:	080076d8 	.word	0x080076d8
 80015d0:	080076e8 	.word	0x080076e8
 80015d4:	08007714 	.word	0x08007714
 80015d8:	08007730 	.word	0x08007730
 80015dc:	08007748 	.word	0x08007748
 80015e0:	08007768 	.word	0x08007768
 80015e4:	08007798 	.word	0x08007798
 80015e8:	080077bc 	.word	0x080077bc
 80015ec:	080077dc 	.word	0x080077dc
 80015f0:	080077fc 	.word	0x080077fc
 80015f4:	0800781c 	.word	0x0800781c
 80015f8:	08007834 	.word	0x08007834
 80015fc:	0800784c 	.word	0x0800784c
 8001600:	08007860 	.word	0x08007860
 8001604:	08007878 	.word	0x08007878
 8001608:	08007890 	.word	0x08007890
 800160c:	080078a4 	.word	0x080078a4
 8001610:	080078b8 	.word	0x080078b8
 8001614:	080078e8 	.word	0x080078e8
 8001618:	08007908 	.word	0x08007908
 800161c:	08007924 	.word	0x08007924
 8001620:	0800792c 	.word	0x0800792c
 8001624:	08007934 	.word	0x08007934
 8001628:	08007940 	.word	0x08007940
 800162c:	08007974 	.word	0x08007974
 8001630:	080079a8 	.word	0x080079a8
 8001634:	080079c8 	.word	0x080079c8
 8001638:	080079e8 	.word	0x080079e8
 800163c:	08007a00 	.word	0x08007a00
            if (read_buffer[j] != (uint8_t)(i + 0x55)) {
 8001640:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001644:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 8001648:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800164c:	4413      	add	r3, r2
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3355      	adds	r3, #85	@ 0x55
 8001658:	b2db      	uxtb	r3, r3
 800165a:	429a      	cmp	r2, r3
 800165c:	d00a      	beq.n	8001674 <w25q_demo_test+0x40c>
                printf("ERROR at page %lu, byte %lu\r\n", i, j);
 800165e:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8001662:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8001666:	484c      	ldr	r0, [pc, #304]	@ (8001798 <w25q_demo_test+0x530>)
 8001668:	f003 fe64 	bl	8005334 <iprintf>
                test_passed = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
                break;
 8001672:	e008      	b.n	8001686 <w25q_demo_test+0x41e>
        for (j = 0; j < 256; ++j) {
 8001674:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001678:	3301      	adds	r3, #1
 800167a:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800167e:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 8001682:	2bff      	cmp	r3, #255	@ 0xff
 8001684:	d9dc      	bls.n	8001640 <w25q_demo_test+0x3d8>
            }
        }

        if (!test_passed) {
 8001686:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <w25q_demo_test+0x43c>
    for (i = 0; i < 4; ++i) {
 800168e:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8001698:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800169c:	2b03      	cmp	r3, #3
 800169e:	f67f af6e 	bls.w	800157e <w25q_demo_test+0x316>
 80016a2:	e000      	b.n	80016a6 <w25q_demo_test+0x43e>
            break;
 80016a4:	bf00      	nop
        }
    }

    if (test_passed) {
 80016a6:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <w25q_demo_test+0x44c>
        printf("SUCCESS: 1KB data verified!\r\n");
 80016ae:	483b      	ldr	r0, [pc, #236]	@ (800179c <w25q_demo_test+0x534>)
 80016b0:	f003 fea8 	bl	8005404 <puts>
    }
    printf("===============================================\r\n\r\n");
 80016b4:	483a      	ldr	r0, [pc, #232]	@ (80017a0 <w25q_demo_test+0x538>)
 80016b6:	f003 fea5 	bl	8005404 <puts>

    /* Test 3: Erase Test */
    printf("========== Test 3: Erase Verification ==========\r\n");
 80016ba:	483a      	ldr	r0, [pc, #232]	@ (80017a4 <w25q_demo_test+0x53c>)
 80016bc:	f003 fea2 	bl	8005404 <puts>
    test_address = 0x003000;
 80016c0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80016c4:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

    printf("Erasing sector at 0x%06lX...\r\n", test_address);
 80016c8:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 80016cc:	4836      	ldr	r0, [pc, #216]	@ (80017a8 <w25q_demo_test+0x540>)
 80016ce:	f003 fe31 	bl	8005334 <iprintf>
    w25q_erase_sector(&w25q_device, test_address);
 80016d2:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 80016d6:	4835      	ldr	r0, [pc, #212]	@ (80017ac <w25q_demo_test+0x544>)
 80016d8:	f003 f858 	bl	800478c <w25q_erase_sector>

    printf("Verifying erased data (should be 0xFF)...\r\n");
 80016dc:	4834      	ldr	r0, [pc, #208]	@ (80017b0 <w25q_demo_test+0x548>)
 80016de:	f003 fe91 	bl	8005404 <puts>
    w25q_read(&w25q_device, test_address, read_buffer, 256);
 80016e2:	1d3a      	adds	r2, r7, #4
 80016e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e8:	f8d7 122c 	ldr.w	r1, [r7, #556]	@ 0x22c
 80016ec:	482f      	ldr	r0, [pc, #188]	@ (80017ac <w25q_demo_test+0x544>)
 80016ee:	f002 ff7c 	bl	80045ea <w25q_read>

    test_passed = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
    for (i = 0; i < 256; ++i) {
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80016fe:	e020      	b.n	8001742 <w25q_demo_test+0x4da>
        if (read_buffer[i] != 0xFF) {
 8001700:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001704:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 8001708:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2bff      	cmp	r3, #255	@ 0xff
 8001712:	d011      	beq.n	8001738 <w25q_demo_test+0x4d0>
            printf("ERROR: Byte %lu is 0x%02X (not 0xFF)\r\n", i, read_buffer[i]);
 8001714:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8001718:	f5a3 720f 	sub.w	r2, r3, #572	@ 0x23c
 800171c:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001720:	4413      	add	r3, r2
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 800172a:	4822      	ldr	r0, [pc, #136]	@ (80017b4 <w25q_demo_test+0x54c>)
 800172c:	f003 fe02 	bl	8005334 <iprintf>
            test_passed = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	f887 323b 	strb.w	r3, [r7, #571]	@ 0x23b
            break;
 8001736:	e008      	b.n	800174a <w25q_demo_test+0x4e2>
    for (i = 0; i < 256; ++i) {
 8001738:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 800173c:	3301      	adds	r3, #1
 800173e:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8001742:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8001746:	2bff      	cmp	r3, #255	@ 0xff
 8001748:	d9da      	bls.n	8001700 <w25q_demo_test+0x498>
        }
    }

    if (test_passed) {
 800174a:	f897 323b 	ldrb.w	r3, [r7, #571]	@ 0x23b
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <w25q_demo_test+0x4f0>
        printf("SUCCESS: Sector properly erased!\r\n");
 8001752:	4819      	ldr	r0, [pc, #100]	@ (80017b8 <w25q_demo_test+0x550>)
 8001754:	f003 fe56 	bl	8005404 <puts>
    }
    printf("=================================================\r\n\r\n");
 8001758:	4818      	ldr	r0, [pc, #96]	@ (80017bc <w25q_demo_test+0x554>)
 800175a:	f003 fe53 	bl	8005404 <puts>

    /* Summary */
    printf("\r\n");
 800175e:	4818      	ldr	r0, [pc, #96]	@ (80017c0 <w25q_demo_test+0x558>)
 8001760:	f003 fe50 	bl	8005404 <puts>
    printf("*****************************************\r\n");
 8001764:	4817      	ldr	r0, [pc, #92]	@ (80017c4 <w25q_demo_test+0x55c>)
 8001766:	f003 fe4d 	bl	8005404 <puts>
    printf("*   ALL TESTS COMPLETED SUCCESSFULLY!   *\r\n");
 800176a:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <w25q_demo_test+0x560>)
 800176c:	f003 fe4a 	bl	8005404 <puts>
    printf("*   W25Q Flash is working correctly     *\r\n");
 8001770:	4816      	ldr	r0, [pc, #88]	@ (80017cc <w25q_demo_test+0x564>)
 8001772:	f003 fe47 	bl	8005404 <puts>
    printf("*****************************************\r\n\r\n");
 8001776:	4816      	ldr	r0, [pc, #88]	@ (80017d0 <w25q_demo_test+0x568>)
 8001778:	f003 fe44 	bl	8005404 <puts>

    /* Power down */
    printf("Putting flash into power-down mode...\r\n");
 800177c:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <w25q_demo_test+0x56c>)
 800177e:	f003 fe41 	bl	8005404 <puts>
    w25q_power_down(&w25q_device);
 8001782:	480a      	ldr	r0, [pc, #40]	@ (80017ac <w25q_demo_test+0x544>)
 8001784:	f003 f85f 	bl	8004846 <w25q_power_down>
    printf("Done! Flash is now in low-power mode.\r\n\r\n");
 8001788:	4813      	ldr	r0, [pc, #76]	@ (80017d8 <w25q_demo_test+0x570>)
 800178a:	f003 fe3b 	bl	8005404 <puts>
}
 800178e:	f507 7710 	add.w	r7, r7, #576	@ 0x240
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	08007a18 	.word	0x08007a18
 800179c:	08007a38 	.word	0x08007a38
 80017a0:	08007a58 	.word	0x08007a58
 80017a4:	08007a8c 	.word	0x08007a8c
 80017a8:	080077bc 	.word	0x080077bc
 80017ac:	200001f0 	.word	0x200001f0
 80017b0:	08007ac0 	.word	0x08007ac0
 80017b4:	08007aec 	.word	0x08007aec
 80017b8:	08007b14 	.word	0x08007b14
 80017bc:	08007b38 	.word	0x08007b38
 80017c0:	080075e0 	.word	0x080075e0
 80017c4:	080075e4 	.word	0x080075e4
 80017c8:	08007b70 	.word	0x08007b70
 80017cc:	08007b9c 	.word	0x08007b9c
 80017d0:	08007668 	.word	0x08007668
 80017d4:	08007bc8 	.word	0x08007bc8
 80017d8:	08007bf0 	.word	0x08007bf0

080017dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e0:	f000 fb34 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e4:	f000 f80e 	bl	8001804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e8:	f7ff fb54 	bl	8000e94 <MX_GPIO_Init>
  MX_SPI1_Init();
 80017ec:	f000 f870 	bl	80018d0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80017f0:	f000 fa90 	bl	8001d14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80017f4:	2064      	movs	r0, #100	@ 0x64
 80017f6:	f000 fb5b 	bl	8001eb0 <HAL_Delay>
  w25q_demo_test();
 80017fa:	f7ff fd35 	bl	8001268 <w25q_demo_test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017fe:	bf00      	nop
 8001800:	e7fd      	b.n	80017fe <main+0x22>
	...

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b094      	sub	sp, #80	@ 0x50
 8001808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	2238      	movs	r2, #56	@ 0x38
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f003 fed6 	bl	80055c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001826:	2301      	movs	r3, #1
 8001828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800182a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001834:	2301      	movs	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183c:	2302      	movs	r3, #2
 800183e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001846:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800184a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800184c:	2300      	movs	r3, #0
 800184e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4618      	mov	r0, r3
 8001856:	f000 fdcb 	bl	80023f0 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001860:	f000 f830 	bl	80018c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001868:	2302      	movs	r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2102      	movs	r1, #2
 800187e:	4618      	mov	r0, r3
 8001880:	f001 f8cc 	bl	8002a1c <HAL_RCC_ClockConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800188a:	f000 f81b 	bl	80018c4 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800188e:	4b03      	ldr	r3, [pc, #12]	@ (800189c <SystemClock_Config+0x98>)
 8001890:	2201      	movs	r2, #1
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	3750      	adds	r7, #80	@ 0x50
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	42420070 	.word	0x42420070

080018a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a04      	ldr	r2, [pc, #16]	@ (80018c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d101      	bne.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80018b2:	f000 fae1 	bl	8001e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40001400 	.word	0x40001400

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <Error_Handler+0x8>

080018d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018d4:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <MX_SPI1_Init+0x64>)
 80018d6:	4a18      	ldr	r2, [pc, #96]	@ (8001938 <MX_SPI1_Init+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018e2:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <MX_SPI1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_SPI1_Init+0x64>)
 80018fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_SPI1_Init+0x64>)
 8001904:	2208      	movs	r2, #8
 8001906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001908:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <MX_SPI1_Init+0x64>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <MX_SPI1_Init+0x64>)
 8001910:	2200      	movs	r2, #0
 8001912:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001914:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <MX_SPI1_Init+0x64>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <MX_SPI1_Init+0x64>)
 800191c:	220a      	movs	r2, #10
 800191e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001920:	4804      	ldr	r0, [pc, #16]	@ (8001934 <MX_SPI1_Init+0x64>)
 8001922:	f001 fad9 	bl	8002ed8 <HAL_SPI_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800192c:	f7ff ffca 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000230 	.word	0x20000230
 8001938:	40013000 	.word	0x40013000

0800193c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	@ 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <HAL_SPI_MspInit+0xa4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d13d      	bne.n	80019d8 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800195c:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <HAL_SPI_MspInit+0xa8>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	4a20      	ldr	r2, [pc, #128]	@ (80019e4 <HAL_SPI_MspInit+0xa8>)
 8001962:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001966:	6193      	str	r3, [r2, #24]
 8001968:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <HAL_SPI_MspInit+0xa8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_SPI_MspInit+0xa8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <HAL_SPI_MspInit+0xa8>)
 800197a:	f043 0308 	orr.w	r3, r3, #8
 800197e:	6193      	str	r3, [r2, #24]
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_SPI_MspInit+0xa8>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800198c:	2328      	movs	r3, #40	@ 0x28
 800198e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <HAL_SPI_MspInit+0xac>)
 80019a0:	f000 fb8a 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019a4:	2310      	movs	r3, #16
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	480c      	ldr	r0, [pc, #48]	@ (80019e8 <HAL_SPI_MspInit+0xac>)
 80019b8:	f000 fb7e 	bl	80020b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_SPI_MspInit+0xb0>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d2:	4a06      	ldr	r2, [pc, #24]	@ (80019ec <HAL_SPI_MspInit+0xb0>)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	@ 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40013000 	.word	0x40013000
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40010c00 	.word	0x40010c00
 80019ec:	40010000 	.word	0x40010000

080019f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_MspInit+0x5c>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <HAL_MspInit+0x5c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6193      	str	r3, [r2, #24]
 8001a02:	4b12      	ldr	r3, [pc, #72]	@ (8001a4c <HAL_MspInit+0x5c>)
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <HAL_MspInit+0x5c>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4a0e      	ldr	r2, [pc, #56]	@ (8001a4c <HAL_MspInit+0x5c>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a18:	61d3      	str	r3, [r2, #28]
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <HAL_MspInit+0x5c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_MspInit+0x60>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <HAL_MspInit+0x60>)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000

08001a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	@ 0x38
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001a6a:	4b34      	ldr	r3, [pc, #208]	@ (8001b3c <HAL_InitTick+0xe8>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a33      	ldr	r2, [pc, #204]	@ (8001b3c <HAL_InitTick+0xe8>)
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b31      	ldr	r3, [pc, #196]	@ (8001b3c <HAL_InitTick+0xe8>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0320 	and.w	r3, r3, #32
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a82:	f107 0210 	add.w	r2, r7, #16
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f001 f9d5 	bl	8002e3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a9c:	f001 f9a6 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8001aa0:	6378      	str	r0, [r7, #52]	@ 0x34
 8001aa2:	e004      	b.n	8001aae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001aa4:	f001 f9a2 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ab0:	4a23      	ldr	r2, [pc, #140]	@ (8001b40 <HAL_InitTick+0xec>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0c9b      	lsrs	r3, r3, #18
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001abc:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <HAL_InitTick+0xf0>)
 8001abe:	4a22      	ldr	r2, [pc, #136]	@ (8001b48 <HAL_InitTick+0xf4>)
 8001ac0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <HAL_InitTick+0xf0>)
 8001ac4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ac8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001aca:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <HAL_InitTick+0xf0>)
 8001acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ace:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <HAL_InitTick+0xf0>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <HAL_InitTick+0xf0>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_InitTick+0xf0>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001ae2:	4818      	ldr	r0, [pc, #96]	@ (8001b44 <HAL_InitTick+0xf0>)
 8001ae4:	f001 ff8d 	bl	8003a02 <HAL_TIM_Base_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001aee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d11b      	bne.n	8001b2e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001af6:	4813      	ldr	r0, [pc, #76]	@ (8001b44 <HAL_InitTick+0xf0>)
 8001af8:	f001 ffdc 	bl	8003ab4 <HAL_TIM_Base_Start_IT>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b02:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d111      	bne.n	8001b2e <HAL_InitTick+0xda>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001b0a:	2037      	movs	r0, #55	@ 0x37
 8001b0c:	f000 fac5 	bl	800209a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b0f      	cmp	r3, #15
 8001b14:	d808      	bhi.n	8001b28 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001b16:	2200      	movs	r2, #0
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	2037      	movs	r0, #55	@ 0x37
 8001b1c:	f000 faa1 	bl	8002062 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b20:	4a0a      	ldr	r2, [pc, #40]	@ (8001b4c <HAL_InitTick+0xf8>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	e002      	b.n	8001b2e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b2e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3738      	adds	r7, #56	@ 0x38
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	431bde83 	.word	0x431bde83
 8001b44:	20000288 	.word	0x20000288
 8001b48:	40001400 	.word	0x40001400
 8001b4c:	20000004 	.word	0x20000004

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <NMI_Handler+0x4>

08001b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <MemManage_Handler+0x4>

08001b68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <TIM7_IRQHandler+0x10>)
 8001bae:	f001 ffdb 	bl	8003b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000288 	.word	0x20000288

08001bbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr

08001bca <_kill>:

int _kill(int pid, int sig)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd4:	f003 fd48 	bl	8005668 <__errno>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2216      	movs	r2, #22
 8001bdc:	601a      	str	r2, [r3, #0]
  return -1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_exit>:

void _exit (int status)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ffe7 	bl	8001bca <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <_exit+0x12>

08001c00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	e00a      	b.n	8001c28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c12:	f3af 8000 	nop.w
 8001c16:	4601      	mov	r1, r0
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	b2ca      	uxtb	r2, r1
 8001c20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	3301      	adds	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	dbf0      	blt.n	8001c12 <_read+0x12>
  }

  return len;
 8001c30:	687b      	ldr	r3, [r7, #4]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c60:	605a      	str	r2, [r3, #4]
  return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <_isatty>:

int _isatty(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
	...

08001c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca4:	4a14      	ldr	r2, [pc, #80]	@ (8001cf8 <_sbrk+0x5c>)
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <_sbrk+0x60>)
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb0:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <_sbrk+0x64>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <_sbrk+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cbe:	4b10      	ldr	r3, [pc, #64]	@ (8001d00 <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d207      	bcs.n	8001cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ccc:	f003 fccc 	bl	8005668 <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	e009      	b.n	8001cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce2:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <_sbrk+0x64>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a05      	ldr	r2, [pc, #20]	@ (8001d00 <_sbrk+0x64>)
 8001cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20010000 	.word	0x20010000
 8001cfc:	00000400 	.word	0x00000400
 8001d00:	200002d0 	.word	0x200002d0
 8001d04:	20000470 	.word	0x20000470

08001d08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	@ (8001d64 <MX_USART1_UART_Init+0x50>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d38:	4b09      	ldr	r3, [pc, #36]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <MX_USART1_UART_Init+0x4c>)
 8001d4c:	f002 f8aa 	bl	8003ea4 <HAL_UART_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d56:	f7ff fdb5 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200002d4 	.word	0x200002d4
 8001d64:	40013800 	.word	0x40013800

08001d68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1c      	ldr	r2, [pc, #112]	@ (8001df4 <HAL_UART_MspInit+0x8c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d131      	bne.n	8001dec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_UART_MspInit+0x90>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8001df8 <HAL_UART_MspInit+0x90>)
 8001d8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_UART_MspInit+0x90>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_UART_MspInit+0x90>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a14      	ldr	r2, [pc, #80]	@ (8001df8 <HAL_UART_MspInit+0x90>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b12      	ldr	r3, [pc, #72]	@ (8001df8 <HAL_UART_MspInit+0x90>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001db8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480b      	ldr	r0, [pc, #44]	@ (8001dfc <HAL_UART_MspInit+0x94>)
 8001dce:	f000 f973 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	4619      	mov	r1, r3
 8001de6:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <HAL_UART_MspInit+0x94>)
 8001de8:	f000 f966 	bl	80020b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001dec:	bf00      	nop
 8001dee:	3720      	adds	r7, #32
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40010800 	.word	0x40010800

08001e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e00:	f7ff ff82 	bl	8001d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e04:	480b      	ldr	r0, [pc, #44]	@ (8001e34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e06:	490c      	ldr	r1, [pc, #48]	@ (8001e38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e08:	4a0c      	ldr	r2, [pc, #48]	@ (8001e3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e1c:	4c09      	ldr	r4, [pc, #36]	@ (8001e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f003 fc23 	bl	8005674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e2e:	f7ff fcd5 	bl	80017dc <main>
  bx lr
 8001e32:	4770      	bx	lr
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e3c:	08007ff4 	.word	0x08007ff4
  ldr r2, =_sbss
 8001e40:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e44:	2000046c 	.word	0x2000046c

08001e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_2_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <HAL_Init+0x28>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	@ (8001e74 <HAL_Init+0x28>)
 8001e56:	f043 0310 	orr.w	r3, r3, #16
 8001e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f8f5 	bl	800204c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	200f      	movs	r0, #15
 8001e64:	f7ff fdf6 	bl	8001a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fdc2 	bl	80019f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40022000 	.word	0x40022000

08001e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <HAL_IncTick+0x1c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	461a      	mov	r2, r3
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	4a03      	ldr	r2, [pc, #12]	@ (8001e98 <HAL_IncTick+0x20>)
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr
 8001e94:	20000008 	.word	0x20000008
 8001e98:	2000031c 	.word	0x2000031c

08001e9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea0:	4b02      	ldr	r3, [pc, #8]	@ (8001eac <HAL_GetTick+0x10>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	2000031c 	.word	0x2000031c

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff fff0 	bl	8001e9c <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_Delay+0x44>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffe0 	bl	8001e9c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f08:	4b0c      	ldr	r3, [pc, #48]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f14:	4013      	ands	r3, r2
 8001f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f2a:	4a04      	ldr	r2, [pc, #16]	@ (8001f3c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	60d3      	str	r3, [r2, #12]
}
 8001f30:	bf00      	nop
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <__NVIC_GetPriorityGrouping+0x18>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 0307 	and.w	r3, r3, #7
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db0b      	blt.n	8001f86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 021f 	and.w	r2, r3, #31
 8001f74:	4906      	ldr	r1, [pc, #24]	@ (8001f90 <__NVIC_EnableIRQ+0x34>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	095b      	lsrs	r3, r3, #5
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	@ (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	@ (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	@ 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ff4f 	bl	8001ef8 <__NVIC_SetPriorityGrouping>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002074:	f7ff ff64 	bl	8001f40 <__NVIC_GetPriorityGrouping>
 8002078:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	68b9      	ldr	r1, [r7, #8]
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ffb2 	bl	8001fe8 <NVIC_EncodePriority>
 8002084:	4602      	mov	r2, r0
 8002086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff81 	bl	8001f94 <__NVIC_SetPriority>
}
 8002092:	bf00      	nop
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b082      	sub	sp, #8
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff57 	bl	8001f5c <__NVIC_EnableIRQ>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	@ 0x2c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e169      	b.n	80023a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020cc:	2201      	movs	r2, #1
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8158 	bne.w	800239a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d05e      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 80020f4:	4a98      	ldr	r2, [pc, #608]	@ (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d875      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 80020fa:	4a98      	ldr	r2, [pc, #608]	@ (800235c <HAL_GPIO_Init+0x2a4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d058      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002100:	4a96      	ldr	r2, [pc, #600]	@ (800235c <HAL_GPIO_Init+0x2a4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d86f      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002106:	4a96      	ldr	r2, [pc, #600]	@ (8002360 <HAL_GPIO_Init+0x2a8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d052      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 800210c:	4a94      	ldr	r2, [pc, #592]	@ (8002360 <HAL_GPIO_Init+0x2a8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d869      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002112:	4a94      	ldr	r2, [pc, #592]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04c      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002118:	4a92      	ldr	r2, [pc, #584]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d863      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800211e:	4a92      	ldr	r2, [pc, #584]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d046      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002124:	4a90      	ldr	r2, [pc, #576]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d85d      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800212a:	2b12      	cmp	r3, #18
 800212c:	d82a      	bhi.n	8002184 <HAL_GPIO_Init+0xcc>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d859      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002132:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <HAL_GPIO_Init+0x80>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	080021b3 	.word	0x080021b3
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800219f 	.word	0x0800219f
 8002144:	080021e1 	.word	0x080021e1
 8002148:	080021e7 	.word	0x080021e7
 800214c:	080021e7 	.word	0x080021e7
 8002150:	080021e7 	.word	0x080021e7
 8002154:	080021e7 	.word	0x080021e7
 8002158:	080021e7 	.word	0x080021e7
 800215c:	080021e7 	.word	0x080021e7
 8002160:	080021e7 	.word	0x080021e7
 8002164:	080021e7 	.word	0x080021e7
 8002168:	080021e7 	.word	0x080021e7
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021e7 	.word	0x080021e7
 8002174:	080021e7 	.word	0x080021e7
 8002178:	080021e7 	.word	0x080021e7
 800217c:	08002195 	.word	0x08002195
 8002180:	080021a9 	.word	0x080021a9
 8002184:	4a79      	ldr	r2, [pc, #484]	@ (800236c <HAL_GPIO_Init+0x2b4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218a:	e02c      	b.n	80021e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e029      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e024      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	3308      	adds	r3, #8
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e01f      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	330c      	adds	r3, #12
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e01a      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ba:	2304      	movs	r3, #4
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e013      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c8:	2308      	movs	r3, #8
 80021ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	611a      	str	r2, [r3, #16]
          break;
 80021d2:	e009      	b.n	80021e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	615a      	str	r2, [r3, #20]
          break;
 80021de:	e003      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          break;
 80021e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	@ 0xff
 80021ec:	d801      	bhi.n	80021f2 <HAL_GPIO_Init+0x13a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_Init+0x13e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2bff      	cmp	r3, #255	@ 0xff
 80021fc:	d802      	bhi.n	8002204 <HAL_GPIO_Init+0x14c>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x152>
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	3b08      	subs	r3, #8
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	210f      	movs	r1, #15
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80b1 	beq.w	800239a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002238:	4b4d      	ldr	r3, [pc, #308]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a4c      	ldr	r2, [pc, #304]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002250:	4a48      	ldr	r2, [pc, #288]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a40      	ldr	r2, [pc, #256]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_GPIO_Init+0x1ec>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3f      	ldr	r2, [pc, #252]	@ (800237c <HAL_GPIO_Init+0x2c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00d      	beq.n	80022a0 <HAL_GPIO_Init+0x1e8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3e      	ldr	r2, [pc, #248]	@ (8002380 <HAL_GPIO_Init+0x2c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <HAL_GPIO_Init+0x1e4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3d      	ldr	r2, [pc, #244]	@ (8002384 <HAL_GPIO_Init+0x2cc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_GPIO_Init+0x1e0>
 8002294:	2303      	movs	r3, #3
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 8002298:	2304      	movs	r3, #4
 800229a:	e004      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 800229c:	2302      	movs	r3, #2
 800229e:	e002      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a4:	2300      	movs	r3, #0
 80022a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a8:	f002 0203 	and.w	r2, r2, #3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4093      	lsls	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022b6:	492f      	ldr	r1, [pc, #188]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	492c      	ldr	r1, [pc, #176]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022de:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4928      	ldr	r1, [pc, #160]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f8:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	4922      	ldr	r1, [pc, #136]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	43db      	mvns	r3, r3
 800230e:	491e      	ldr	r1, [pc, #120]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002310:	4013      	ands	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4918      	ldr	r1, [pc, #96]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4914      	ldr	r1, [pc, #80]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d021      	beq.n	800238c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	490e      	ldr	r1, [pc, #56]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
 8002354:	e021      	b.n	800239a <HAL_GPIO_Init+0x2e2>
 8002356:	bf00      	nop
 8002358:	10320000 	.word	0x10320000
 800235c:	10310000 	.word	0x10310000
 8002360:	10220000 	.word	0x10220000
 8002364:	10210000 	.word	0x10210000
 8002368:	10120000 	.word	0x10120000
 800236c:	10110000 	.word	0x10110000
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	40010800 	.word	0x40010800
 800237c:	40010c00 	.word	0x40010c00
 8002380:	40011000 	.word	0x40011000
 8002384:	40011400 	.word	0x40011400
 8002388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_GPIO_Init+0x304>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	43db      	mvns	r3, r3
 8002394:	4909      	ldr	r1, [pc, #36]	@ (80023bc <HAL_GPIO_Init+0x304>)
 8002396:	4013      	ands	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	3301      	adds	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f47f ae8e 	bne.w	80020cc <HAL_GPIO_Init+0x14>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	372c      	adds	r7, #44	@ 0x2c
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e304      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 8087 	beq.w	800251e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002410:	4b92      	ldr	r3, [pc, #584]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b04      	cmp	r3, #4
 800241a:	d00c      	beq.n	8002436 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800241c:	4b8f      	ldr	r3, [pc, #572]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b08      	cmp	r3, #8
 8002426:	d112      	bne.n	800244e <HAL_RCC_OscConfig+0x5e>
 8002428:	4b8c      	ldr	r3, [pc, #560]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002434:	d10b      	bne.n	800244e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002436:	4b89      	ldr	r3, [pc, #548]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d06c      	beq.n	800251c <HAL_RCC_OscConfig+0x12c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d168      	bne.n	800251c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e2de      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x76>
 8002458:	4b80      	ldr	r3, [pc, #512]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a7f      	ldr	r2, [pc, #508]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	e02e      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCC_OscConfig+0x98>
 800246e:	4b7b      	ldr	r3, [pc, #492]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7a      	ldr	r2, [pc, #488]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b78      	ldr	r3, [pc, #480]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a77      	ldr	r2, [pc, #476]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e01d      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0xbc>
 8002492:	4b72      	ldr	r3, [pc, #456]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a71      	ldr	r2, [pc, #452]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	4b6f      	ldr	r3, [pc, #444]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a6e      	ldr	r2, [pc, #440]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0xd4>
 80024ac:	4b6b      	ldr	r3, [pc, #428]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b6:	6013      	str	r3, [r2, #0]
 80024b8:	4b68      	ldr	r3, [pc, #416]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a67      	ldr	r2, [pc, #412]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d013      	beq.n	80024f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024cc:	f7ff fce6 	bl	8001e9c <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff fce2 	bl	8001e9c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e292      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b5d      	ldr	r3, [pc, #372]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe4>
 80024f2:	e014      	b.n	800251e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fcd2 	bl	8001e9c <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024fc:	f7ff fcce 	bl	8001e9c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	@ 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e27e      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	4b53      	ldr	r3, [pc, #332]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x10c>
 800251a:	e000      	b.n	800251e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800251c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d063      	beq.n	80025f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252a:	4b4c      	ldr	r3, [pc, #304]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00b      	beq.n	800254e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002536:	4b49      	ldr	r3, [pc, #292]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	d11c      	bne.n	800257c <HAL_RCC_OscConfig+0x18c>
 8002542:	4b46      	ldr	r3, [pc, #280]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d116      	bne.n	800257c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254e:	4b43      	ldr	r3, [pc, #268]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_RCC_OscConfig+0x176>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e252      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002566:	4b3d      	ldr	r3, [pc, #244]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4939      	ldr	r1, [pc, #228]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257a:	e03a      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002584:	4b36      	ldr	r3, [pc, #216]	@ (8002660 <HAL_RCC_OscConfig+0x270>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258a:	f7ff fc87 	bl	8001e9c <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002592:	f7ff fc83 	bl	8001e9c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e233      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b0:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4927      	ldr	r1, [pc, #156]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
 80025c4:	e015      	b.n	80025f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c6:	4b26      	ldr	r3, [pc, #152]	@ (8002660 <HAL_RCC_OscConfig+0x270>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025cc:	f7ff fc66 	bl	8001e9c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7ff fc62 	bl	8001e9c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e212      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d03a      	beq.n	8002674 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <HAL_RCC_OscConfig+0x274>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260c:	f7ff fc46 	bl	8001e9c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002614:	f7ff fc42 	bl	8001e9c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1f2      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	4b0d      	ldr	r3, [pc, #52]	@ (800265c <HAL_RCC_OscConfig+0x26c>)
 8002628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f000 fc32 	bl	8002e9c <RCC_Delay>
 8002638:	e01c      	b.n	8002674 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <HAL_RCC_OscConfig+0x274>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002640:	f7ff fc2c 	bl	8001e9c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002646:	e00f      	b.n	8002668 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002648:	f7ff fc28 	bl	8001e9c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d908      	bls.n	8002668 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1d8      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	42420000 	.word	0x42420000
 8002664:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b9b      	ldr	r3, [pc, #620]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800266a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e9      	bne.n	8002648 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a6 	beq.w	80027ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b94      	ldr	r3, [pc, #592]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b91      	ldr	r3, [pc, #580]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a90      	ldr	r2, [pc, #576]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]
 800269e:	4b8e      	ldr	r3, [pc, #568]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b8b      	ldr	r3, [pc, #556]	@ (80028dc <HAL_RCC_OscConfig+0x4ec>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4b88      	ldr	r3, [pc, #544]	@ (80028dc <HAL_RCC_OscConfig+0x4ec>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a87      	ldr	r2, [pc, #540]	@ (80028dc <HAL_RCC_OscConfig+0x4ec>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7ff fbe9 	bl	8001e9c <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7ff fbe5 	bl	8001e9c <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b64      	cmp	r3, #100	@ 0x64
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e195      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b7e      	ldr	r3, [pc, #504]	@ (80028dc <HAL_RCC_OscConfig+0x4ec>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x312>
 80026f4:	4b78      	ldr	r3, [pc, #480]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a77      	ldr	r2, [pc, #476]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	e02d      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x334>
 800270a:	4b73      	ldr	r3, [pc, #460]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	4a72      	ldr	r2, [pc, #456]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6213      	str	r3, [r2, #32]
 8002716:	4b70      	ldr	r3, [pc, #448]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a6f      	ldr	r2, [pc, #444]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	e01c      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b05      	cmp	r3, #5
 800272a:	d10c      	bne.n	8002746 <HAL_RCC_OscConfig+0x356>
 800272c:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a69      	ldr	r2, [pc, #420]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	6213      	str	r3, [r2, #32]
 8002738:	4b67      	ldr	r3, [pc, #412]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a66      	ldr	r2, [pc, #408]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	e00b      	b.n	800275e <HAL_RCC_OscConfig+0x36e>
 8002746:	4b64      	ldr	r3, [pc, #400]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4a63      	ldr	r2, [pc, #396]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6213      	str	r3, [r2, #32]
 8002752:	4b61      	ldr	r3, [pc, #388]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a60      	ldr	r2, [pc, #384]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002758:	f023 0304 	bic.w	r3, r3, #4
 800275c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d015      	beq.n	8002792 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7ff fb99 	bl	8001e9c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7ff fb95 	bl	8001e9c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e143      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002784:	4b54      	ldr	r3, [pc, #336]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ee      	beq.n	800276e <HAL_RCC_OscConfig+0x37e>
 8002790:	e014      	b.n	80027bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002792:	f7ff fb83 	bl	8001e9c <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279a:	f7ff fb7f 	bl	8001e9c <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e12d      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b0:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d105      	bne.n	80027ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c2:	4b45      	ldr	r3, [pc, #276]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	4a44      	ldr	r2, [pc, #272]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80027c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 808c 	beq.w	80028f0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80027d8:	4b3f      	ldr	r3, [pc, #252]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e4:	d10e      	bne.n	8002804 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80027e6:	4b3c      	ldr	r3, [pc, #240]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80027f2:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80027fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e103      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	2b02      	cmp	r3, #2
 800280a:	d14e      	bne.n	80028aa <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800280c:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002818:	4b2f      	ldr	r3, [pc, #188]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0ef      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800282c:	4b2c      	ldr	r3, [pc, #176]	@ (80028e0 <HAL_RCC_OscConfig+0x4f0>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7ff fb33 	bl	8001e9c <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800283a:	f7ff fb2f 	bl	8001e9c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b64      	cmp	r3, #100	@ 0x64
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0df      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 800284c:	4b22      	ldr	r3, [pc, #136]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f0      	bne.n	800283a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002858:	4b1f      	ldr	r3, [pc, #124]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002864:	491c      	ldr	r1, [pc, #112]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 800286a:	4b1b      	ldr	r3, [pc, #108]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4918      	ldr	r1, [pc, #96]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 8002878:	4313      	orrs	r3, r2
 800287a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 800287c:	4b18      	ldr	r3, [pc, #96]	@ (80028e0 <HAL_RCC_OscConfig+0x4f0>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7ff fb0b 	bl	8001e9c <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800288a:	f7ff fb07 	bl	8001e9c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	@ 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e0b7      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800289c:	4b0e      	ldr	r3, [pc, #56]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x49a>
 80028a8:	e022      	b.n	80028f0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80028aa:	4b0b      	ldr	r3, [pc, #44]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <HAL_RCC_OscConfig+0x4f0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7ff faee 	bl	8001e9c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80028c2:	e00f      	b.n	80028e4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80028c4:	f7ff faea 	bl	8001e9c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d908      	bls.n	80028e4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e09a      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80028e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e9      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 8088 	beq.w	8002a0a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028fa:	4b46      	ldr	r3, [pc, #280]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b08      	cmp	r3, #8
 8002904:	d068      	beq.n	80029d8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d14d      	bne.n	80029aa <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b42      	ldr	r3, [pc, #264]	@ (8002a18 <HAL_RCC_OscConfig+0x628>)
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7ff fac2 	bl	8001e9c <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff fabe 	bl	8001e9c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e06e      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292e:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f0      	bne.n	800291c <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002942:	d10f      	bne.n	8002964 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002944:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 8002946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	4931      	ldr	r1, [pc, #196]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 800294e:	4313      	orrs	r3, r2
 8002950:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002952:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 8002954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002956:	f023 020f 	bic.w	r2, r3, #15
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	492d      	ldr	r1, [pc, #180]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 8002960:	4313      	orrs	r3, r2
 8002962:	62cb      	str	r3, [r1, #44]	@ 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002964:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	430b      	orrs	r3, r1
 8002976:	4927      	ldr	r1, [pc, #156]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800297c:	4b26      	ldr	r3, [pc, #152]	@ (8002a18 <HAL_RCC_OscConfig+0x628>)
 800297e:	2201      	movs	r2, #1
 8002980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7ff fa8b 	bl	8001e9c <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800298a:	f7ff fa87 	bl	8001e9c <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e037      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800299c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x59a>
 80029a8:	e02f      	b.n	8002a0a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a18 <HAL_RCC_OscConfig+0x628>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff fa74 	bl	8001e9c <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b8:	f7ff fa70 	bl	8001e9c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e020      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ca:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x5c8>
 80029d6:	e018      	b.n	8002a0a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e013      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_RCC_OscConfig+0x624>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	42420060 	.word	0x42420060

08002a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0d0      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a30:	4b6a      	ldr	r3, [pc, #424]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d910      	bls.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	4b67      	ldr	r3, [pc, #412]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0207 	bic.w	r2, r3, #7
 8002a46:	4965      	ldr	r1, [pc, #404]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b63      	ldr	r3, [pc, #396]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b8      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d020      	beq.n	8002aae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a78:	4b59      	ldr	r3, [pc, #356]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a58      	ldr	r2, [pc, #352]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d005      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a90:	4b53      	ldr	r3, [pc, #332]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	4a52      	ldr	r2, [pc, #328]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a9c:	4b50      	ldr	r3, [pc, #320]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	494d      	ldr	r1, [pc, #308]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d040      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d115      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e07f      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ada:	4b41      	ldr	r3, [pc, #260]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e073      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	4b3d      	ldr	r3, [pc, #244]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e06b      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afa:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f023 0203 	bic.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4936      	ldr	r1, [pc, #216]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b0c:	f7ff f9c6 	bl	8001e9c <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b12:	e00a      	b.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b14:	f7ff f9c2 	bl	8001e9c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e053      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 020c 	and.w	r2, r3, #12
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d1eb      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3c:	4b27      	ldr	r3, [pc, #156]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d210      	bcs.n	8002b6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4a:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 0207 	bic.w	r2, r3, #7
 8002b52:	4922      	ldr	r1, [pc, #136]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_RCC_ClockConfig+0x1c0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e032      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4916      	ldr	r1, [pc, #88]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b96:	4b12      	ldr	r3, [pc, #72]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	490e      	ldr	r1, [pc, #56]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002baa:	f000 f821 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	490a      	ldr	r1, [pc, #40]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	5ccb      	ldrb	r3, [r1, r3]
 8002bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc2:	4a09      	ldr	r2, [pc, #36]	@ (8002be8 <HAL_RCC_ClockConfig+0x1cc>)
 8002bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_RCC_ClockConfig+0x1d0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fe ff42 	bl	8001a54 <HAL_InitTick>

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40021000 	.word	0x40021000
 8002be4:	08007c38 	.word	0x08007c38
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000004 	.word	0x20000004

08002bf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b092      	sub	sp, #72	@ 0x48
 8002bf6:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c00:	2300      	movs	r3, #0
 8002c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c04:	2300      	movs	r3, #0
 8002c06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t sysclockfreq = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	643b      	str	r3, [r7, #64]	@ 0x40
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c10:	2300      	movs	r3, #0
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c14:	4b6b      	ldr	r3, [pc, #428]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d002      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	d003      	beq.n	8002c30 <HAL_RCC_GetSysClockFreq+0x40>
 8002c28:	e0c3      	b.n	8002db2 <HAL_RCC_GetSysClockFreq+0x1c2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2a:	4b67      	ldr	r3, [pc, #412]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002c2c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002c2e:	e0c3      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c32:	0c9b      	lsrs	r3, r3, #18
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4b64      	ldr	r3, [pc, #400]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002c3a:	5c9b      	ldrb	r3, [r3, r2]
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80ac 	beq.w	8002da2 <HAL_RCC_GetSysClockFreq+0x1b2>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002c4a:	4b5e      	ldr	r3, [pc, #376]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	f003 020f 	and.w	r2, r3, #15
 8002c52:	4b5f      	ldr	r3, [pc, #380]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x1e0>)
 8002c54:	5c9b      	ldrb	r3, [r3, r2]
 8002c56:	63bb      	str	r3, [r7, #56]	@ 0x38
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002c58:	4b5a      	ldr	r3, [pc, #360]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 808c 	beq.w	8002d7e <HAL_RCC_GetSysClockFreq+0x18e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002c66:	4b57      	ldr	r3, [pc, #348]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 030f 	and.w	r3, r3, #15
 8002c70:	3301      	adds	r3, #1
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002c74:	4b53      	ldr	r3, [pc, #332]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	0a1b      	lsrs	r3, r3, #8
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	3302      	adds	r3, #2
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c84:	2200      	movs	r2, #0
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	4611      	mov	r1, r2
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	fb00 f203 	mul.w	r2, r0, r3
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	fb03 f301 	mul.w	r3, r3, r1
 8002c9e:	4413      	add	r3, r2
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	fba2 4500 	umull	r4, r5, r2, r0
 8002ca6:	442b      	add	r3, r5
 8002ca8:	461d      	mov	r5, r3
 8002caa:	4622      	mov	r2, r4
 8002cac:	462b      	mov	r3, r5
 8002cae:	f04f 0000 	mov.w	r0, #0
 8002cb2:	f04f 0100 	mov.w	r1, #0
 8002cb6:	0159      	lsls	r1, r3, #5
 8002cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cbc:	0150      	lsls	r0, r2, #5
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	ebb2 0a04 	subs.w	sl, r2, r4
 8002cc6:	eb63 0b05 	sbc.w	fp, r3, r5
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cd6:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cda:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cde:	ebb2 080a 	subs.w	r8, r2, sl
 8002ce2:	eb63 090b 	sbc.w	r9, r3, fp
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cfa:	4690      	mov	r8, r2
 8002cfc:	4699      	mov	r9, r3
 8002cfe:	eb18 0304 	adds.w	r3, r8, r4
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	eb49 0305 	adc.w	r3, r9, r5
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d16:	4629      	mov	r1, r5
 8002d18:	024b      	lsls	r3, r1, #9
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	4604      	mov	r4, r0
 8002d20:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002d24:	4601      	mov	r1, r0
 8002d26:	024a      	lsls	r2, r1, #9
 8002d28:	4610      	mov	r0, r2
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2e:	2200      	movs	r2, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	617a      	str	r2, [r7, #20]
 8002d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d36:	2200      	movs	r2, #0
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	60fa      	str	r2, [r7, #12]
 8002d3c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002d40:	4622      	mov	r2, r4
 8002d42:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002d46:	4645      	mov	r5, r8
 8002d48:	fb05 f202 	mul.w	r2, r5, r2
 8002d4c:	46cc      	mov	ip, r9
 8002d4e:	4625      	mov	r5, r4
 8002d50:	461c      	mov	r4, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	fb03 f30c 	mul.w	r3, r3, ip
 8002d58:	4413      	add	r3, r2
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	4644      	mov	r4, r8
 8002d5e:	fba2 2404 	umull	r2, r4, r2, r4
 8002d62:	61fc      	str	r4, [r7, #28]
 8002d64:	61ba      	str	r2, [r7, #24]
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d70:	f7fd fef6 	bl	8000b60 <__aeabi_uldivmod>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4613      	mov	r3, r2
 8002d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7c:	e007      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x19e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d80:	4a11      	ldr	r2, [pc, #68]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002d82:	fb03 f202 	mul.w	r2, r3, r2
 8002d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002d90:	7b5b      	ldrb	r3, [r3, #13]
 8002d92:	461a      	mov	r2, r3
 8002d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_GetSysClockFreq+0x1bc>
        {
          pllclk = pllclk / 2;
 8002d9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d9c:	085b      	lsrs	r3, r3, #1
 8002d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002da0:	e004      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x1bc>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da4:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x1e4>)
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllclk;
 8002dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dae:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002db0:	e002      	b.n	8002db8 <HAL_RCC_GetSysClockFreq+0x1c8>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002db2:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002db4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002db6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3748      	adds	r7, #72	@ 0x48
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	007a1200 	.word	0x007a1200
 8002dcc:	08007c50 	.word	0x08007c50
 8002dd0:	08007c60 	.word	0x08007c60
 8002dd4:	003d0900 	.word	0x003d0900

08002dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ddc:	4b02      	ldr	r3, [pc, #8]	@ (8002de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	20000000 	.word	0x20000000

08002dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002df0:	f7ff fff2 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002df4:	4602      	mov	r2, r0
 8002df6:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	4903      	ldr	r1, [pc, #12]	@ (8002e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e02:	5ccb      	ldrb	r3, [r1, r3]
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08007c48 	.word	0x08007c48

08002e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e18:	f7ff ffde 	bl	8002dd8 <HAL_RCC_GetHCLKFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	0adb      	lsrs	r3, r3, #11
 8002e24:	f003 0307 	and.w	r3, r3, #7
 8002e28:	4903      	ldr	r1, [pc, #12]	@ (8002e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2a:	5ccb      	ldrb	r3, [r1, r3]
 8002e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	08007c48 	.word	0x08007c48

08002e3c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	220f      	movs	r2, #15
 8002e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e4c:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <HAL_RCC_GetClockConfig+0x58>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0203 	and.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e58:	4b0e      	ldr	r3, [pc, #56]	@ (8002e94 <HAL_RCC_GetClockConfig+0x58>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_GetClockConfig+0x58>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002e70:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_RCC_GetClockConfig+0x58>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	08db      	lsrs	r3, r3, #3
 8002e76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_GetClockConfig+0x5c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0207 	and.w	r2, r3, #7
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr
 8002e94:	40021000 	.word	0x40021000
 8002e98:	40022000 	.word	0x40022000

08002e9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <RCC_Delay+0x34>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <RCC_Delay+0x38>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	0a5b      	lsrs	r3, r3, #9
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eb8:	bf00      	nop
  }
  while (Delay --);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	60fa      	str	r2, [r7, #12]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1f9      	bne.n	8002eb8 <RCC_Delay+0x1c>
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr
 8002ed0:	20000000 	.word	0x20000000
 8002ed4:	10624dd3 	.word	0x10624dd3

08002ed8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e076      	b.n	8002fd8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d108      	bne.n	8002f04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002efa:	d009      	beq.n	8002f10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	61da      	str	r2, [r3, #28]
 8002f02:	e005      	b.n	8002f10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d106      	bne.n	8002f30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe fd06 	bl	800193c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f94:	ea42 0103 	orr.w	r1, r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	0c1a      	lsrs	r2, r3, #16
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f002 0204 	and.w	r2, r2, #4
 8002fb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ff0:	f7fe ff54 	bl	8001e9c <HAL_GetTick>
 8002ff4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
 8003008:	e12a      	b.n	8003260 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_SPI_Transmit+0x36>
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e122      	b.n	8003260 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_SPI_Transmit+0x48>
 8003024:	2302      	movs	r3, #2
 8003026:	e11b      	b.n	8003260 <HAL_SPI_Transmit+0x280>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2203      	movs	r2, #3
 8003034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	88fa      	ldrh	r2, [r7, #6]
 800304e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003076:	d10f      	bne.n	8003098 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003096:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a2:	2b40      	cmp	r3, #64	@ 0x40
 80030a4:	d007      	beq.n	80030b6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030be:	d152      	bne.n	8003166 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <HAL_SPI_Transmit+0xee>
 80030c8:	8b7b      	ldrh	r3, [r7, #26]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d145      	bne.n	800315a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	881a      	ldrh	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	1c9a      	adds	r2, r3, #2
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030f2:	e032      	b.n	800315a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d112      	bne.n	8003128 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003106:	881a      	ldrh	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	1c9a      	adds	r2, r3, #2
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003126:	e018      	b.n	800315a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003128:	f7fe feb8 	bl	8001e9c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d803      	bhi.n	8003140 <HAL_SPI_Transmit+0x160>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d102      	bne.n	8003146 <HAL_SPI_Transmit+0x166>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e082      	b.n	8003260 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1c7      	bne.n	80030f4 <HAL_SPI_Transmit+0x114>
 8003164:	e053      	b.n	800320e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_SPI_Transmit+0x194>
 800316e:	8b7b      	ldrh	r3, [r7, #26]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d147      	bne.n	8003204 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	7812      	ldrb	r2, [r2, #0]
 8003180:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800319a:	e033      	b.n	8003204 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d113      	bne.n	80031d2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031d0:	e018      	b.n	8003204 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031d2:	f7fe fe63 	bl	8001e9c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d803      	bhi.n	80031ea <HAL_SPI_Transmit+0x20a>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d102      	bne.n	80031f0 <HAL_SPI_Transmit+0x210>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e02d      	b.n	8003260 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1c6      	bne.n	800319c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	6839      	ldr	r1, [r7, #0]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fbc4 	bl	80039a0 <SPI_EndRxTxTransaction>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800325e:	2300      	movs	r3, #0
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d001      	beq.n	8003288 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
 8003286:	e104      	b.n	8003492 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003290:	d112      	bne.n	80032b8 <HAL_SPI_Receive+0x50>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10e      	bne.n	80032b8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2204      	movs	r2, #4
 800329e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032a2:	88fa      	ldrh	r2, [r7, #6]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f8f3 	bl	800349a <HAL_SPI_TransmitReceive>
 80032b4:	4603      	mov	r3, r0
 80032b6:	e0ec      	b.n	8003492 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032b8:	f7fe fdf0 	bl	8001e9c <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d002      	beq.n	80032ca <HAL_SPI_Receive+0x62>
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0e1      	b.n	8003492 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d101      	bne.n	80032dc <HAL_SPI_Receive+0x74>
 80032d8:	2302      	movs	r3, #2
 80032da:	e0da      	b.n	8003492 <HAL_SPI_Receive+0x22a>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2204      	movs	r2, #4
 80032e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	88fa      	ldrh	r2, [r7, #6]
 80032fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	88fa      	ldrh	r2, [r7, #6]
 8003302:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800332a:	d10f      	bne.n	800334c <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800333a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800334a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	d007      	beq.n	800336a <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d170      	bne.n	8003454 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003372:	e035      	b.n	80033e0 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d115      	bne.n	80033ae <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f103 020c 	add.w	r2, r3, #12
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338e:	7812      	ldrb	r2, [r2, #0]
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033ac:	e018      	b.n	80033e0 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033ae:	f7fe fd75 	bl	8001e9c <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d803      	bhi.n	80033c6 <HAL_SPI_Receive+0x15e>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d102      	bne.n	80033cc <HAL_SPI_Receive+0x164>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d109      	bne.n	80033e0 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e058      	b.n	8003492 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1c4      	bne.n	8003374 <HAL_SPI_Receive+0x10c>
 80033ea:	e038      	b.n	800345e <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d113      	bne.n	8003422 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003404:	b292      	uxth	r2, r2
 8003406:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	1c9a      	adds	r2, r3, #2
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003420:	e018      	b.n	8003454 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003422:	f7fe fd3b 	bl	8001e9c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d803      	bhi.n	800343a <HAL_SPI_Receive+0x1d2>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003438:	d102      	bne.n	8003440 <HAL_SPI_Receive+0x1d8>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d109      	bne.n	8003454 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e01e      	b.n	8003492 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1c6      	bne.n	80033ec <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fa4a 	bl	80038fc <SPI_EndRxTransaction>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003490:	2300      	movs	r3, #0
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08a      	sub	sp, #40	@ 0x28
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	607a      	str	r2, [r7, #4]
 80034a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034a8:	2301      	movs	r3, #1
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034ac:	f7fe fcf6 	bl	8001e9c <HAL_GetTick>
 80034b0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034b8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80034c0:	887b      	ldrh	r3, [r7, #2]
 80034c2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034c4:	7ffb      	ldrb	r3, [r7, #31]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d00c      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x4a>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034d0:	d106      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x46>
 80034da:	7ffb      	ldrb	r3, [r7, #31]
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d001      	beq.n	80034e4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
 80034e2:	e17f      	b.n	80037e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d005      	beq.n	80034f6 <HAL_SPI_TransmitReceive+0x5c>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_SPI_TransmitReceive+0x5c>
 80034f0:	887b      	ldrh	r3, [r7, #2]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e174      	b.n	80037e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_SPI_TransmitReceive+0x6e>
 8003504:	2302      	movs	r3, #2
 8003506:	e16d      	b.n	80037e4 <HAL_SPI_TransmitReceive+0x34a>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b04      	cmp	r3, #4
 800351a:	d003      	beq.n	8003524 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2205      	movs	r2, #5
 8003520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	887a      	ldrh	r2, [r7, #2]
 800353a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	887a      	ldrh	r2, [r7, #2]
 8003546:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d007      	beq.n	8003578 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003580:	d17e      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_SPI_TransmitReceive+0xf6>
 800358a:	8afb      	ldrh	r3, [r7, #22]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d16c      	bne.n	800366a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a0:	1c9a      	adds	r2, r3, #2
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b4:	e059      	b.n	800366a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d11b      	bne.n	80035fc <HAL_SPI_TransmitReceive+0x162>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d016      	beq.n	80035fc <HAL_SPI_TransmitReceive+0x162>
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d113      	bne.n	80035fc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d8:	881a      	ldrh	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b01      	cmp	r3, #1
 8003608:	d119      	bne.n	800363e <HAL_SPI_TransmitReceive+0x1a4>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360e:	b29b      	uxth	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d014      	beq.n	800363e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361e:	b292      	uxth	r2, r2
 8003620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800363a:	2301      	movs	r3, #1
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800363e:	f7fe fc2d 	bl	8001e9c <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800364a:	429a      	cmp	r2, r3
 800364c:	d80d      	bhi.n	800366a <HAL_SPI_TransmitReceive+0x1d0>
 800364e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d009      	beq.n	800366a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e0bc      	b.n	80037e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1a0      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x11c>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d19b      	bne.n	80035b6 <HAL_SPI_TransmitReceive+0x11c>
 800367e:	e082      	b.n	8003786 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_SPI_TransmitReceive+0x1f4>
 8003688:	8afb      	ldrh	r3, [r7, #22]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d171      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b4:	e05d      	b.n	8003772 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d11c      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x264>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d017      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x264>
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d114      	bne.n	80036fe <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	330c      	adds	r3, #12
 80036de:	7812      	ldrb	r2, [r2, #0]
 80036e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b01      	cmp	r3, #1
 800370a:	d119      	bne.n	8003740 <HAL_SPI_TransmitReceive+0x2a6>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d014      	beq.n	8003740 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003720:	b2d2      	uxtb	r2, r2
 8003722:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800373c:	2301      	movs	r3, #1
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003740:	f7fe fbac 	bl	8001e9c <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800374c:	429a      	cmp	r2, r3
 800374e:	d803      	bhi.n	8003758 <HAL_SPI_TransmitReceive+0x2be>
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003756:	d102      	bne.n	800375e <HAL_SPI_TransmitReceive+0x2c4>
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e038      	b.n	80037e4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d19c      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x21c>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d197      	bne.n	80036b6 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003786:	6a3a      	ldr	r2, [r7, #32]
 8003788:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	f000 f908 	bl	80039a0 <SPI_EndRxTxTransaction>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e01d      	b.n	80037e4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80037e2:	2300      	movs	r3, #0
  }
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3728      	adds	r7, #40	@ 0x28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037fc:	f7fe fb4e 	bl	8001e9c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	4413      	add	r3, r2
 800380a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800380c:	f7fe fb46 	bl	8001e9c <HAL_GetTick>
 8003810:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003812:	4b39      	ldr	r3, [pc, #228]	@ (80038f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	015b      	lsls	r3, r3, #5
 8003818:	0d1b      	lsrs	r3, r3, #20
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	fb02 f303 	mul.w	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003822:	e054      	b.n	80038ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d050      	beq.n	80038ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800382c:	f7fe fb36 	bl	8001e9c <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	429a      	cmp	r2, r3
 800383a:	d902      	bls.n	8003842 <SPI_WaitFlagStateUntilTimeout+0x56>
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d13d      	bne.n	80038be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800385a:	d111      	bne.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x94>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003864:	d004      	beq.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386e:	d107      	bne.n	8003880 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003888:	d10f      	bne.n	80038aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e017      	b.n	80038ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d19b      	bne.n	8003824 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000000 	.word	0x20000000

080038fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003910:	d111      	bne.n	8003936 <SPI_EndRxTransaction+0x3a>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800391a:	d004      	beq.n	8003926 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003924:	d107      	bne.n	8003936 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003934:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800393e:	d117      	bne.n	8003970 <SPI_EndRxTransaction+0x74>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003948:	d112      	bne.n	8003970 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2200      	movs	r2, #0
 8003952:	2101      	movs	r1, #1
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f7ff ff49 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01a      	beq.n	8003996 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e013      	b.n	8003998 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2200      	movs	r2, #0
 8003978:	2180      	movs	r1, #128	@ 0x80
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7ff ff36 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e000      	b.n	8003998 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2201      	movs	r2, #1
 80039b4:	2102      	movs	r1, #2
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7ff ff18 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d007      	beq.n	80039d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039c6:	f043 0220 	orr.w	r2, r3, #32
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e013      	b.n	80039fa <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff ff05 	bl	80037ec <SPI_WaitFlagStateUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e000      	b.n	80039fa <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e041      	b.n	8003a98 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d106      	bne.n	8003a2e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f839 	bl	8003aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4610      	mov	r0, r2
 8003a42:	f000 f9a5 	bl	8003d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bc80      	pop	{r7}
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d001      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e03f      	b.n	8003b4c <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b58 <HAL_TIM_Base_Start_IT+0xa4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_TIM_Base_Start_IT+0x62>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af6:	d00e      	beq.n	8003b16 <HAL_TIM_Base_Start_IT+0x62>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a17      	ldr	r2, [pc, #92]	@ (8003b5c <HAL_TIM_Base_Start_IT+0xa8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d009      	beq.n	8003b16 <HAL_TIM_Base_Start_IT+0x62>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a16      	ldr	r2, [pc, #88]	@ (8003b60 <HAL_TIM_Base_Start_IT+0xac>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d004      	beq.n	8003b16 <HAL_TIM_Base_Start_IT+0x62>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a14      	ldr	r2, [pc, #80]	@ (8003b64 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d111      	bne.n	8003b3a <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b06      	cmp	r3, #6
 8003b26:	d010      	beq.n	8003b4a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b38:	e007      	b.n	8003b4a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00

08003b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d020      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01b      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f06f 0202 	mvn.w	r2, #2
 8003b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8d1 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 8003bb8:	e005      	b.n	8003bc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f8c4 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f8d3 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d020      	beq.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01b      	beq.n	8003c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0204 	mvn.w	r2, #4
 8003be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2202      	movs	r2, #2
 8003bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8ab 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 8003c04:	e005      	b.n	8003c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f89e 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f8ad 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d020      	beq.n	8003c64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01b      	beq.n	8003c64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f06f 0208 	mvn.w	r2, #8
 8003c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f885 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 8003c50:	e005      	b.n	8003c5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f878 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f887 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d020      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01b      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0210 	mvn.w	r2, #16
 8003c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2208      	movs	r2, #8
 8003c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f85f 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 8003c9c:	e005      	b.n	8003caa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f852 	bl	8003d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f861 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0201 	mvn.w	r2, #1
 8003ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd fde6 	bl	80018a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d007      	beq.n	8003cf8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f8cd 	bl	8003e92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f831 	bl	8003d7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d007      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f06f 0220 	mvn.w	r2, #32
 8003d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f8a0 	bl	8003e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a33      	ldr	r2, [pc, #204]	@ (8003e70 <TIM_Base_SetConfig+0xe0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00f      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dae:	d00b      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a30      	ldr	r2, [pc, #192]	@ (8003e74 <TIM_Base_SetConfig+0xe4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d007      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a2f      	ldr	r2, [pc, #188]	@ (8003e78 <TIM_Base_SetConfig+0xe8>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_Base_SetConfig+0x38>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a2e      	ldr	r2, [pc, #184]	@ (8003e7c <TIM_Base_SetConfig+0xec>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d108      	bne.n	8003dda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a24      	ldr	r2, [pc, #144]	@ (8003e70 <TIM_Base_SetConfig+0xe0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00f      	beq.n	8003e02 <TIM_Base_SetConfig+0x72>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de8:	d00b      	beq.n	8003e02 <TIM_Base_SetConfig+0x72>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a21      	ldr	r2, [pc, #132]	@ (8003e74 <TIM_Base_SetConfig+0xe4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d007      	beq.n	8003e02 <TIM_Base_SetConfig+0x72>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a20      	ldr	r2, [pc, #128]	@ (8003e78 <TIM_Base_SetConfig+0xe8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <TIM_Base_SetConfig+0x72>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e7c <TIM_Base_SetConfig+0xec>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d108      	bne.n	8003e14 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e70 <TIM_Base_SetConfig+0xe0>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d103      	bne.n	8003e48 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f023 0201 	bic.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	611a      	str	r2, [r3, #16]
  }
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00

08003e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e042      	b.n	8003f3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d106      	bne.n	8003ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd ff4c 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2224      	movs	r2, #36	@ 0x24
 8003ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f000 f971 	bl	80041d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	@ 0x28
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	4613      	mov	r3, r2
 8003f52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b20      	cmp	r3, #32
 8003f62:	d175      	bne.n	8004050 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_UART_Transmit+0x2c>
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e06e      	b.n	8004052 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2221      	movs	r2, #33	@ 0x21
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f82:	f7fd ff8b 	bl	8001e9c <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	88fa      	ldrh	r2, [r7, #6]
 8003f8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f9c:	d108      	bne.n	8003fb0 <HAL_UART_Transmit+0x6c>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d104      	bne.n	8003fb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e003      	b.n	8003fb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fb8:	e02e      	b.n	8004018 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2180      	movs	r1, #128	@ 0x80
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 f848 	bl	800405a <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e03a      	b.n	8004052 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e007      	b.n	800400a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	781a      	ldrb	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800400e:	b29b      	uxth	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800401c:	b29b      	uxth	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1cb      	bne.n	8003fba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	2140      	movs	r1, #64	@ 0x40
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f814 	bl	800405a <UART_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e006      	b.n	8004052 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3720      	adds	r7, #32
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406a:	e03b      	b.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004072:	d037      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004074:	f7fd ff12 	bl	8001e9c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	6a3a      	ldr	r2, [r7, #32]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <UART_WaitOnFlagUntilTimeout+0x30>
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e03a      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d023      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b80      	cmp	r3, #128	@ 0x80
 80040a0:	d020      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b40      	cmp	r3, #64	@ 0x40
 80040a6:	d01d      	beq.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d116      	bne.n	80040e4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f81d 	bl	800410c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2208      	movs	r2, #8
 80040d6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e00f      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	4013      	ands	r3, r2
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	bf0c      	ite	eq
 80040f4:	2301      	moveq	r3, #1
 80040f6:	2300      	movne	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d0b4      	beq.n	800406c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b095      	sub	sp, #84	@ 0x54
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004126:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800412a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	330c      	adds	r3, #12
 8004132:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004134:	643a      	str	r2, [r7, #64]	@ 0x40
 8004136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800413a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3314      	adds	r3, #20
 800414e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	e853 3f00 	ldrex	r3, [r3]
 8004156:	61fb      	str	r3, [r7, #28]
   return(result);
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3314      	adds	r3, #20
 8004166:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004168:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800416a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800416e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e5      	bne.n	8004148 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	2b01      	cmp	r3, #1
 8004182:	d119      	bne.n	80041b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	330c      	adds	r3, #12
 800418a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	60bb      	str	r3, [r7, #8]
   return(result);
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f023 0310 	bic.w	r3, r3, #16
 800419a:	647b      	str	r3, [r7, #68]	@ 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041a4:	61ba      	str	r2, [r7, #24]
 80041a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6979      	ldr	r1, [r7, #20]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	613b      	str	r3, [r7, #16]
   return(result);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e5      	bne.n	8004184 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2220      	movs	r2, #32
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041c6:	bf00      	nop
 80041c8:	3754      	adds	r7, #84	@ 0x54
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800420a:	f023 030c 	bic.w	r3, r3, #12
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6812      	ldr	r2, [r2, #0]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	430b      	orrs	r3, r1
 8004216:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699a      	ldr	r2, [r3, #24]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a2c      	ldr	r2, [pc, #176]	@ (80042e4 <UART_SetConfig+0x114>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d103      	bne.n	8004240 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004238:	f7fe fdec 	bl	8002e14 <HAL_RCC_GetPCLK2Freq>
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	e002      	b.n	8004246 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004240:	f7fe fdd4 	bl	8002dec <HAL_RCC_GetPCLK1Freq>
 8004244:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009a      	lsls	r2, r3, #2
 8004250:	441a      	add	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	4a22      	ldr	r2, [pc, #136]	@ (80042e8 <UART_SetConfig+0x118>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	0119      	lsls	r1, r3, #4
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009a      	lsls	r2, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	fbb2 f2f3 	udiv	r2, r2, r3
 800427c:	4b1a      	ldr	r3, [pc, #104]	@ (80042e8 <UART_SetConfig+0x118>)
 800427e:	fba3 0302 	umull	r0, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	2064      	movs	r0, #100	@ 0x64
 8004286:	fb00 f303 	mul.w	r3, r0, r3
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	3332      	adds	r3, #50	@ 0x32
 8004290:	4a15      	ldr	r2, [pc, #84]	@ (80042e8 <UART_SetConfig+0x118>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	095b      	lsrs	r3, r3, #5
 8004298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800429c:	4419      	add	r1, r3
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042b4:	4b0c      	ldr	r3, [pc, #48]	@ (80042e8 <UART_SetConfig+0x118>)
 80042b6:	fba3 0302 	umull	r0, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2064      	movs	r0, #100	@ 0x64
 80042be:	fb00 f303 	mul.w	r3, r0, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	3332      	adds	r3, #50	@ 0x32
 80042c8:	4a07      	ldr	r2, [pc, #28]	@ (80042e8 <UART_SetConfig+0x118>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	440a      	add	r2, r1
 80042da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042dc:	bf00      	nop
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40013800 	.word	0x40013800
 80042e8:	51eb851f 	.word	0x51eb851f

080042ec <prv_wait_ready>:
 * \brief           Wait until device is ready (not busy)
 * \param[in]       dev: W25Q device handle
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
static w25q_result_t
prv_wait_ready(w25q_t* dev) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint32_t timeout;

    timeout = W25Q_TIMEOUT_MS;
 80042f4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80042f8:	60fb      	str	r3, [r7, #12]
    do {
        dev->ll.select();
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	4798      	blx	r3
        dev->ll.transmit((const uint8_t[]){W25Q_CMD_READ_STATUS_REG1}, 1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	2205      	movs	r2, #5
 8004306:	723a      	strb	r2, [r7, #8]
 8004308:	f107 0208 	add.w	r2, r7, #8
 800430c:	2101      	movs	r1, #1
 800430e:	4610      	mov	r0, r2
 8004310:	4798      	blx	r3
        dev->ll.receive(&status, 1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	f107 020b 	add.w	r2, r7, #11
 800431a:	2101      	movs	r1, #1
 800431c:	4610      	mov	r0, r2
 800431e:	4798      	blx	r3
        dev->ll.deselect();
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004324:	4798      	blx	r3

        if ((status & W25Q_STATUS_BUSY) == 0) {
 8004326:	7afb      	ldrb	r3, [r7, #11]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <prv_wait_ready+0x48>
            return W25Q_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	e00a      	b.n	800434a <prv_wait_ready+0x5e>
        }

        dev->ll.delay_ms(1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	2001      	movs	r0, #1
 800433a:	4798      	blx	r3
        timeout--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3b01      	subs	r3, #1
 8004340:	60fb      	str	r3, [r7, #12]
    } while (timeout > 0);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1d8      	bne.n	80042fa <prv_wait_ready+0xe>

    return W25Q_ERR_TIMEOUT;
 8004348:	2302      	movs	r3, #2
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <prv_write_enable>:
 * \brief           Enable write operations
 * \param[in]       dev: W25Q device handle
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
static w25q_result_t
prv_write_enable(w25q_t* dev) {
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
    uint8_t status;

    dev->ll.select();
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	4798      	blx	r3
    dev->ll.transmit((const uint8_t[]){W25Q_CMD_WRITE_ENABLE}, 1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	2206      	movs	r2, #6
 8004366:	733a      	strb	r2, [r7, #12]
 8004368:	f107 020c 	add.w	r2, r7, #12
 800436c:	2101      	movs	r1, #1
 800436e:	4610      	mov	r0, r2
 8004370:	4798      	blx	r3
    dev->ll.deselect();
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004376:	4798      	blx	r3

    /* Verify WEL bit is set */
    dev->ll.select();
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	4798      	blx	r3
    dev->ll.transmit((const uint8_t[]){W25Q_CMD_READ_STATUS_REG1}, 1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	2205      	movs	r2, #5
 8004384:	723a      	strb	r2, [r7, #8]
 8004386:	f107 0208 	add.w	r2, r7, #8
 800438a:	2101      	movs	r1, #1
 800438c:	4610      	mov	r0, r2
 800438e:	4798      	blx	r3
    dev->ll.receive(&status, 1);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f107 020f 	add.w	r2, r7, #15
 8004398:	2101      	movs	r1, #1
 800439a:	4610      	mov	r0, r2
 800439c:	4798      	blx	r3
    dev->ll.deselect();
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a2:	4798      	blx	r3

    if ((status & W25Q_STATUS_WEL) == 0) {
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <prv_write_enable+0x60>
        return W25Q_ERR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <prv_write_enable+0x62>
    }

    return W25Q_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <prv_get_capacity>:
 * \brief           Get chip capacity based on device ID
 * \param[in]       device_id: Device ID from chip (capacity byte from JEDEC ID)
 * \return          Capacity in bytes, `0` if unknown
 */
static uint32_t
prv_get_capacity(uint8_t device_id) {
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]
    switch (device_id) {
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	3b11      	subs	r3, #17
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d82f      	bhi.n	800442e <prv_get_capacity+0x72>
 80043ce:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <prv_get_capacity+0x18>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	080043ff 	.word	0x080043ff
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440b 	.word	0x0800440b
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004417 	.word	0x08004417
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004429 	.word	0x08004429
        case W25Q10:  return 131072UL;      /* 128KB */
 80043f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043fc:	e018      	b.n	8004430 <prv_get_capacity+0x74>
        case W25Q20:  return 262144UL;      /* 256KB */
 80043fe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004402:	e015      	b.n	8004430 <prv_get_capacity+0x74>
        case W25Q40:  return 524288UL;      /* 512KB */
 8004404:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004408:	e012      	b.n	8004430 <prv_get_capacity+0x74>
        case W25Q80:  return 1048576UL;     /* 1MB */
 800440a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800440e:	e00f      	b.n	8004430 <prv_get_capacity+0x74>
        case W25Q16:  return 2097152UL;     /* 2MB */
 8004410:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004414:	e00c      	b.n	8004430 <prv_get_capacity+0x74>
        case W25Q32:  return 4194304UL;     /* 4MB */
 8004416:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800441a:	e009      	b.n	8004430 <prv_get_capacity+0x74>
        case W25Q64:  return 8388608UL;     /* 8MB */
 800441c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004420:	e006      	b.n	8004430 <prv_get_capacity+0x74>
        case W25Q128: return 16777216UL;    /* 16MB */
 8004422:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004426:	e003      	b.n	8004430 <prv_get_capacity+0x74>
        case W25Q256: return 33554432UL;    /* 32MB */
 8004428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800442c:	e000      	b.n	8004430 <prv_get_capacity+0x74>
        default:      return 0;
 800442e:	2300      	movs	r3, #0
    }
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop

0800443c <w25q_init>:
 * \param[in]       dev: W25Q device handle
 * \param[in]       ll_funcs: Low-level function pointers for SPI communication
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_init(w25q_t* dev, const w25q_ll_t* ll_funcs) {
 800443c:	b5b0      	push	{r4, r5, r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
    if (dev == NULL || ll_funcs == NULL) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <w25q_init+0x16>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <w25q_init+0x1a>
        return W25Q_ERR_PARAM;
 8004452:	2303      	movs	r3, #3
 8004454:	e029      	b.n	80044aa <w25q_init+0x6e>
    }

    /* Copy low-level functions */
    dev->ll = *ll_funcs;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	f103 0420 	add.w	r4, r3, #32
 800445e:	4615      	mov	r5, r2
 8004460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004468:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    /* Initialize SPI */
    if (dev->ll.init != NULL) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <w25q_init+0x48>
        if (dev->ll.init() == 0) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4798      	blx	r3
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <w25q_init+0x48>
            return W25Q_ERR;
 8004480:	2301      	movs	r3, #1
 8004482:	e012      	b.n	80044aa <w25q_init+0x6e>
        }
    }

    /* Deselect chip */
    dev->ll.deselect();
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	4798      	blx	r3

    /* Wake up chip if it was in power-down mode */
    w25q_wake_up(dev);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f9f8 	bl	8004880 <w25q_wake_up>

    /* Detect chip type and configure */
    if (w25q_detect(dev) != W25Q_OK) {
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f840 	bl	8004516 <w25q_detect>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <w25q_init+0x64>
        return W25Q_ERR;
 800449c:	2301      	movs	r3, #1
 800449e:	e004      	b.n	80044aa <w25q_init+0x6e>
    }

    dev->initialized = 1;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return W25Q_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bdb0      	pop	{r4, r5, r7, pc}

080044b2 <w25q_read_id>:
 * \param[out]      manufacturer_id: Pointer to store manufacturer ID
 * \param[out]      device_id: Pointer to store device ID (capacity)
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_read_id(w25q_t* dev, uint8_t* manufacturer_id, uint8_t* device_id) {
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b086      	sub	sp, #24
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	607a      	str	r2, [r7, #4]
    uint8_t jedec_id[3];

    if (dev == NULL || manufacturer_id == NULL || device_id == NULL) {
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <w25q_read_id+0x1e>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <w25q_read_id+0x1e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <w25q_read_id+0x22>
        return W25Q_ERR_PARAM;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e01c      	b.n	800450e <w25q_read_id+0x5c>
    }

    /* Use JEDEC ID command (0x9F) to read correct capacity ID */
    dev->ll.select();
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	4798      	blx	r3
    dev->ll.transmit((const uint8_t[]){W25Q_CMD_JEDEC_ID}, 1);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044de:	229f      	movs	r2, #159	@ 0x9f
 80044e0:	743a      	strb	r2, [r7, #16]
 80044e2:	f107 0210 	add.w	r2, r7, #16
 80044e6:	2101      	movs	r1, #1
 80044e8:	4610      	mov	r0, r2
 80044ea:	4798      	blx	r3
    dev->ll.receive(jedec_id, 3);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f0:	f107 0214 	add.w	r2, r7, #20
 80044f4:	2103      	movs	r1, #3
 80044f6:	4610      	mov	r0, r2
 80044f8:	4798      	blx	r3
    dev->ll.deselect();
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	4798      	blx	r3

    *manufacturer_id = jedec_id[0];  /* 0xEF for Winbond */
 8004500:	7d3a      	ldrb	r2, [r7, #20]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	701a      	strb	r2, [r3, #0]
    *device_id = jedec_id[2];        /* Capacity ID: 0x15 for W25Q16 */
 8004506:	7dba      	ldrb	r2, [r7, #22]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	701a      	strb	r2, [r3, #0]

    return W25Q_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <w25q_detect>:
 * \brief           Auto-detect chip type and configure device info
 * \param[in]       dev: W25Q device handle
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_detect(w25q_t* dev) {
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
    uint8_t manufacturer_id, device_id;
    uint32_t capacity;

    if (dev == NULL) {
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d101      	bne.n	8004528 <w25q_detect+0x12>
        return W25Q_ERR_PARAM;
 8004524:	2303      	movs	r3, #3
 8004526:	e05c      	b.n	80045e2 <w25q_detect+0xcc>
    }

    /* Read chip ID */
    if (w25q_read_id(dev, &manufacturer_id, &device_id) != W25Q_OK) {
 8004528:	f107 020a 	add.w	r2, r7, #10
 800452c:	f107 030b 	add.w	r3, r7, #11
 8004530:	4619      	mov	r1, r3
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ffbd 	bl	80044b2 <w25q_read_id>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <w25q_detect+0x2c>
        return W25Q_ERR;
 800453e:	2301      	movs	r3, #1
 8004540:	e04f      	b.n	80045e2 <w25q_detect+0xcc>
    }

    /* Verify manufacturer */
    if (manufacturer_id != W25Q_MANUFACTURER_WINBOND) {
 8004542:	7afb      	ldrb	r3, [r7, #11]
 8004544:	2bef      	cmp	r3, #239	@ 0xef
 8004546:	d004      	beq.n	8004552 <w25q_detect+0x3c>
        dev->info.type = W25Q_UNKNOWN;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
        return W25Q_ERR;
 800454e:	2301      	movs	r3, #1
 8004550:	e047      	b.n	80045e2 <w25q_detect+0xcc>
    }

    /* Get capacity */
    capacity = prv_get_capacity(device_id);
 8004552:	7abb      	ldrb	r3, [r7, #10]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff ff31 	bl	80043bc <prv_get_capacity>
 800455a:	60f8      	str	r0, [r7, #12]
    if (capacity == 0) {
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d104      	bne.n	800456c <w25q_detect+0x56>
        dev->info.type = W25Q_UNKNOWN;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
        return W25Q_ERR;
 8004568:	2301      	movs	r3, #1
 800456a:	e03a      	b.n	80045e2 <w25q_detect+0xcc>
    }

    /* Configure device info */
    dev->info.type = (w25q_type_t)device_id;
 800456c:	7aba      	ldrb	r2, [r7, #10]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	701a      	strb	r2, [r3, #0]
    dev->info.manufacturer_id = manufacturer_id;
 8004572:	7afa      	ldrb	r2, [r7, #11]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	705a      	strb	r2, [r3, #1]
    dev->info.device_id = device_id;
 8004578:	7aba      	ldrb	r2, [r7, #10]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	709a      	strb	r2, [r3, #2]
    dev->info.capacity_bytes = capacity;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	605a      	str	r2, [r3, #4]
    dev->info.page_size = W25Q_PAGE_SIZE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800458a:	609a      	str	r2, [r3, #8]
    dev->info.sector_size = W25Q_SECTOR_SIZE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004592:	60da      	str	r2, [r3, #12]
    dev->info.block_size = W25Q_BLOCK_SIZE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800459a:	611a      	str	r2, [r3, #16]
    dev->info.page_count = capacity / W25Q_PAGE_SIZE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	0a1a      	lsrs	r2, r3, #8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	615a      	str	r2, [r3, #20]
    dev->info.sector_count = capacity / W25Q_SECTOR_SIZE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	0b1a      	lsrs	r2, r3, #12
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	619a      	str	r2, [r3, #24]
    dev->info.block_count = capacity / W25Q_BLOCK_SIZE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	0c1a      	lsrs	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	61da      	str	r2, [r3, #28]

    /* W25Q256 requires 4-byte address mode for full capacity access */
    if (device_id == W25Q256) {
 80045b4:	7abb      	ldrb	r3, [r7, #10]
 80045b6:	2b19      	cmp	r3, #25
 80045b8:	d112      	bne.n	80045e0 <w25q_detect+0xca>
        dev->ll.select();
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	4798      	blx	r3
        dev->ll.transmit((const uint8_t[]){W25Q_CMD_ENTER_4BYTE_MODE}, 1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	22b7      	movs	r2, #183	@ 0xb7
 80045c6:	723a      	strb	r2, [r7, #8]
 80045c8:	f107 0208 	add.w	r2, r7, #8
 80045cc:	2101      	movs	r1, #1
 80045ce:	4610      	mov	r0, r2
 80045d0:	4798      	blx	r3
        dev->ll.deselect();
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	4798      	blx	r3
        dev->ll.delay_ms(1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	2001      	movs	r0, #1
 80045de:	4798      	blx	r3
    }

    return W25Q_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <w25q_read>:
 * \param[out]      data: Buffer to store read data
 * \param[in]       len: Number of bytes to read
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_read(w25q_t* dev, uint32_t address, uint8_t* data, uint32_t len) {
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b086      	sub	sp, #24
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	607a      	str	r2, [r7, #4]
 80045f6:	603b      	str	r3, [r7, #0]
    uint8_t cmd[5];
    uint8_t addr_len;

    if (dev == NULL || data == NULL || len == 0) {
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <w25q_read+0x20>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d002      	beq.n	800460a <w25q_read+0x20>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <w25q_read+0x24>
        return W25Q_ERR_PARAM;
 800460a:	2303      	movs	r3, #3
 800460c:	e04a      	b.n	80046a4 <w25q_read+0xba>
    }

    if (address + len > dev->info.capacity_bytes) {
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	441a      	add	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	d901      	bls.n	8004620 <w25q_read+0x36>
        return W25Q_ERR_PARAM;
 800461c:	2303      	movs	r3, #3
 800461e:	e041      	b.n	80046a4 <w25q_read+0xba>
    }

    /* Wait until device is ready */
    if (prv_wait_ready(dev) != W25Q_OK) {
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f7ff fe63 	bl	80042ec <prv_wait_ready>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <w25q_read+0x46>
        return W25Q_ERR_TIMEOUT;
 800462c:	2302      	movs	r3, #2
 800462e:	e039      	b.n	80046a4 <w25q_read+0xba>
    }

    /* W25Q256 uses 4-byte address */
    if (dev->info.type == W25Q256) {
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	2b19      	cmp	r3, #25
 8004636:	d113      	bne.n	8004660 <w25q_read+0x76>
        cmd[0] = W25Q_CMD_READ_DATA;
 8004638:	2303      	movs	r3, #3
 800463a:	743b      	strb	r3, [r7, #16]
        cmd[1] = (address >> 24) & 0xFF;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0e1b      	lsrs	r3, r3, #24
 8004640:	b2db      	uxtb	r3, r3
 8004642:	747b      	strb	r3, [r7, #17]
        cmd[2] = (address >> 16) & 0xFF;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	b2db      	uxtb	r3, r3
 800464a:	74bb      	strb	r3, [r7, #18]
        cmd[3] = (address >> 8) & 0xFF;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	b2db      	uxtb	r3, r3
 8004652:	74fb      	strb	r3, [r7, #19]
        cmd[4] = address & 0xFF;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	753b      	strb	r3, [r7, #20]
        addr_len = 5;
 800465a:	2305      	movs	r3, #5
 800465c:	75fb      	strb	r3, [r7, #23]
 800465e:	e00e      	b.n	800467e <w25q_read+0x94>
    } else {
        cmd[0] = W25Q_CMD_READ_DATA;
 8004660:	2303      	movs	r3, #3
 8004662:	743b      	strb	r3, [r7, #16]
        cmd[1] = (address >> 16) & 0xFF;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	0c1b      	lsrs	r3, r3, #16
 8004668:	b2db      	uxtb	r3, r3
 800466a:	747b      	strb	r3, [r7, #17]
        cmd[2] = (address >> 8) & 0xFF;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	b2db      	uxtb	r3, r3
 8004672:	74bb      	strb	r3, [r7, #18]
        cmd[3] = address & 0xFF;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	74fb      	strb	r3, [r7, #19]
        addr_len = 4;
 800467a:	2304      	movs	r3, #4
 800467c:	75fb      	strb	r3, [r7, #23]
    }

    dev->ll.select();
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004682:	4798      	blx	r3
    dev->ll.transmit(cmd, addr_len);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	7df9      	ldrb	r1, [r7, #23]
 800468a:	f107 0210 	add.w	r2, r7, #16
 800468e:	4610      	mov	r0, r2
 8004690:	4798      	blx	r3
    dev->ll.receive(data, len);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
    dev->ll.deselect();
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a0:	4798      	blx	r3

    return W25Q_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <w25q_write_page>:
 * \param[in]       data: Data to write
 * \param[in]       len: Number of bytes to write (max 256)
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_write_page(w25q_t* dev, uint32_t address, const uint8_t* data, uint32_t len) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	603b      	str	r3, [r7, #0]
    uint8_t cmd[5];
    uint8_t addr_len;

    if (dev == NULL || data == NULL || len == 0 || len > W25Q_PAGE_SIZE) {
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d009      	beq.n	80046d4 <w25q_write_page+0x28>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d006      	beq.n	80046d4 <w25q_write_page+0x28>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <w25q_write_page+0x28>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d2:	d901      	bls.n	80046d8 <w25q_write_page+0x2c>
        return W25Q_ERR_PARAM;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e055      	b.n	8004784 <w25q_write_page+0xd8>
    }

    if (address + len > dev->info.capacity_bytes) {
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	441a      	add	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d901      	bls.n	80046ea <w25q_write_page+0x3e>
        return W25Q_ERR_PARAM;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e04c      	b.n	8004784 <w25q_write_page+0xd8>
    }

    /* Wait until device is ready */
    if (prv_wait_ready(dev) != W25Q_OK) {
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff fdfe 	bl	80042ec <prv_wait_ready>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <w25q_write_page+0x4e>
        return W25Q_ERR_TIMEOUT;
 80046f6:	2302      	movs	r3, #2
 80046f8:	e044      	b.n	8004784 <w25q_write_page+0xd8>
    }

    /* Enable write */
    if (prv_write_enable(dev) != W25Q_OK) {
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fe29 	bl	8004352 <prv_write_enable>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <w25q_write_page+0x5e>
        return W25Q_ERR;
 8004706:	2301      	movs	r3, #1
 8004708:	e03c      	b.n	8004784 <w25q_write_page+0xd8>
    }

    /* W25Q256 uses 4-byte address */
    if (dev->info.type == W25Q256) {
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b19      	cmp	r3, #25
 8004710:	d113      	bne.n	800473a <w25q_write_page+0x8e>
        cmd[0] = W25Q_CMD_PAGE_PROGRAM;
 8004712:	2302      	movs	r3, #2
 8004714:	743b      	strb	r3, [r7, #16]
        cmd[1] = (address >> 24) & 0xFF;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	0e1b      	lsrs	r3, r3, #24
 800471a:	b2db      	uxtb	r3, r3
 800471c:	747b      	strb	r3, [r7, #17]
        cmd[2] = (address >> 16) & 0xFF;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0c1b      	lsrs	r3, r3, #16
 8004722:	b2db      	uxtb	r3, r3
 8004724:	74bb      	strb	r3, [r7, #18]
        cmd[3] = (address >> 8) & 0xFF;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	b2db      	uxtb	r3, r3
 800472c:	74fb      	strb	r3, [r7, #19]
        cmd[4] = address & 0xFF;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	753b      	strb	r3, [r7, #20]
        addr_len = 5;
 8004734:	2305      	movs	r3, #5
 8004736:	75fb      	strb	r3, [r7, #23]
 8004738:	e00e      	b.n	8004758 <w25q_write_page+0xac>
    } else {
        cmd[0] = W25Q_CMD_PAGE_PROGRAM;
 800473a:	2302      	movs	r3, #2
 800473c:	743b      	strb	r3, [r7, #16]
        cmd[1] = (address >> 16) & 0xFF;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	0c1b      	lsrs	r3, r3, #16
 8004742:	b2db      	uxtb	r3, r3
 8004744:	747b      	strb	r3, [r7, #17]
        cmd[2] = (address >> 8) & 0xFF;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	0a1b      	lsrs	r3, r3, #8
 800474a:	b2db      	uxtb	r3, r3
 800474c:	74bb      	strb	r3, [r7, #18]
        cmd[3] = address & 0xFF;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	74fb      	strb	r3, [r7, #19]
        addr_len = 4;
 8004754:	2304      	movs	r3, #4
 8004756:	75fb      	strb	r3, [r7, #23]
    }

    dev->ll.select();
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	4798      	blx	r3
    dev->ll.transmit(cmd, addr_len);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	7df9      	ldrb	r1, [r7, #23]
 8004764:	f107 0210 	add.w	r2, r7, #16
 8004768:	4610      	mov	r0, r2
 800476a:	4798      	blx	r3
    dev->ll.transmit(data, len);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	6839      	ldr	r1, [r7, #0]
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	4798      	blx	r3
    dev->ll.deselect();
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477a:	4798      	blx	r3

    /* Wait for write completion */
    return prv_wait_ready(dev);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff fdb5 	bl	80042ec <prv_wait_ready>
 8004782:	4603      	mov	r3, r0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <w25q_erase_sector>:
 * \param[in]       dev: W25Q device handle
 * \param[in]       address: Sector address (should be sector-aligned)
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_erase_sector(w25q_t* dev, uint32_t address) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
    uint8_t cmd[5];
    uint8_t addr_len;

    if (dev == NULL) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <w25q_erase_sector+0x14>
        return W25Q_ERR_PARAM;
 800479c:	2303      	movs	r3, #3
 800479e:	e04e      	b.n	800483e <w25q_erase_sector+0xb2>
    }

    if (address >= dev->info.capacity_bytes) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d301      	bcc.n	80047ae <w25q_erase_sector+0x22>
        return W25Q_ERR_PARAM;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e047      	b.n	800483e <w25q_erase_sector+0xb2>
    }

    /* Wait until device is ready */
    if (prv_wait_ready(dev) != W25Q_OK) {
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fd9c 	bl	80042ec <prv_wait_ready>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <w25q_erase_sector+0x32>
        return W25Q_ERR_TIMEOUT;
 80047ba:	2302      	movs	r3, #2
 80047bc:	e03f      	b.n	800483e <w25q_erase_sector+0xb2>
    }

    /* Enable write */
    if (prv_write_enable(dev) != W25Q_OK) {
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff fdc7 	bl	8004352 <prv_write_enable>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <w25q_erase_sector+0x42>
        return W25Q_ERR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e037      	b.n	800483e <w25q_erase_sector+0xb2>
    }

    /* W25Q256 uses 4-byte address */
    if (dev->info.type == W25Q256) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b19      	cmp	r3, #25
 80047d4:	d113      	bne.n	80047fe <w25q_erase_sector+0x72>
        cmd[0] = W25Q_CMD_SECTOR_ERASE_4K;
 80047d6:	2320      	movs	r3, #32
 80047d8:	723b      	strb	r3, [r7, #8]
        cmd[1] = (address >> 24) & 0xFF;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	0e1b      	lsrs	r3, r3, #24
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	727b      	strb	r3, [r7, #9]
        cmd[2] = (address >> 16) & 0xFF;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	72bb      	strb	r3, [r7, #10]
        cmd[3] = (address >> 8) & 0xFF;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	0a1b      	lsrs	r3, r3, #8
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	72fb      	strb	r3, [r7, #11]
        cmd[4] = address & 0xFF;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	733b      	strb	r3, [r7, #12]
        addr_len = 5;
 80047f8:	2305      	movs	r3, #5
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	e00e      	b.n	800481c <w25q_erase_sector+0x90>
    } else {
        cmd[0] = W25Q_CMD_SECTOR_ERASE_4K;
 80047fe:	2320      	movs	r3, #32
 8004800:	723b      	strb	r3, [r7, #8]
        cmd[1] = (address >> 16) & 0xFF;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	b2db      	uxtb	r3, r3
 8004808:	727b      	strb	r3, [r7, #9]
        cmd[2] = (address >> 8) & 0xFF;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	0a1b      	lsrs	r3, r3, #8
 800480e:	b2db      	uxtb	r3, r3
 8004810:	72bb      	strb	r3, [r7, #10]
        cmd[3] = address & 0xFF;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	72fb      	strb	r3, [r7, #11]
        addr_len = 4;
 8004818:	2304      	movs	r3, #4
 800481a:	73fb      	strb	r3, [r7, #15]
    }

    dev->ll.select();
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	4798      	blx	r3
    dev->ll.transmit(cmd, addr_len);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	7bf9      	ldrb	r1, [r7, #15]
 8004828:	f107 0208 	add.w	r2, r7, #8
 800482c:	4610      	mov	r0, r2
 800482e:	4798      	blx	r3
    dev->ll.deselect();
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	4798      	blx	r3

    /* Wait for erase completion */
    return prv_wait_ready(dev);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fd58 	bl	80042ec <prv_wait_ready>
 800483c:	4603      	mov	r3, r0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <w25q_power_down>:
 * \brief           Put device into power-down mode
 * \param[in]       dev: W25Q device handle
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_power_down(w25q_t* dev) {
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
    if (dev == NULL) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <w25q_power_down+0x12>
        return W25Q_ERR_PARAM;
 8004854:	2303      	movs	r3, #3
 8004856:	e00f      	b.n	8004878 <w25q_power_down+0x32>
    }

    dev->ll.select();
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485c:	4798      	blx	r3
    dev->ll.transmit((const uint8_t[]){W25Q_CMD_POWER_DOWN}, 1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	22b9      	movs	r2, #185	@ 0xb9
 8004864:	733a      	strb	r2, [r7, #12]
 8004866:	f107 020c 	add.w	r2, r7, #12
 800486a:	2101      	movs	r1, #1
 800486c:	4610      	mov	r0, r2
 800486e:	4798      	blx	r3
    dev->ll.deselect();
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	4798      	blx	r3

    return W25Q_OK;
 8004876:	2300      	movs	r3, #0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <w25q_wake_up>:
 * \brief           Wake up device from power-down mode
 * \param[in]       dev: W25Q device handle
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_wake_up(w25q_t* dev) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
    if (dev == NULL) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <w25q_wake_up+0x12>
        return W25Q_ERR_PARAM;
 800488e:	2303      	movs	r3, #3
 8004890:	e013      	b.n	80048ba <w25q_wake_up+0x3a>
    }

    dev->ll.select();
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	4798      	blx	r3
    dev->ll.transmit((const uint8_t[]){W25Q_CMD_RELEASE_POWER_DOWN}, 1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489c:	22ab      	movs	r2, #171	@ 0xab
 800489e:	733a      	strb	r2, [r7, #12]
 80048a0:	f107 020c 	add.w	r2, r7, #12
 80048a4:	2101      	movs	r1, #1
 80048a6:	4610      	mov	r0, r2
 80048a8:	4798      	blx	r3
    dev->ll.deselect();
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ae:	4798      	blx	r3

    /* Wait for device to wake up (tRES2 = 3us min, use 1ms to be safe) */
    dev->ll.delay_ms(1);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	2001      	movs	r0, #1
 80048b6:	4798      	blx	r3

    return W25Q_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <w25q_get_info>:
 * \param[in]       dev: W25Q device handle
 * \param[out]      info: Pointer to store chip information
 * \return          \ref W25Q_OK on success, member of \ref w25q_result_t otherwise
 */
w25q_result_t
w25q_get_info(w25q_t* dev, w25q_info_t* info) {
 80048c2:	b4b0      	push	{r4, r5, r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
    if (dev == NULL || info == NULL) {
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <w25q_get_info+0x16>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <w25q_get_info+0x1a>
        return W25Q_ERR_PARAM;
 80048d8:	2303      	movs	r3, #3
 80048da:	e00a      	b.n	80048f2 <w25q_get_info+0x30>
    }

    *info = dev->info;
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4614      	mov	r4, r2
 80048e2:	461d      	mov	r5, r3
 80048e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return W25Q_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bcb0      	pop	{r4, r5, r7}
 80048fa:	4770      	bx	lr

080048fc <__cvt>:
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004902:	461d      	mov	r5, r3
 8004904:	bfbb      	ittet	lt
 8004906:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800490a:	461d      	movlt	r5, r3
 800490c:	2300      	movge	r3, #0
 800490e:	232d      	movlt	r3, #45	@ 0x2d
 8004910:	b088      	sub	sp, #32
 8004912:	4614      	mov	r4, r2
 8004914:	bfb8      	it	lt
 8004916:	4614      	movlt	r4, r2
 8004918:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800491a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800491c:	7013      	strb	r3, [r2, #0]
 800491e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004920:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004924:	f023 0820 	bic.w	r8, r3, #32
 8004928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800492c:	d005      	beq.n	800493a <__cvt+0x3e>
 800492e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004932:	d100      	bne.n	8004936 <__cvt+0x3a>
 8004934:	3601      	adds	r6, #1
 8004936:	2302      	movs	r3, #2
 8004938:	e000      	b.n	800493c <__cvt+0x40>
 800493a:	2303      	movs	r3, #3
 800493c:	aa07      	add	r2, sp, #28
 800493e:	9204      	str	r2, [sp, #16]
 8004940:	aa06      	add	r2, sp, #24
 8004942:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004946:	e9cd 3600 	strd	r3, r6, [sp]
 800494a:	4622      	mov	r2, r4
 800494c:	462b      	mov	r3, r5
 800494e:	f000 ff4f 	bl	80057f0 <_dtoa_r>
 8004952:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004956:	4607      	mov	r7, r0
 8004958:	d119      	bne.n	800498e <__cvt+0x92>
 800495a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800495c:	07db      	lsls	r3, r3, #31
 800495e:	d50e      	bpl.n	800497e <__cvt+0x82>
 8004960:	eb00 0906 	add.w	r9, r0, r6
 8004964:	2200      	movs	r2, #0
 8004966:	2300      	movs	r3, #0
 8004968:	4620      	mov	r0, r4
 800496a:	4629      	mov	r1, r5
 800496c:	f7fc f888 	bl	8000a80 <__aeabi_dcmpeq>
 8004970:	b108      	cbz	r0, 8004976 <__cvt+0x7a>
 8004972:	f8cd 901c 	str.w	r9, [sp, #28]
 8004976:	2230      	movs	r2, #48	@ 0x30
 8004978:	9b07      	ldr	r3, [sp, #28]
 800497a:	454b      	cmp	r3, r9
 800497c:	d31e      	bcc.n	80049bc <__cvt+0xc0>
 800497e:	4638      	mov	r0, r7
 8004980:	9b07      	ldr	r3, [sp, #28]
 8004982:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004984:	1bdb      	subs	r3, r3, r7
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	b008      	add	sp, #32
 800498a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004992:	eb00 0906 	add.w	r9, r0, r6
 8004996:	d1e5      	bne.n	8004964 <__cvt+0x68>
 8004998:	7803      	ldrb	r3, [r0, #0]
 800499a:	2b30      	cmp	r3, #48	@ 0x30
 800499c:	d10a      	bne.n	80049b4 <__cvt+0xb8>
 800499e:	2200      	movs	r2, #0
 80049a0:	2300      	movs	r3, #0
 80049a2:	4620      	mov	r0, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	f7fc f86b 	bl	8000a80 <__aeabi_dcmpeq>
 80049aa:	b918      	cbnz	r0, 80049b4 <__cvt+0xb8>
 80049ac:	f1c6 0601 	rsb	r6, r6, #1
 80049b0:	f8ca 6000 	str.w	r6, [sl]
 80049b4:	f8da 3000 	ldr.w	r3, [sl]
 80049b8:	4499      	add	r9, r3
 80049ba:	e7d3      	b.n	8004964 <__cvt+0x68>
 80049bc:	1c59      	adds	r1, r3, #1
 80049be:	9107      	str	r1, [sp, #28]
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	e7d9      	b.n	8004978 <__cvt+0x7c>

080049c4 <__exponent>:
 80049c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049c6:	2900      	cmp	r1, #0
 80049c8:	bfb6      	itet	lt
 80049ca:	232d      	movlt	r3, #45	@ 0x2d
 80049cc:	232b      	movge	r3, #43	@ 0x2b
 80049ce:	4249      	neglt	r1, r1
 80049d0:	2909      	cmp	r1, #9
 80049d2:	7002      	strb	r2, [r0, #0]
 80049d4:	7043      	strb	r3, [r0, #1]
 80049d6:	dd29      	ble.n	8004a2c <__exponent+0x68>
 80049d8:	f10d 0307 	add.w	r3, sp, #7
 80049dc:	461d      	mov	r5, r3
 80049de:	270a      	movs	r7, #10
 80049e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80049e4:	461a      	mov	r2, r3
 80049e6:	fb07 1416 	mls	r4, r7, r6, r1
 80049ea:	3430      	adds	r4, #48	@ 0x30
 80049ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 80049f0:	460c      	mov	r4, r1
 80049f2:	2c63      	cmp	r4, #99	@ 0x63
 80049f4:	4631      	mov	r1, r6
 80049f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80049fa:	dcf1      	bgt.n	80049e0 <__exponent+0x1c>
 80049fc:	3130      	adds	r1, #48	@ 0x30
 80049fe:	1e94      	subs	r4, r2, #2
 8004a00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a04:	4623      	mov	r3, r4
 8004a06:	1c41      	adds	r1, r0, #1
 8004a08:	42ab      	cmp	r3, r5
 8004a0a:	d30a      	bcc.n	8004a22 <__exponent+0x5e>
 8004a0c:	f10d 0309 	add.w	r3, sp, #9
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	42ac      	cmp	r4, r5
 8004a14:	bf88      	it	hi
 8004a16:	2300      	movhi	r3, #0
 8004a18:	3302      	adds	r3, #2
 8004a1a:	4403      	add	r3, r0
 8004a1c:	1a18      	subs	r0, r3, r0
 8004a1e:	b003      	add	sp, #12
 8004a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a22:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a26:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a2a:	e7ed      	b.n	8004a08 <__exponent+0x44>
 8004a2c:	2330      	movs	r3, #48	@ 0x30
 8004a2e:	3130      	adds	r1, #48	@ 0x30
 8004a30:	7083      	strb	r3, [r0, #2]
 8004a32:	70c1      	strb	r1, [r0, #3]
 8004a34:	1d03      	adds	r3, r0, #4
 8004a36:	e7f1      	b.n	8004a1c <__exponent+0x58>

08004a38 <_printf_float>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	b091      	sub	sp, #68	@ 0x44
 8004a3e:	460c      	mov	r4, r1
 8004a40:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004a44:	4616      	mov	r6, r2
 8004a46:	461f      	mov	r7, r3
 8004a48:	4605      	mov	r5, r0
 8004a4a:	f000 fdc3 	bl	80055d4 <_localeconv_r>
 8004a4e:	6803      	ldr	r3, [r0, #0]
 8004a50:	4618      	mov	r0, r3
 8004a52:	9308      	str	r3, [sp, #32]
 8004a54:	f7fb fbe8 	bl	8000228 <strlen>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	930e      	str	r3, [sp, #56]	@ 0x38
 8004a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a60:	9009      	str	r0, [sp, #36]	@ 0x24
 8004a62:	3307      	adds	r3, #7
 8004a64:	f023 0307 	bic.w	r3, r3, #7
 8004a68:	f103 0208 	add.w	r2, r3, #8
 8004a6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004a70:	f8d4 b000 	ldr.w	fp, [r4]
 8004a74:	f8c8 2000 	str.w	r2, [r8]
 8004a78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a82:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a86:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a92:	4b9c      	ldr	r3, [pc, #624]	@ (8004d04 <_printf_float+0x2cc>)
 8004a94:	f7fc f826 	bl	8000ae4 <__aeabi_dcmpun>
 8004a98:	bb70      	cbnz	r0, 8004af8 <_printf_float+0xc0>
 8004a9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa2:	4b98      	ldr	r3, [pc, #608]	@ (8004d04 <_printf_float+0x2cc>)
 8004aa4:	f7fc f800 	bl	8000aa8 <__aeabi_dcmple>
 8004aa8:	bb30      	cbnz	r0, 8004af8 <_printf_float+0xc0>
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2300      	movs	r3, #0
 8004aae:	4640      	mov	r0, r8
 8004ab0:	4649      	mov	r1, r9
 8004ab2:	f7fb ffef 	bl	8000a94 <__aeabi_dcmplt>
 8004ab6:	b110      	cbz	r0, 8004abe <_printf_float+0x86>
 8004ab8:	232d      	movs	r3, #45	@ 0x2d
 8004aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004abe:	4a92      	ldr	r2, [pc, #584]	@ (8004d08 <_printf_float+0x2d0>)
 8004ac0:	4b92      	ldr	r3, [pc, #584]	@ (8004d0c <_printf_float+0x2d4>)
 8004ac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004ac6:	bf8c      	ite	hi
 8004ac8:	4690      	movhi	r8, r2
 8004aca:	4698      	movls	r8, r3
 8004acc:	2303      	movs	r3, #3
 8004ace:	f04f 0900 	mov.w	r9, #0
 8004ad2:	6123      	str	r3, [r4, #16]
 8004ad4:	f02b 0304 	bic.w	r3, fp, #4
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	4633      	mov	r3, r6
 8004adc:	4621      	mov	r1, r4
 8004ade:	4628      	mov	r0, r5
 8004ae0:	9700      	str	r7, [sp, #0]
 8004ae2:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004ae4:	f000 f9d4 	bl	8004e90 <_printf_common>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	f040 8090 	bne.w	8004c0e <_printf_float+0x1d6>
 8004aee:	f04f 30ff 	mov.w	r0, #4294967295
 8004af2:	b011      	add	sp, #68	@ 0x44
 8004af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af8:	4642      	mov	r2, r8
 8004afa:	464b      	mov	r3, r9
 8004afc:	4640      	mov	r0, r8
 8004afe:	4649      	mov	r1, r9
 8004b00:	f7fb fff0 	bl	8000ae4 <__aeabi_dcmpun>
 8004b04:	b148      	cbz	r0, 8004b1a <_printf_float+0xe2>
 8004b06:	464b      	mov	r3, r9
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	bfb8      	it	lt
 8004b0c:	232d      	movlt	r3, #45	@ 0x2d
 8004b0e:	4a80      	ldr	r2, [pc, #512]	@ (8004d10 <_printf_float+0x2d8>)
 8004b10:	bfb8      	it	lt
 8004b12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b16:	4b7f      	ldr	r3, [pc, #508]	@ (8004d14 <_printf_float+0x2dc>)
 8004b18:	e7d3      	b.n	8004ac2 <_printf_float+0x8a>
 8004b1a:	6863      	ldr	r3, [r4, #4]
 8004b1c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	d13f      	bne.n	8004ba4 <_printf_float+0x16c>
 8004b24:	2306      	movs	r3, #6
 8004b26:	6063      	str	r3, [r4, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	9206      	str	r2, [sp, #24]
 8004b32:	aa0e      	add	r2, sp, #56	@ 0x38
 8004b34:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004b38:	aa0d      	add	r2, sp, #52	@ 0x34
 8004b3a:	9203      	str	r2, [sp, #12]
 8004b3c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004b40:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b44:	6863      	ldr	r3, [r4, #4]
 8004b46:	4642      	mov	r2, r8
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	464b      	mov	r3, r9
 8004b4e:	910a      	str	r1, [sp, #40]	@ 0x28
 8004b50:	f7ff fed4 	bl	80048fc <__cvt>
 8004b54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004b56:	4680      	mov	r8, r0
 8004b58:	2947      	cmp	r1, #71	@ 0x47
 8004b5a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004b5c:	d128      	bne.n	8004bb0 <_printf_float+0x178>
 8004b5e:	1cc8      	adds	r0, r1, #3
 8004b60:	db02      	blt.n	8004b68 <_printf_float+0x130>
 8004b62:	6863      	ldr	r3, [r4, #4]
 8004b64:	4299      	cmp	r1, r3
 8004b66:	dd40      	ble.n	8004bea <_printf_float+0x1b2>
 8004b68:	f1aa 0a02 	sub.w	sl, sl, #2
 8004b6c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b70:	4652      	mov	r2, sl
 8004b72:	3901      	subs	r1, #1
 8004b74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004b78:	910d      	str	r1, [sp, #52]	@ 0x34
 8004b7a:	f7ff ff23 	bl	80049c4 <__exponent>
 8004b7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b80:	4681      	mov	r9, r0
 8004b82:	1813      	adds	r3, r2, r0
 8004b84:	2a01      	cmp	r2, #1
 8004b86:	6123      	str	r3, [r4, #16]
 8004b88:	dc02      	bgt.n	8004b90 <_printf_float+0x158>
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	07d2      	lsls	r2, r2, #31
 8004b8e:	d501      	bpl.n	8004b94 <_printf_float+0x15c>
 8004b90:	3301      	adds	r3, #1
 8004b92:	6123      	str	r3, [r4, #16]
 8004b94:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d09e      	beq.n	8004ada <_printf_float+0xa2>
 8004b9c:	232d      	movs	r3, #45	@ 0x2d
 8004b9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ba2:	e79a      	b.n	8004ada <_printf_float+0xa2>
 8004ba4:	2947      	cmp	r1, #71	@ 0x47
 8004ba6:	d1bf      	bne.n	8004b28 <_printf_float+0xf0>
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1bd      	bne.n	8004b28 <_printf_float+0xf0>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e7ba      	b.n	8004b26 <_printf_float+0xee>
 8004bb0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004bb4:	d9dc      	bls.n	8004b70 <_printf_float+0x138>
 8004bb6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004bba:	d118      	bne.n	8004bee <_printf_float+0x1b6>
 8004bbc:	2900      	cmp	r1, #0
 8004bbe:	6863      	ldr	r3, [r4, #4]
 8004bc0:	dd0b      	ble.n	8004bda <_printf_float+0x1a2>
 8004bc2:	6121      	str	r1, [r4, #16]
 8004bc4:	b913      	cbnz	r3, 8004bcc <_printf_float+0x194>
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	07d0      	lsls	r0, r2, #31
 8004bca:	d502      	bpl.n	8004bd2 <_printf_float+0x19a>
 8004bcc:	3301      	adds	r3, #1
 8004bce:	440b      	add	r3, r1
 8004bd0:	6123      	str	r3, [r4, #16]
 8004bd2:	f04f 0900 	mov.w	r9, #0
 8004bd6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004bd8:	e7dc      	b.n	8004b94 <_printf_float+0x15c>
 8004bda:	b913      	cbnz	r3, 8004be2 <_printf_float+0x1aa>
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	07d2      	lsls	r2, r2, #31
 8004be0:	d501      	bpl.n	8004be6 <_printf_float+0x1ae>
 8004be2:	3302      	adds	r3, #2
 8004be4:	e7f4      	b.n	8004bd0 <_printf_float+0x198>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e7f2      	b.n	8004bd0 <_printf_float+0x198>
 8004bea:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004bee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004bf0:	4299      	cmp	r1, r3
 8004bf2:	db05      	blt.n	8004c00 <_printf_float+0x1c8>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	6121      	str	r1, [r4, #16]
 8004bf8:	07d8      	lsls	r0, r3, #31
 8004bfa:	d5ea      	bpl.n	8004bd2 <_printf_float+0x19a>
 8004bfc:	1c4b      	adds	r3, r1, #1
 8004bfe:	e7e7      	b.n	8004bd0 <_printf_float+0x198>
 8004c00:	2900      	cmp	r1, #0
 8004c02:	bfcc      	ite	gt
 8004c04:	2201      	movgt	r2, #1
 8004c06:	f1c1 0202 	rsble	r2, r1, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	e7e0      	b.n	8004bd0 <_printf_float+0x198>
 8004c0e:	6823      	ldr	r3, [r4, #0]
 8004c10:	055a      	lsls	r2, r3, #21
 8004c12:	d407      	bmi.n	8004c24 <_printf_float+0x1ec>
 8004c14:	6923      	ldr	r3, [r4, #16]
 8004c16:	4642      	mov	r2, r8
 8004c18:	4631      	mov	r1, r6
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	47b8      	blx	r7
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d12b      	bne.n	8004c7a <_printf_float+0x242>
 8004c22:	e764      	b.n	8004aee <_printf_float+0xb6>
 8004c24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c28:	f240 80dc 	bls.w	8004de4 <_printf_float+0x3ac>
 8004c2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c30:	2200      	movs	r2, #0
 8004c32:	2300      	movs	r3, #0
 8004c34:	f7fb ff24 	bl	8000a80 <__aeabi_dcmpeq>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	d033      	beq.n	8004ca4 <_printf_float+0x26c>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4631      	mov	r1, r6
 8004c40:	4628      	mov	r0, r5
 8004c42:	4a35      	ldr	r2, [pc, #212]	@ (8004d18 <_printf_float+0x2e0>)
 8004c44:	47b8      	blx	r7
 8004c46:	3001      	adds	r0, #1
 8004c48:	f43f af51 	beq.w	8004aee <_printf_float+0xb6>
 8004c4c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004c50:	4543      	cmp	r3, r8
 8004c52:	db02      	blt.n	8004c5a <_printf_float+0x222>
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	07d8      	lsls	r0, r3, #31
 8004c58:	d50f      	bpl.n	8004c7a <_printf_float+0x242>
 8004c5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	f43f af42 	beq.w	8004aee <_printf_float+0xb6>
 8004c6a:	f04f 0900 	mov.w	r9, #0
 8004c6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004c72:	f104 0a1a 	add.w	sl, r4, #26
 8004c76:	45c8      	cmp	r8, r9
 8004c78:	dc09      	bgt.n	8004c8e <_printf_float+0x256>
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	079b      	lsls	r3, r3, #30
 8004c7e:	f100 8102 	bmi.w	8004e86 <_printf_float+0x44e>
 8004c82:	68e0      	ldr	r0, [r4, #12]
 8004c84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c86:	4298      	cmp	r0, r3
 8004c88:	bfb8      	it	lt
 8004c8a:	4618      	movlt	r0, r3
 8004c8c:	e731      	b.n	8004af2 <_printf_float+0xba>
 8004c8e:	2301      	movs	r3, #1
 8004c90:	4652      	mov	r2, sl
 8004c92:	4631      	mov	r1, r6
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b8      	blx	r7
 8004c98:	3001      	adds	r0, #1
 8004c9a:	f43f af28 	beq.w	8004aee <_printf_float+0xb6>
 8004c9e:	f109 0901 	add.w	r9, r9, #1
 8004ca2:	e7e8      	b.n	8004c76 <_printf_float+0x23e>
 8004ca4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	dc38      	bgt.n	8004d1c <_printf_float+0x2e4>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4631      	mov	r1, r6
 8004cae:	4628      	mov	r0, r5
 8004cb0:	4a19      	ldr	r2, [pc, #100]	@ (8004d18 <_printf_float+0x2e0>)
 8004cb2:	47b8      	blx	r7
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	f43f af1a 	beq.w	8004aee <_printf_float+0xb6>
 8004cba:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004cbe:	ea59 0303 	orrs.w	r3, r9, r3
 8004cc2:	d102      	bne.n	8004cca <_printf_float+0x292>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	07d9      	lsls	r1, r3, #31
 8004cc8:	d5d7      	bpl.n	8004c7a <_printf_float+0x242>
 8004cca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f af0a 	beq.w	8004aee <_printf_float+0xb6>
 8004cda:	f04f 0a00 	mov.w	sl, #0
 8004cde:	f104 0b1a 	add.w	fp, r4, #26
 8004ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ce4:	425b      	negs	r3, r3
 8004ce6:	4553      	cmp	r3, sl
 8004ce8:	dc01      	bgt.n	8004cee <_printf_float+0x2b6>
 8004cea:	464b      	mov	r3, r9
 8004cec:	e793      	b.n	8004c16 <_printf_float+0x1de>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	465a      	mov	r2, fp
 8004cf2:	4631      	mov	r1, r6
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b8      	blx	r7
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	f43f aef8 	beq.w	8004aee <_printf_float+0xb6>
 8004cfe:	f10a 0a01 	add.w	sl, sl, #1
 8004d02:	e7ee      	b.n	8004ce2 <_printf_float+0x2aa>
 8004d04:	7fefffff 	.word	0x7fefffff
 8004d08:	08007c74 	.word	0x08007c74
 8004d0c:	08007c70 	.word	0x08007c70
 8004d10:	08007c7c 	.word	0x08007c7c
 8004d14:	08007c78 	.word	0x08007c78
 8004d18:	08007c80 	.word	0x08007c80
 8004d1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d1e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d22:	4553      	cmp	r3, sl
 8004d24:	bfa8      	it	ge
 8004d26:	4653      	movge	r3, sl
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	dc36      	bgt.n	8004d9c <_printf_float+0x364>
 8004d2e:	f04f 0b00 	mov.w	fp, #0
 8004d32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d36:	f104 021a 	add.w	r2, r4, #26
 8004d3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d3c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d3e:	eba3 0309 	sub.w	r3, r3, r9
 8004d42:	455b      	cmp	r3, fp
 8004d44:	dc31      	bgt.n	8004daa <_printf_float+0x372>
 8004d46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d48:	459a      	cmp	sl, r3
 8004d4a:	dc3a      	bgt.n	8004dc2 <_printf_float+0x38a>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	07da      	lsls	r2, r3, #31
 8004d50:	d437      	bmi.n	8004dc2 <_printf_float+0x38a>
 8004d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d54:	ebaa 0903 	sub.w	r9, sl, r3
 8004d58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d5a:	ebaa 0303 	sub.w	r3, sl, r3
 8004d5e:	4599      	cmp	r9, r3
 8004d60:	bfa8      	it	ge
 8004d62:	4699      	movge	r9, r3
 8004d64:	f1b9 0f00 	cmp.w	r9, #0
 8004d68:	dc33      	bgt.n	8004dd2 <_printf_float+0x39a>
 8004d6a:	f04f 0800 	mov.w	r8, #0
 8004d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d72:	f104 0b1a 	add.w	fp, r4, #26
 8004d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d78:	ebaa 0303 	sub.w	r3, sl, r3
 8004d7c:	eba3 0309 	sub.w	r3, r3, r9
 8004d80:	4543      	cmp	r3, r8
 8004d82:	f77f af7a 	ble.w	8004c7a <_printf_float+0x242>
 8004d86:	2301      	movs	r3, #1
 8004d88:	465a      	mov	r2, fp
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	47b8      	blx	r7
 8004d90:	3001      	adds	r0, #1
 8004d92:	f43f aeac 	beq.w	8004aee <_printf_float+0xb6>
 8004d96:	f108 0801 	add.w	r8, r8, #1
 8004d9a:	e7ec      	b.n	8004d76 <_printf_float+0x33e>
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	d1c2      	bne.n	8004d2e <_printf_float+0x2f6>
 8004da8:	e6a1      	b.n	8004aee <_printf_float+0xb6>
 8004daa:	2301      	movs	r3, #1
 8004dac:	4631      	mov	r1, r6
 8004dae:	4628      	mov	r0, r5
 8004db0:	920a      	str	r2, [sp, #40]	@ 0x28
 8004db2:	47b8      	blx	r7
 8004db4:	3001      	adds	r0, #1
 8004db6:	f43f ae9a 	beq.w	8004aee <_printf_float+0xb6>
 8004dba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dbc:	f10b 0b01 	add.w	fp, fp, #1
 8004dc0:	e7bb      	b.n	8004d3a <_printf_float+0x302>
 8004dc2:	4631      	mov	r1, r6
 8004dc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	d1c0      	bne.n	8004d52 <_printf_float+0x31a>
 8004dd0:	e68d      	b.n	8004aee <_printf_float+0xb6>
 8004dd2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004dd4:	464b      	mov	r3, r9
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	4442      	add	r2, r8
 8004ddc:	47b8      	blx	r7
 8004dde:	3001      	adds	r0, #1
 8004de0:	d1c3      	bne.n	8004d6a <_printf_float+0x332>
 8004de2:	e684      	b.n	8004aee <_printf_float+0xb6>
 8004de4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004de8:	f1ba 0f01 	cmp.w	sl, #1
 8004dec:	dc01      	bgt.n	8004df2 <_printf_float+0x3ba>
 8004dee:	07db      	lsls	r3, r3, #31
 8004df0:	d536      	bpl.n	8004e60 <_printf_float+0x428>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4642      	mov	r2, r8
 8004df6:	4631      	mov	r1, r6
 8004df8:	4628      	mov	r0, r5
 8004dfa:	47b8      	blx	r7
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	f43f ae76 	beq.w	8004aee <_printf_float+0xb6>
 8004e02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e06:	4631      	mov	r1, r6
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b8      	blx	r7
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	f43f ae6e 	beq.w	8004aee <_printf_float+0xb6>
 8004e12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e16:	2200      	movs	r2, #0
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e1e:	f7fb fe2f 	bl	8000a80 <__aeabi_dcmpeq>
 8004e22:	b9c0      	cbnz	r0, 8004e56 <_printf_float+0x41e>
 8004e24:	4653      	mov	r3, sl
 8004e26:	f108 0201 	add.w	r2, r8, #1
 8004e2a:	4631      	mov	r1, r6
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b8      	blx	r7
 8004e30:	3001      	adds	r0, #1
 8004e32:	d10c      	bne.n	8004e4e <_printf_float+0x416>
 8004e34:	e65b      	b.n	8004aee <_printf_float+0xb6>
 8004e36:	2301      	movs	r3, #1
 8004e38:	465a      	mov	r2, fp
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b8      	blx	r7
 8004e40:	3001      	adds	r0, #1
 8004e42:	f43f ae54 	beq.w	8004aee <_printf_float+0xb6>
 8004e46:	f108 0801 	add.w	r8, r8, #1
 8004e4a:	45d0      	cmp	r8, sl
 8004e4c:	dbf3      	blt.n	8004e36 <_printf_float+0x3fe>
 8004e4e:	464b      	mov	r3, r9
 8004e50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004e54:	e6e0      	b.n	8004c18 <_printf_float+0x1e0>
 8004e56:	f04f 0800 	mov.w	r8, #0
 8004e5a:	f104 0b1a 	add.w	fp, r4, #26
 8004e5e:	e7f4      	b.n	8004e4a <_printf_float+0x412>
 8004e60:	2301      	movs	r3, #1
 8004e62:	4642      	mov	r2, r8
 8004e64:	e7e1      	b.n	8004e2a <_printf_float+0x3f2>
 8004e66:	2301      	movs	r3, #1
 8004e68:	464a      	mov	r2, r9
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	47b8      	blx	r7
 8004e70:	3001      	adds	r0, #1
 8004e72:	f43f ae3c 	beq.w	8004aee <_printf_float+0xb6>
 8004e76:	f108 0801 	add.w	r8, r8, #1
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004e7e:	1a5b      	subs	r3, r3, r1
 8004e80:	4543      	cmp	r3, r8
 8004e82:	dcf0      	bgt.n	8004e66 <_printf_float+0x42e>
 8004e84:	e6fd      	b.n	8004c82 <_printf_float+0x24a>
 8004e86:	f04f 0800 	mov.w	r8, #0
 8004e8a:	f104 0919 	add.w	r9, r4, #25
 8004e8e:	e7f4      	b.n	8004e7a <_printf_float+0x442>

08004e90 <_printf_common>:
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	4616      	mov	r6, r2
 8004e96:	4698      	mov	r8, r3
 8004e98:	688a      	ldr	r2, [r1, #8]
 8004e9a:	690b      	ldr	r3, [r1, #16]
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	bfb8      	it	lt
 8004ea2:	4613      	movlt	r3, r2
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004eaa:	460c      	mov	r4, r1
 8004eac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004eb0:	b10a      	cbz	r2, 8004eb6 <_printf_common+0x26>
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	0699      	lsls	r1, r3, #26
 8004eba:	bf42      	ittt	mi
 8004ebc:	6833      	ldrmi	r3, [r6, #0]
 8004ebe:	3302      	addmi	r3, #2
 8004ec0:	6033      	strmi	r3, [r6, #0]
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	f015 0506 	ands.w	r5, r5, #6
 8004ec8:	d106      	bne.n	8004ed8 <_printf_common+0x48>
 8004eca:	f104 0a19 	add.w	sl, r4, #25
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	6832      	ldr	r2, [r6, #0]
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	42ab      	cmp	r3, r5
 8004ed6:	dc2b      	bgt.n	8004f30 <_printf_common+0xa0>
 8004ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004edc:	6822      	ldr	r2, [r4, #0]
 8004ede:	3b00      	subs	r3, #0
 8004ee0:	bf18      	it	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	0692      	lsls	r2, r2, #26
 8004ee6:	d430      	bmi.n	8004f4a <_printf_common+0xba>
 8004ee8:	4641      	mov	r1, r8
 8004eea:	4638      	mov	r0, r7
 8004eec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ef0:	47c8      	blx	r9
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d023      	beq.n	8004f3e <_printf_common+0xae>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	6922      	ldr	r2, [r4, #16]
 8004efa:	f003 0306 	and.w	r3, r3, #6
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	bf14      	ite	ne
 8004f02:	2500      	movne	r5, #0
 8004f04:	6833      	ldreq	r3, [r6, #0]
 8004f06:	f04f 0600 	mov.w	r6, #0
 8004f0a:	bf08      	it	eq
 8004f0c:	68e5      	ldreq	r5, [r4, #12]
 8004f0e:	f104 041a 	add.w	r4, r4, #26
 8004f12:	bf08      	it	eq
 8004f14:	1aed      	subeq	r5, r5, r3
 8004f16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f1a:	bf08      	it	eq
 8004f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f20:	4293      	cmp	r3, r2
 8004f22:	bfc4      	itt	gt
 8004f24:	1a9b      	subgt	r3, r3, r2
 8004f26:	18ed      	addgt	r5, r5, r3
 8004f28:	42b5      	cmp	r5, r6
 8004f2a:	d11a      	bne.n	8004f62 <_printf_common+0xd2>
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	e008      	b.n	8004f42 <_printf_common+0xb2>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4652      	mov	r2, sl
 8004f34:	4641      	mov	r1, r8
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c8      	blx	r9
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d103      	bne.n	8004f46 <_printf_common+0xb6>
 8004f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f46:	3501      	adds	r5, #1
 8004f48:	e7c1      	b.n	8004ece <_printf_common+0x3e>
 8004f4a:	2030      	movs	r0, #48	@ 0x30
 8004f4c:	18e1      	adds	r1, r4, r3
 8004f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f58:	4422      	add	r2, r4
 8004f5a:	3302      	adds	r3, #2
 8004f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f60:	e7c2      	b.n	8004ee8 <_printf_common+0x58>
 8004f62:	2301      	movs	r3, #1
 8004f64:	4622      	mov	r2, r4
 8004f66:	4641      	mov	r1, r8
 8004f68:	4638      	mov	r0, r7
 8004f6a:	47c8      	blx	r9
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d0e6      	beq.n	8004f3e <_printf_common+0xae>
 8004f70:	3601      	adds	r6, #1
 8004f72:	e7d9      	b.n	8004f28 <_printf_common+0x98>

08004f74 <_printf_i>:
 8004f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f78:	7e0f      	ldrb	r7, [r1, #24]
 8004f7a:	4691      	mov	r9, r2
 8004f7c:	2f78      	cmp	r7, #120	@ 0x78
 8004f7e:	4680      	mov	r8, r0
 8004f80:	460c      	mov	r4, r1
 8004f82:	469a      	mov	sl, r3
 8004f84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f8a:	d807      	bhi.n	8004f9c <_printf_i+0x28>
 8004f8c:	2f62      	cmp	r7, #98	@ 0x62
 8004f8e:	d80a      	bhi.n	8004fa6 <_printf_i+0x32>
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	f000 80d1 	beq.w	8005138 <_printf_i+0x1c4>
 8004f96:	2f58      	cmp	r7, #88	@ 0x58
 8004f98:	f000 80b8 	beq.w	800510c <_printf_i+0x198>
 8004f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fa4:	e03a      	b.n	800501c <_printf_i+0xa8>
 8004fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004faa:	2b15      	cmp	r3, #21
 8004fac:	d8f6      	bhi.n	8004f9c <_printf_i+0x28>
 8004fae:	a101      	add	r1, pc, #4	@ (adr r1, 8004fb4 <_printf_i+0x40>)
 8004fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fb4:	0800500d 	.word	0x0800500d
 8004fb8:	08005021 	.word	0x08005021
 8004fbc:	08004f9d 	.word	0x08004f9d
 8004fc0:	08004f9d 	.word	0x08004f9d
 8004fc4:	08004f9d 	.word	0x08004f9d
 8004fc8:	08004f9d 	.word	0x08004f9d
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08004f9d 	.word	0x08004f9d
 8004fd4:	08004f9d 	.word	0x08004f9d
 8004fd8:	08004f9d 	.word	0x08004f9d
 8004fdc:	08004f9d 	.word	0x08004f9d
 8004fe0:	0800511f 	.word	0x0800511f
 8004fe4:	0800504b 	.word	0x0800504b
 8004fe8:	080050d9 	.word	0x080050d9
 8004fec:	08004f9d 	.word	0x08004f9d
 8004ff0:	08004f9d 	.word	0x08004f9d
 8004ff4:	08005141 	.word	0x08005141
 8004ff8:	08004f9d 	.word	0x08004f9d
 8004ffc:	0800504b 	.word	0x0800504b
 8005000:	08004f9d 	.word	0x08004f9d
 8005004:	08004f9d 	.word	0x08004f9d
 8005008:	080050e1 	.word	0x080050e1
 800500c:	6833      	ldr	r3, [r6, #0]
 800500e:	1d1a      	adds	r2, r3, #4
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6032      	str	r2, [r6, #0]
 8005014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800501c:	2301      	movs	r3, #1
 800501e:	e09c      	b.n	800515a <_printf_i+0x1e6>
 8005020:	6833      	ldr	r3, [r6, #0]
 8005022:	6820      	ldr	r0, [r4, #0]
 8005024:	1d19      	adds	r1, r3, #4
 8005026:	6031      	str	r1, [r6, #0]
 8005028:	0606      	lsls	r6, r0, #24
 800502a:	d501      	bpl.n	8005030 <_printf_i+0xbc>
 800502c:	681d      	ldr	r5, [r3, #0]
 800502e:	e003      	b.n	8005038 <_printf_i+0xc4>
 8005030:	0645      	lsls	r5, r0, #25
 8005032:	d5fb      	bpl.n	800502c <_printf_i+0xb8>
 8005034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005038:	2d00      	cmp	r5, #0
 800503a:	da03      	bge.n	8005044 <_printf_i+0xd0>
 800503c:	232d      	movs	r3, #45	@ 0x2d
 800503e:	426d      	negs	r5, r5
 8005040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005044:	230a      	movs	r3, #10
 8005046:	4858      	ldr	r0, [pc, #352]	@ (80051a8 <_printf_i+0x234>)
 8005048:	e011      	b.n	800506e <_printf_i+0xfa>
 800504a:	6821      	ldr	r1, [r4, #0]
 800504c:	6833      	ldr	r3, [r6, #0]
 800504e:	0608      	lsls	r0, r1, #24
 8005050:	f853 5b04 	ldr.w	r5, [r3], #4
 8005054:	d402      	bmi.n	800505c <_printf_i+0xe8>
 8005056:	0649      	lsls	r1, r1, #25
 8005058:	bf48      	it	mi
 800505a:	b2ad      	uxthmi	r5, r5
 800505c:	2f6f      	cmp	r7, #111	@ 0x6f
 800505e:	6033      	str	r3, [r6, #0]
 8005060:	bf14      	ite	ne
 8005062:	230a      	movne	r3, #10
 8005064:	2308      	moveq	r3, #8
 8005066:	4850      	ldr	r0, [pc, #320]	@ (80051a8 <_printf_i+0x234>)
 8005068:	2100      	movs	r1, #0
 800506a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800506e:	6866      	ldr	r6, [r4, #4]
 8005070:	2e00      	cmp	r6, #0
 8005072:	60a6      	str	r6, [r4, #8]
 8005074:	db05      	blt.n	8005082 <_printf_i+0x10e>
 8005076:	6821      	ldr	r1, [r4, #0]
 8005078:	432e      	orrs	r6, r5
 800507a:	f021 0104 	bic.w	r1, r1, #4
 800507e:	6021      	str	r1, [r4, #0]
 8005080:	d04b      	beq.n	800511a <_printf_i+0x1a6>
 8005082:	4616      	mov	r6, r2
 8005084:	fbb5 f1f3 	udiv	r1, r5, r3
 8005088:	fb03 5711 	mls	r7, r3, r1, r5
 800508c:	5dc7      	ldrb	r7, [r0, r7]
 800508e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005092:	462f      	mov	r7, r5
 8005094:	42bb      	cmp	r3, r7
 8005096:	460d      	mov	r5, r1
 8005098:	d9f4      	bls.n	8005084 <_printf_i+0x110>
 800509a:	2b08      	cmp	r3, #8
 800509c:	d10b      	bne.n	80050b6 <_printf_i+0x142>
 800509e:	6823      	ldr	r3, [r4, #0]
 80050a0:	07df      	lsls	r7, r3, #31
 80050a2:	d508      	bpl.n	80050b6 <_printf_i+0x142>
 80050a4:	6923      	ldr	r3, [r4, #16]
 80050a6:	6861      	ldr	r1, [r4, #4]
 80050a8:	4299      	cmp	r1, r3
 80050aa:	bfde      	ittt	le
 80050ac:	2330      	movle	r3, #48	@ 0x30
 80050ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050b6:	1b92      	subs	r2, r2, r6
 80050b8:	6122      	str	r2, [r4, #16]
 80050ba:	464b      	mov	r3, r9
 80050bc:	4621      	mov	r1, r4
 80050be:	4640      	mov	r0, r8
 80050c0:	f8cd a000 	str.w	sl, [sp]
 80050c4:	aa03      	add	r2, sp, #12
 80050c6:	f7ff fee3 	bl	8004e90 <_printf_common>
 80050ca:	3001      	adds	r0, #1
 80050cc:	d14a      	bne.n	8005164 <_printf_i+0x1f0>
 80050ce:	f04f 30ff 	mov.w	r0, #4294967295
 80050d2:	b004      	add	sp, #16
 80050d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	f043 0320 	orr.w	r3, r3, #32
 80050de:	6023      	str	r3, [r4, #0]
 80050e0:	2778      	movs	r7, #120	@ 0x78
 80050e2:	4832      	ldr	r0, [pc, #200]	@ (80051ac <_printf_i+0x238>)
 80050e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	6831      	ldr	r1, [r6, #0]
 80050ec:	061f      	lsls	r7, r3, #24
 80050ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80050f2:	d402      	bmi.n	80050fa <_printf_i+0x186>
 80050f4:	065f      	lsls	r7, r3, #25
 80050f6:	bf48      	it	mi
 80050f8:	b2ad      	uxthmi	r5, r5
 80050fa:	6031      	str	r1, [r6, #0]
 80050fc:	07d9      	lsls	r1, r3, #31
 80050fe:	bf44      	itt	mi
 8005100:	f043 0320 	orrmi.w	r3, r3, #32
 8005104:	6023      	strmi	r3, [r4, #0]
 8005106:	b11d      	cbz	r5, 8005110 <_printf_i+0x19c>
 8005108:	2310      	movs	r3, #16
 800510a:	e7ad      	b.n	8005068 <_printf_i+0xf4>
 800510c:	4826      	ldr	r0, [pc, #152]	@ (80051a8 <_printf_i+0x234>)
 800510e:	e7e9      	b.n	80050e4 <_printf_i+0x170>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	f023 0320 	bic.w	r3, r3, #32
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	e7f6      	b.n	8005108 <_printf_i+0x194>
 800511a:	4616      	mov	r6, r2
 800511c:	e7bd      	b.n	800509a <_printf_i+0x126>
 800511e:	6833      	ldr	r3, [r6, #0]
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1d18      	adds	r0, r3, #4
 8005124:	6961      	ldr	r1, [r4, #20]
 8005126:	6030      	str	r0, [r6, #0]
 8005128:	062e      	lsls	r6, r5, #24
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	d501      	bpl.n	8005132 <_printf_i+0x1be>
 800512e:	6019      	str	r1, [r3, #0]
 8005130:	e002      	b.n	8005138 <_printf_i+0x1c4>
 8005132:	0668      	lsls	r0, r5, #25
 8005134:	d5fb      	bpl.n	800512e <_printf_i+0x1ba>
 8005136:	8019      	strh	r1, [r3, #0]
 8005138:	2300      	movs	r3, #0
 800513a:	4616      	mov	r6, r2
 800513c:	6123      	str	r3, [r4, #16]
 800513e:	e7bc      	b.n	80050ba <_printf_i+0x146>
 8005140:	6833      	ldr	r3, [r6, #0]
 8005142:	2100      	movs	r1, #0
 8005144:	1d1a      	adds	r2, r3, #4
 8005146:	6032      	str	r2, [r6, #0]
 8005148:	681e      	ldr	r6, [r3, #0]
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	4630      	mov	r0, r6
 800514e:	f000 fab8 	bl	80056c2 <memchr>
 8005152:	b108      	cbz	r0, 8005158 <_printf_i+0x1e4>
 8005154:	1b80      	subs	r0, r0, r6
 8005156:	6060      	str	r0, [r4, #4]
 8005158:	6863      	ldr	r3, [r4, #4]
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	2300      	movs	r3, #0
 800515e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005162:	e7aa      	b.n	80050ba <_printf_i+0x146>
 8005164:	4632      	mov	r2, r6
 8005166:	4649      	mov	r1, r9
 8005168:	4640      	mov	r0, r8
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	47d0      	blx	sl
 800516e:	3001      	adds	r0, #1
 8005170:	d0ad      	beq.n	80050ce <_printf_i+0x15a>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	079b      	lsls	r3, r3, #30
 8005176:	d413      	bmi.n	80051a0 <_printf_i+0x22c>
 8005178:	68e0      	ldr	r0, [r4, #12]
 800517a:	9b03      	ldr	r3, [sp, #12]
 800517c:	4298      	cmp	r0, r3
 800517e:	bfb8      	it	lt
 8005180:	4618      	movlt	r0, r3
 8005182:	e7a6      	b.n	80050d2 <_printf_i+0x15e>
 8005184:	2301      	movs	r3, #1
 8005186:	4632      	mov	r2, r6
 8005188:	4649      	mov	r1, r9
 800518a:	4640      	mov	r0, r8
 800518c:	47d0      	blx	sl
 800518e:	3001      	adds	r0, #1
 8005190:	d09d      	beq.n	80050ce <_printf_i+0x15a>
 8005192:	3501      	adds	r5, #1
 8005194:	68e3      	ldr	r3, [r4, #12]
 8005196:	9903      	ldr	r1, [sp, #12]
 8005198:	1a5b      	subs	r3, r3, r1
 800519a:	42ab      	cmp	r3, r5
 800519c:	dcf2      	bgt.n	8005184 <_printf_i+0x210>
 800519e:	e7eb      	b.n	8005178 <_printf_i+0x204>
 80051a0:	2500      	movs	r5, #0
 80051a2:	f104 0619 	add.w	r6, r4, #25
 80051a6:	e7f5      	b.n	8005194 <_printf_i+0x220>
 80051a8:	08007c82 	.word	0x08007c82
 80051ac:	08007c93 	.word	0x08007c93

080051b0 <std>:
 80051b0:	2300      	movs	r3, #0
 80051b2:	b510      	push	{r4, lr}
 80051b4:	4604      	mov	r4, r0
 80051b6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051be:	6083      	str	r3, [r0, #8]
 80051c0:	8181      	strh	r1, [r0, #12]
 80051c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80051c4:	81c2      	strh	r2, [r0, #14]
 80051c6:	6183      	str	r3, [r0, #24]
 80051c8:	4619      	mov	r1, r3
 80051ca:	2208      	movs	r2, #8
 80051cc:	305c      	adds	r0, #92	@ 0x5c
 80051ce:	f000 f9f9 	bl	80055c4 <memset>
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <std+0x58>)
 80051d4:	6224      	str	r4, [r4, #32]
 80051d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80051d8:	4b0c      	ldr	r3, [pc, #48]	@ (800520c <std+0x5c>)
 80051da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005210 <std+0x60>)
 80051de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <std+0x64>)
 80051e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80051e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <std+0x68>)
 80051e6:	429c      	cmp	r4, r3
 80051e8:	d006      	beq.n	80051f8 <std+0x48>
 80051ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051ee:	4294      	cmp	r4, r2
 80051f0:	d002      	beq.n	80051f8 <std+0x48>
 80051f2:	33d0      	adds	r3, #208	@ 0xd0
 80051f4:	429c      	cmp	r4, r3
 80051f6:	d105      	bne.n	8005204 <std+0x54>
 80051f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005200:	f000 ba5c 	b.w	80056bc <__retarget_lock_init_recursive>
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	08005415 	.word	0x08005415
 800520c:	08005437 	.word	0x08005437
 8005210:	0800546f 	.word	0x0800546f
 8005214:	08005493 	.word	0x08005493
 8005218:	20000320 	.word	0x20000320

0800521c <stdio_exit_handler>:
 800521c:	4a02      	ldr	r2, [pc, #8]	@ (8005228 <stdio_exit_handler+0xc>)
 800521e:	4903      	ldr	r1, [pc, #12]	@ (800522c <stdio_exit_handler+0x10>)
 8005220:	4803      	ldr	r0, [pc, #12]	@ (8005230 <stdio_exit_handler+0x14>)
 8005222:	f000 b869 	b.w	80052f8 <_fwalk_sglue>
 8005226:	bf00      	nop
 8005228:	2000000c 	.word	0x2000000c
 800522c:	08007009 	.word	0x08007009
 8005230:	2000001c 	.word	0x2000001c

08005234 <cleanup_stdio>:
 8005234:	6841      	ldr	r1, [r0, #4]
 8005236:	4b0c      	ldr	r3, [pc, #48]	@ (8005268 <cleanup_stdio+0x34>)
 8005238:	b510      	push	{r4, lr}
 800523a:	4299      	cmp	r1, r3
 800523c:	4604      	mov	r4, r0
 800523e:	d001      	beq.n	8005244 <cleanup_stdio+0x10>
 8005240:	f001 fee2 	bl	8007008 <_fflush_r>
 8005244:	68a1      	ldr	r1, [r4, #8]
 8005246:	4b09      	ldr	r3, [pc, #36]	@ (800526c <cleanup_stdio+0x38>)
 8005248:	4299      	cmp	r1, r3
 800524a:	d002      	beq.n	8005252 <cleanup_stdio+0x1e>
 800524c:	4620      	mov	r0, r4
 800524e:	f001 fedb 	bl	8007008 <_fflush_r>
 8005252:	68e1      	ldr	r1, [r4, #12]
 8005254:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <cleanup_stdio+0x3c>)
 8005256:	4299      	cmp	r1, r3
 8005258:	d004      	beq.n	8005264 <cleanup_stdio+0x30>
 800525a:	4620      	mov	r0, r4
 800525c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005260:	f001 bed2 	b.w	8007008 <_fflush_r>
 8005264:	bd10      	pop	{r4, pc}
 8005266:	bf00      	nop
 8005268:	20000320 	.word	0x20000320
 800526c:	20000388 	.word	0x20000388
 8005270:	200003f0 	.word	0x200003f0

08005274 <global_stdio_init.part.0>:
 8005274:	b510      	push	{r4, lr}
 8005276:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <global_stdio_init.part.0+0x30>)
 8005278:	4c0b      	ldr	r4, [pc, #44]	@ (80052a8 <global_stdio_init.part.0+0x34>)
 800527a:	4a0c      	ldr	r2, [pc, #48]	@ (80052ac <global_stdio_init.part.0+0x38>)
 800527c:	4620      	mov	r0, r4
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	2104      	movs	r1, #4
 8005282:	2200      	movs	r2, #0
 8005284:	f7ff ff94 	bl	80051b0 <std>
 8005288:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800528c:	2201      	movs	r2, #1
 800528e:	2109      	movs	r1, #9
 8005290:	f7ff ff8e 	bl	80051b0 <std>
 8005294:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005298:	2202      	movs	r2, #2
 800529a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800529e:	2112      	movs	r1, #18
 80052a0:	f7ff bf86 	b.w	80051b0 <std>
 80052a4:	20000458 	.word	0x20000458
 80052a8:	20000320 	.word	0x20000320
 80052ac:	0800521d 	.word	0x0800521d

080052b0 <__sfp_lock_acquire>:
 80052b0:	4801      	ldr	r0, [pc, #4]	@ (80052b8 <__sfp_lock_acquire+0x8>)
 80052b2:	f000 ba04 	b.w	80056be <__retarget_lock_acquire_recursive>
 80052b6:	bf00      	nop
 80052b8:	20000461 	.word	0x20000461

080052bc <__sfp_lock_release>:
 80052bc:	4801      	ldr	r0, [pc, #4]	@ (80052c4 <__sfp_lock_release+0x8>)
 80052be:	f000 b9ff 	b.w	80056c0 <__retarget_lock_release_recursive>
 80052c2:	bf00      	nop
 80052c4:	20000461 	.word	0x20000461

080052c8 <__sinit>:
 80052c8:	b510      	push	{r4, lr}
 80052ca:	4604      	mov	r4, r0
 80052cc:	f7ff fff0 	bl	80052b0 <__sfp_lock_acquire>
 80052d0:	6a23      	ldr	r3, [r4, #32]
 80052d2:	b11b      	cbz	r3, 80052dc <__sinit+0x14>
 80052d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d8:	f7ff bff0 	b.w	80052bc <__sfp_lock_release>
 80052dc:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <__sinit+0x28>)
 80052de:	6223      	str	r3, [r4, #32]
 80052e0:	4b04      	ldr	r3, [pc, #16]	@ (80052f4 <__sinit+0x2c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f5      	bne.n	80052d4 <__sinit+0xc>
 80052e8:	f7ff ffc4 	bl	8005274 <global_stdio_init.part.0>
 80052ec:	e7f2      	b.n	80052d4 <__sinit+0xc>
 80052ee:	bf00      	nop
 80052f0:	08005235 	.word	0x08005235
 80052f4:	20000458 	.word	0x20000458

080052f8 <_fwalk_sglue>:
 80052f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052fc:	4607      	mov	r7, r0
 80052fe:	4688      	mov	r8, r1
 8005300:	4614      	mov	r4, r2
 8005302:	2600      	movs	r6, #0
 8005304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005308:	f1b9 0901 	subs.w	r9, r9, #1
 800530c:	d505      	bpl.n	800531a <_fwalk_sglue+0x22>
 800530e:	6824      	ldr	r4, [r4, #0]
 8005310:	2c00      	cmp	r4, #0
 8005312:	d1f7      	bne.n	8005304 <_fwalk_sglue+0xc>
 8005314:	4630      	mov	r0, r6
 8005316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800531a:	89ab      	ldrh	r3, [r5, #12]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d907      	bls.n	8005330 <_fwalk_sglue+0x38>
 8005320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005324:	3301      	adds	r3, #1
 8005326:	d003      	beq.n	8005330 <_fwalk_sglue+0x38>
 8005328:	4629      	mov	r1, r5
 800532a:	4638      	mov	r0, r7
 800532c:	47c0      	blx	r8
 800532e:	4306      	orrs	r6, r0
 8005330:	3568      	adds	r5, #104	@ 0x68
 8005332:	e7e9      	b.n	8005308 <_fwalk_sglue+0x10>

08005334 <iprintf>:
 8005334:	b40f      	push	{r0, r1, r2, r3}
 8005336:	b507      	push	{r0, r1, r2, lr}
 8005338:	4906      	ldr	r1, [pc, #24]	@ (8005354 <iprintf+0x20>)
 800533a:	ab04      	add	r3, sp, #16
 800533c:	6808      	ldr	r0, [r1, #0]
 800533e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005342:	6881      	ldr	r1, [r0, #8]
 8005344:	9301      	str	r3, [sp, #4]
 8005346:	f001 fcc7 	bl	8006cd8 <_vfiprintf_r>
 800534a:	b003      	add	sp, #12
 800534c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005350:	b004      	add	sp, #16
 8005352:	4770      	bx	lr
 8005354:	20000018 	.word	0x20000018

08005358 <_puts_r>:
 8005358:	6a03      	ldr	r3, [r0, #32]
 800535a:	b570      	push	{r4, r5, r6, lr}
 800535c:	4605      	mov	r5, r0
 800535e:	460e      	mov	r6, r1
 8005360:	6884      	ldr	r4, [r0, #8]
 8005362:	b90b      	cbnz	r3, 8005368 <_puts_r+0x10>
 8005364:	f7ff ffb0 	bl	80052c8 <__sinit>
 8005368:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800536a:	07db      	lsls	r3, r3, #31
 800536c:	d405      	bmi.n	800537a <_puts_r+0x22>
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	0598      	lsls	r0, r3, #22
 8005372:	d402      	bmi.n	800537a <_puts_r+0x22>
 8005374:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005376:	f000 f9a2 	bl	80056be <__retarget_lock_acquire_recursive>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	0719      	lsls	r1, r3, #28
 800537e:	d502      	bpl.n	8005386 <_puts_r+0x2e>
 8005380:	6923      	ldr	r3, [r4, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d135      	bne.n	80053f2 <_puts_r+0x9a>
 8005386:	4621      	mov	r1, r4
 8005388:	4628      	mov	r0, r5
 800538a:	f000 f8c5 	bl	8005518 <__swsetup_r>
 800538e:	b380      	cbz	r0, 80053f2 <_puts_r+0x9a>
 8005390:	f04f 35ff 	mov.w	r5, #4294967295
 8005394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005396:	07da      	lsls	r2, r3, #31
 8005398:	d405      	bmi.n	80053a6 <_puts_r+0x4e>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	059b      	lsls	r3, r3, #22
 800539e:	d402      	bmi.n	80053a6 <_puts_r+0x4e>
 80053a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053a2:	f000 f98d 	bl	80056c0 <__retarget_lock_release_recursive>
 80053a6:	4628      	mov	r0, r5
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	da04      	bge.n	80053b8 <_puts_r+0x60>
 80053ae:	69a2      	ldr	r2, [r4, #24]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	dc17      	bgt.n	80053e4 <_puts_r+0x8c>
 80053b4:	290a      	cmp	r1, #10
 80053b6:	d015      	beq.n	80053e4 <_puts_r+0x8c>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	6022      	str	r2, [r4, #0]
 80053be:	7019      	strb	r1, [r3, #0]
 80053c0:	68a3      	ldr	r3, [r4, #8]
 80053c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053c6:	3b01      	subs	r3, #1
 80053c8:	60a3      	str	r3, [r4, #8]
 80053ca:	2900      	cmp	r1, #0
 80053cc:	d1ed      	bne.n	80053aa <_puts_r+0x52>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	da11      	bge.n	80053f6 <_puts_r+0x9e>
 80053d2:	4622      	mov	r2, r4
 80053d4:	210a      	movs	r1, #10
 80053d6:	4628      	mov	r0, r5
 80053d8:	f000 f85f 	bl	800549a <__swbuf_r>
 80053dc:	3001      	adds	r0, #1
 80053de:	d0d7      	beq.n	8005390 <_puts_r+0x38>
 80053e0:	250a      	movs	r5, #10
 80053e2:	e7d7      	b.n	8005394 <_puts_r+0x3c>
 80053e4:	4622      	mov	r2, r4
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f857 	bl	800549a <__swbuf_r>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d1e7      	bne.n	80053c0 <_puts_r+0x68>
 80053f0:	e7ce      	b.n	8005390 <_puts_r+0x38>
 80053f2:	3e01      	subs	r6, #1
 80053f4:	e7e4      	b.n	80053c0 <_puts_r+0x68>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	6022      	str	r2, [r4, #0]
 80053fc:	220a      	movs	r2, #10
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	e7ee      	b.n	80053e0 <_puts_r+0x88>
	...

08005404 <puts>:
 8005404:	4b02      	ldr	r3, [pc, #8]	@ (8005410 <puts+0xc>)
 8005406:	4601      	mov	r1, r0
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	f7ff bfa5 	b.w	8005358 <_puts_r>
 800540e:	bf00      	nop
 8005410:	20000018 	.word	0x20000018

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f900 	bl	8005620 <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	4605      	mov	r5, r0
 8005440:	05db      	lsls	r3, r3, #23
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	2302      	movs	r3, #2
 800544a:	2200      	movs	r2, #0
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f8d4 	bl	80055fc <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	4632      	mov	r2, r6
 8005458:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	4628      	mov	r0, r5
 8005460:	463b      	mov	r3, r7
 8005462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b8eb 	b.w	8005644 <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f8c1 	bl	80055fc <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b8a1 	b.w	80055dc <_close_r>

0800549a <__swbuf_r>:
 800549a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549c:	460e      	mov	r6, r1
 800549e:	4614      	mov	r4, r2
 80054a0:	4605      	mov	r5, r0
 80054a2:	b118      	cbz	r0, 80054ac <__swbuf_r+0x12>
 80054a4:	6a03      	ldr	r3, [r0, #32]
 80054a6:	b90b      	cbnz	r3, 80054ac <__swbuf_r+0x12>
 80054a8:	f7ff ff0e 	bl	80052c8 <__sinit>
 80054ac:	69a3      	ldr	r3, [r4, #24]
 80054ae:	60a3      	str	r3, [r4, #8]
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	071a      	lsls	r2, r3, #28
 80054b4:	d501      	bpl.n	80054ba <__swbuf_r+0x20>
 80054b6:	6923      	ldr	r3, [r4, #16]
 80054b8:	b943      	cbnz	r3, 80054cc <__swbuf_r+0x32>
 80054ba:	4621      	mov	r1, r4
 80054bc:	4628      	mov	r0, r5
 80054be:	f000 f82b 	bl	8005518 <__swsetup_r>
 80054c2:	b118      	cbz	r0, 80054cc <__swbuf_r+0x32>
 80054c4:	f04f 37ff 	mov.w	r7, #4294967295
 80054c8:	4638      	mov	r0, r7
 80054ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	6922      	ldr	r2, [r4, #16]
 80054d0:	b2f6      	uxtb	r6, r6
 80054d2:	1a98      	subs	r0, r3, r2
 80054d4:	6963      	ldr	r3, [r4, #20]
 80054d6:	4637      	mov	r7, r6
 80054d8:	4283      	cmp	r3, r0
 80054da:	dc05      	bgt.n	80054e8 <__swbuf_r+0x4e>
 80054dc:	4621      	mov	r1, r4
 80054de:	4628      	mov	r0, r5
 80054e0:	f001 fd92 	bl	8007008 <_fflush_r>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d1ed      	bne.n	80054c4 <__swbuf_r+0x2a>
 80054e8:	68a3      	ldr	r3, [r4, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	60a3      	str	r3, [r4, #8]
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	6022      	str	r2, [r4, #0]
 80054f4:	701e      	strb	r6, [r3, #0]
 80054f6:	6962      	ldr	r2, [r4, #20]
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d004      	beq.n	8005508 <__swbuf_r+0x6e>
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	07db      	lsls	r3, r3, #31
 8005502:	d5e1      	bpl.n	80054c8 <__swbuf_r+0x2e>
 8005504:	2e0a      	cmp	r6, #10
 8005506:	d1df      	bne.n	80054c8 <__swbuf_r+0x2e>
 8005508:	4621      	mov	r1, r4
 800550a:	4628      	mov	r0, r5
 800550c:	f001 fd7c 	bl	8007008 <_fflush_r>
 8005510:	2800      	cmp	r0, #0
 8005512:	d0d9      	beq.n	80054c8 <__swbuf_r+0x2e>
 8005514:	e7d6      	b.n	80054c4 <__swbuf_r+0x2a>
	...

08005518 <__swsetup_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4b29      	ldr	r3, [pc, #164]	@ (80055c0 <__swsetup_r+0xa8>)
 800551c:	4605      	mov	r5, r0
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	460c      	mov	r4, r1
 8005522:	b118      	cbz	r0, 800552c <__swsetup_r+0x14>
 8005524:	6a03      	ldr	r3, [r0, #32]
 8005526:	b90b      	cbnz	r3, 800552c <__swsetup_r+0x14>
 8005528:	f7ff fece 	bl	80052c8 <__sinit>
 800552c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005530:	0719      	lsls	r1, r3, #28
 8005532:	d422      	bmi.n	800557a <__swsetup_r+0x62>
 8005534:	06da      	lsls	r2, r3, #27
 8005536:	d407      	bmi.n	8005548 <__swsetup_r+0x30>
 8005538:	2209      	movs	r2, #9
 800553a:	602a      	str	r2, [r5, #0]
 800553c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	e033      	b.n	80055b0 <__swsetup_r+0x98>
 8005548:	0758      	lsls	r0, r3, #29
 800554a:	d512      	bpl.n	8005572 <__swsetup_r+0x5a>
 800554c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800554e:	b141      	cbz	r1, 8005562 <__swsetup_r+0x4a>
 8005550:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005554:	4299      	cmp	r1, r3
 8005556:	d002      	beq.n	800555e <__swsetup_r+0x46>
 8005558:	4628      	mov	r0, r5
 800555a:	f000 ff1d 	bl	8006398 <_free_r>
 800555e:	2300      	movs	r3, #0
 8005560:	6363      	str	r3, [r4, #52]	@ 0x34
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005568:	81a3      	strh	r3, [r4, #12]
 800556a:	2300      	movs	r3, #0
 800556c:	6063      	str	r3, [r4, #4]
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	f043 0308 	orr.w	r3, r3, #8
 8005578:	81a3      	strh	r3, [r4, #12]
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	b94b      	cbnz	r3, 8005592 <__swsetup_r+0x7a>
 800557e:	89a3      	ldrh	r3, [r4, #12]
 8005580:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005588:	d003      	beq.n	8005592 <__swsetup_r+0x7a>
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f001 fd88 	bl	80070a2 <__smakebuf_r>
 8005592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005596:	f013 0201 	ands.w	r2, r3, #1
 800559a:	d00a      	beq.n	80055b2 <__swsetup_r+0x9a>
 800559c:	2200      	movs	r2, #0
 800559e:	60a2      	str	r2, [r4, #8]
 80055a0:	6962      	ldr	r2, [r4, #20]
 80055a2:	4252      	negs	r2, r2
 80055a4:	61a2      	str	r2, [r4, #24]
 80055a6:	6922      	ldr	r2, [r4, #16]
 80055a8:	b942      	cbnz	r2, 80055bc <__swsetup_r+0xa4>
 80055aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055ae:	d1c5      	bne.n	800553c <__swsetup_r+0x24>
 80055b0:	bd38      	pop	{r3, r4, r5, pc}
 80055b2:	0799      	lsls	r1, r3, #30
 80055b4:	bf58      	it	pl
 80055b6:	6962      	ldrpl	r2, [r4, #20]
 80055b8:	60a2      	str	r2, [r4, #8]
 80055ba:	e7f4      	b.n	80055a6 <__swsetup_r+0x8e>
 80055bc:	2000      	movs	r0, #0
 80055be:	e7f7      	b.n	80055b0 <__swsetup_r+0x98>
 80055c0:	20000018 	.word	0x20000018

080055c4 <memset>:
 80055c4:	4603      	mov	r3, r0
 80055c6:	4402      	add	r2, r0
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d100      	bne.n	80055ce <memset+0xa>
 80055cc:	4770      	bx	lr
 80055ce:	f803 1b01 	strb.w	r1, [r3], #1
 80055d2:	e7f9      	b.n	80055c8 <memset+0x4>

080055d4 <_localeconv_r>:
 80055d4:	4800      	ldr	r0, [pc, #0]	@ (80055d8 <_localeconv_r+0x4>)
 80055d6:	4770      	bx	lr
 80055d8:	20000158 	.word	0x20000158

080055dc <_close_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	2300      	movs	r3, #0
 80055e0:	4d05      	ldr	r5, [pc, #20]	@ (80055f8 <_close_r+0x1c>)
 80055e2:	4604      	mov	r4, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	602b      	str	r3, [r5, #0]
 80055e8:	f7fc fb27 	bl	8001c3a <_close>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_close_r+0x1a>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_close_r+0x1a>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	2000045c 	.word	0x2000045c

080055fc <_lseek_r>:
 80055fc:	b538      	push	{r3, r4, r5, lr}
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	4611      	mov	r1, r2
 8005604:	2200      	movs	r2, #0
 8005606:	4d05      	ldr	r5, [pc, #20]	@ (800561c <_lseek_r+0x20>)
 8005608:	602a      	str	r2, [r5, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	f7fc fb39 	bl	8001c82 <_lseek>
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d102      	bne.n	800561a <_lseek_r+0x1e>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	b103      	cbz	r3, 800561a <_lseek_r+0x1e>
 8005618:	6023      	str	r3, [r4, #0]
 800561a:	bd38      	pop	{r3, r4, r5, pc}
 800561c:	2000045c 	.word	0x2000045c

08005620 <_read_r>:
 8005620:	b538      	push	{r3, r4, r5, lr}
 8005622:	4604      	mov	r4, r0
 8005624:	4608      	mov	r0, r1
 8005626:	4611      	mov	r1, r2
 8005628:	2200      	movs	r2, #0
 800562a:	4d05      	ldr	r5, [pc, #20]	@ (8005640 <_read_r+0x20>)
 800562c:	602a      	str	r2, [r5, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fc fae6 	bl	8001c00 <_read>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_read_r+0x1e>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_read_r+0x1e>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	2000045c 	.word	0x2000045c

08005644 <_write_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4604      	mov	r4, r0
 8005648:	4608      	mov	r0, r1
 800564a:	4611      	mov	r1, r2
 800564c:	2200      	movs	r2, #0
 800564e:	4d05      	ldr	r5, [pc, #20]	@ (8005664 <_write_r+0x20>)
 8005650:	602a      	str	r2, [r5, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f7fb fc7e 	bl	8000f54 <_write>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_write_r+0x1e>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_write_r+0x1e>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	2000045c 	.word	0x2000045c

08005668 <__errno>:
 8005668:	4b01      	ldr	r3, [pc, #4]	@ (8005670 <__errno+0x8>)
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000018 	.word	0x20000018

08005674 <__libc_init_array>:
 8005674:	b570      	push	{r4, r5, r6, lr}
 8005676:	2600      	movs	r6, #0
 8005678:	4d0c      	ldr	r5, [pc, #48]	@ (80056ac <__libc_init_array+0x38>)
 800567a:	4c0d      	ldr	r4, [pc, #52]	@ (80056b0 <__libc_init_array+0x3c>)
 800567c:	1b64      	subs	r4, r4, r5
 800567e:	10a4      	asrs	r4, r4, #2
 8005680:	42a6      	cmp	r6, r4
 8005682:	d109      	bne.n	8005698 <__libc_init_array+0x24>
 8005684:	f001 fe3a 	bl	80072fc <_init>
 8005688:	2600      	movs	r6, #0
 800568a:	4d0a      	ldr	r5, [pc, #40]	@ (80056b4 <__libc_init_array+0x40>)
 800568c:	4c0a      	ldr	r4, [pc, #40]	@ (80056b8 <__libc_init_array+0x44>)
 800568e:	1b64      	subs	r4, r4, r5
 8005690:	10a4      	asrs	r4, r4, #2
 8005692:	42a6      	cmp	r6, r4
 8005694:	d105      	bne.n	80056a2 <__libc_init_array+0x2e>
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	f855 3b04 	ldr.w	r3, [r5], #4
 800569c:	4798      	blx	r3
 800569e:	3601      	adds	r6, #1
 80056a0:	e7ee      	b.n	8005680 <__libc_init_array+0xc>
 80056a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a6:	4798      	blx	r3
 80056a8:	3601      	adds	r6, #1
 80056aa:	e7f2      	b.n	8005692 <__libc_init_array+0x1e>
 80056ac:	08007fec 	.word	0x08007fec
 80056b0:	08007fec 	.word	0x08007fec
 80056b4:	08007fec 	.word	0x08007fec
 80056b8:	08007ff0 	.word	0x08007ff0

080056bc <__retarget_lock_init_recursive>:
 80056bc:	4770      	bx	lr

080056be <__retarget_lock_acquire_recursive>:
 80056be:	4770      	bx	lr

080056c0 <__retarget_lock_release_recursive>:
 80056c0:	4770      	bx	lr

080056c2 <memchr>:
 80056c2:	4603      	mov	r3, r0
 80056c4:	b510      	push	{r4, lr}
 80056c6:	b2c9      	uxtb	r1, r1
 80056c8:	4402      	add	r2, r0
 80056ca:	4293      	cmp	r3, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	d101      	bne.n	80056d4 <memchr+0x12>
 80056d0:	2000      	movs	r0, #0
 80056d2:	e003      	b.n	80056dc <memchr+0x1a>
 80056d4:	7804      	ldrb	r4, [r0, #0]
 80056d6:	3301      	adds	r3, #1
 80056d8:	428c      	cmp	r4, r1
 80056da:	d1f6      	bne.n	80056ca <memchr+0x8>
 80056dc:	bd10      	pop	{r4, pc}

080056de <quorem>:
 80056de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e2:	6903      	ldr	r3, [r0, #16]
 80056e4:	690c      	ldr	r4, [r1, #16]
 80056e6:	4607      	mov	r7, r0
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	db7e      	blt.n	80057ea <quorem+0x10c>
 80056ec:	3c01      	subs	r4, #1
 80056ee:	00a3      	lsls	r3, r4, #2
 80056f0:	f100 0514 	add.w	r5, r0, #20
 80056f4:	f101 0814 	add.w	r8, r1, #20
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005708:	3301      	adds	r3, #1
 800570a:	429a      	cmp	r2, r3
 800570c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005710:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005714:	d32e      	bcc.n	8005774 <quorem+0x96>
 8005716:	f04f 0a00 	mov.w	sl, #0
 800571a:	46c4      	mov	ip, r8
 800571c:	46ae      	mov	lr, r5
 800571e:	46d3      	mov	fp, sl
 8005720:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005724:	b298      	uxth	r0, r3
 8005726:	fb06 a000 	mla	r0, r6, r0, sl
 800572a:	0c1b      	lsrs	r3, r3, #16
 800572c:	0c02      	lsrs	r2, r0, #16
 800572e:	fb06 2303 	mla	r3, r6, r3, r2
 8005732:	f8de 2000 	ldr.w	r2, [lr]
 8005736:	b280      	uxth	r0, r0
 8005738:	b292      	uxth	r2, r2
 800573a:	1a12      	subs	r2, r2, r0
 800573c:	445a      	add	r2, fp
 800573e:	f8de 0000 	ldr.w	r0, [lr]
 8005742:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005746:	b29b      	uxth	r3, r3
 8005748:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800574c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005750:	b292      	uxth	r2, r2
 8005752:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005756:	45e1      	cmp	r9, ip
 8005758:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800575c:	f84e 2b04 	str.w	r2, [lr], #4
 8005760:	d2de      	bcs.n	8005720 <quorem+0x42>
 8005762:	9b00      	ldr	r3, [sp, #0]
 8005764:	58eb      	ldr	r3, [r5, r3]
 8005766:	b92b      	cbnz	r3, 8005774 <quorem+0x96>
 8005768:	9b01      	ldr	r3, [sp, #4]
 800576a:	3b04      	subs	r3, #4
 800576c:	429d      	cmp	r5, r3
 800576e:	461a      	mov	r2, r3
 8005770:	d32f      	bcc.n	80057d2 <quorem+0xf4>
 8005772:	613c      	str	r4, [r7, #16]
 8005774:	4638      	mov	r0, r7
 8005776:	f001 f97f 	bl	8006a78 <__mcmp>
 800577a:	2800      	cmp	r0, #0
 800577c:	db25      	blt.n	80057ca <quorem+0xec>
 800577e:	4629      	mov	r1, r5
 8005780:	2000      	movs	r0, #0
 8005782:	f858 2b04 	ldr.w	r2, [r8], #4
 8005786:	f8d1 c000 	ldr.w	ip, [r1]
 800578a:	fa1f fe82 	uxth.w	lr, r2
 800578e:	fa1f f38c 	uxth.w	r3, ip
 8005792:	eba3 030e 	sub.w	r3, r3, lr
 8005796:	4403      	add	r3, r0
 8005798:	0c12      	lsrs	r2, r2, #16
 800579a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800579e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057a8:	45c1      	cmp	r9, r8
 80057aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057ae:	f841 3b04 	str.w	r3, [r1], #4
 80057b2:	d2e6      	bcs.n	8005782 <quorem+0xa4>
 80057b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057bc:	b922      	cbnz	r2, 80057c8 <quorem+0xea>
 80057be:	3b04      	subs	r3, #4
 80057c0:	429d      	cmp	r5, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	d30b      	bcc.n	80057de <quorem+0x100>
 80057c6:	613c      	str	r4, [r7, #16]
 80057c8:	3601      	adds	r6, #1
 80057ca:	4630      	mov	r0, r6
 80057cc:	b003      	add	sp, #12
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	d1cb      	bne.n	8005772 <quorem+0x94>
 80057da:	3c01      	subs	r4, #1
 80057dc:	e7c6      	b.n	800576c <quorem+0x8e>
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	3b04      	subs	r3, #4
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d1ef      	bne.n	80057c6 <quorem+0xe8>
 80057e6:	3c01      	subs	r4, #1
 80057e8:	e7ea      	b.n	80057c0 <quorem+0xe2>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e7ee      	b.n	80057cc <quorem+0xee>
	...

080057f0 <_dtoa_r>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	4614      	mov	r4, r2
 80057f6:	461d      	mov	r5, r3
 80057f8:	69c7      	ldr	r7, [r0, #28]
 80057fa:	b097      	sub	sp, #92	@ 0x5c
 80057fc:	4681      	mov	r9, r0
 80057fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005802:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005804:	b97f      	cbnz	r7, 8005826 <_dtoa_r+0x36>
 8005806:	2010      	movs	r0, #16
 8005808:	f000 fe0e 	bl	8006428 <malloc>
 800580c:	4602      	mov	r2, r0
 800580e:	f8c9 001c 	str.w	r0, [r9, #28]
 8005812:	b920      	cbnz	r0, 800581e <_dtoa_r+0x2e>
 8005814:	21ef      	movs	r1, #239	@ 0xef
 8005816:	4bac      	ldr	r3, [pc, #688]	@ (8005ac8 <_dtoa_r+0x2d8>)
 8005818:	48ac      	ldr	r0, [pc, #688]	@ (8005acc <_dtoa_r+0x2dc>)
 800581a:	f001 fcbf 	bl	800719c <__assert_func>
 800581e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005822:	6007      	str	r7, [r0, #0]
 8005824:	60c7      	str	r7, [r0, #12]
 8005826:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	b159      	cbz	r1, 8005846 <_dtoa_r+0x56>
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	2301      	movs	r3, #1
 8005832:	4093      	lsls	r3, r2
 8005834:	604a      	str	r2, [r1, #4]
 8005836:	608b      	str	r3, [r1, #8]
 8005838:	4648      	mov	r0, r9
 800583a:	f000 feeb 	bl	8006614 <_Bfree>
 800583e:	2200      	movs	r2, #0
 8005840:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	1e2b      	subs	r3, r5, #0
 8005848:	bfaf      	iteee	ge
 800584a:	2300      	movge	r3, #0
 800584c:	2201      	movlt	r2, #1
 800584e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005852:	9307      	strlt	r3, [sp, #28]
 8005854:	bfa8      	it	ge
 8005856:	6033      	strge	r3, [r6, #0]
 8005858:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800585c:	4b9c      	ldr	r3, [pc, #624]	@ (8005ad0 <_dtoa_r+0x2e0>)
 800585e:	bfb8      	it	lt
 8005860:	6032      	strlt	r2, [r6, #0]
 8005862:	ea33 0308 	bics.w	r3, r3, r8
 8005866:	d112      	bne.n	800588e <_dtoa_r+0x9e>
 8005868:	f242 730f 	movw	r3, #9999	@ 0x270f
 800586c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005874:	4323      	orrs	r3, r4
 8005876:	f000 855e 	beq.w	8006336 <_dtoa_r+0xb46>
 800587a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800587c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005ad4 <_dtoa_r+0x2e4>
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8560 	beq.w	8006346 <_dtoa_r+0xb56>
 8005886:	f10a 0303 	add.w	r3, sl, #3
 800588a:	f000 bd5a 	b.w	8006342 <_dtoa_r+0xb52>
 800588e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005892:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800589a:	2200      	movs	r2, #0
 800589c:	2300      	movs	r3, #0
 800589e:	f7fb f8ef 	bl	8000a80 <__aeabi_dcmpeq>
 80058a2:	4607      	mov	r7, r0
 80058a4:	b158      	cbz	r0, 80058be <_dtoa_r+0xce>
 80058a6:	2301      	movs	r3, #1
 80058a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058ae:	b113      	cbz	r3, 80058b6 <_dtoa_r+0xc6>
 80058b0:	4b89      	ldr	r3, [pc, #548]	@ (8005ad8 <_dtoa_r+0x2e8>)
 80058b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005adc <_dtoa_r+0x2ec>
 80058ba:	f000 bd44 	b.w	8006346 <_dtoa_r+0xb56>
 80058be:	ab14      	add	r3, sp, #80	@ 0x50
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	ab15      	add	r3, sp, #84	@ 0x54
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	4648      	mov	r0, r9
 80058c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80058cc:	f001 f984 	bl	8006bd8 <__d2b>
 80058d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80058d4:	9003      	str	r0, [sp, #12]
 80058d6:	2e00      	cmp	r6, #0
 80058d8:	d078      	beq.n	80059cc <_dtoa_r+0x1dc>
 80058da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058e0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80058e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058e8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80058ec:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80058f0:	9712      	str	r7, [sp, #72]	@ 0x48
 80058f2:	4619      	mov	r1, r3
 80058f4:	2200      	movs	r2, #0
 80058f6:	4b7a      	ldr	r3, [pc, #488]	@ (8005ae0 <_dtoa_r+0x2f0>)
 80058f8:	f7fa fca2 	bl	8000240 <__aeabi_dsub>
 80058fc:	a36c      	add	r3, pc, #432	@ (adr r3, 8005ab0 <_dtoa_r+0x2c0>)
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f7fa fe55 	bl	80005b0 <__aeabi_dmul>
 8005906:	a36c      	add	r3, pc, #432	@ (adr r3, 8005ab8 <_dtoa_r+0x2c8>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fc9a 	bl	8000244 <__adddf3>
 8005910:	4604      	mov	r4, r0
 8005912:	4630      	mov	r0, r6
 8005914:	460d      	mov	r5, r1
 8005916:	f7fa fde1 	bl	80004dc <__aeabi_i2d>
 800591a:	a369      	add	r3, pc, #420	@ (adr r3, 8005ac0 <_dtoa_r+0x2d0>)
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f7fa fe46 	bl	80005b0 <__aeabi_dmul>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4620      	mov	r0, r4
 800592a:	4629      	mov	r1, r5
 800592c:	f7fa fc8a 	bl	8000244 <__adddf3>
 8005930:	4604      	mov	r4, r0
 8005932:	460d      	mov	r5, r1
 8005934:	f7fb f8ec 	bl	8000b10 <__aeabi_d2iz>
 8005938:	2200      	movs	r2, #0
 800593a:	4607      	mov	r7, r0
 800593c:	2300      	movs	r3, #0
 800593e:	4620      	mov	r0, r4
 8005940:	4629      	mov	r1, r5
 8005942:	f7fb f8a7 	bl	8000a94 <__aeabi_dcmplt>
 8005946:	b140      	cbz	r0, 800595a <_dtoa_r+0x16a>
 8005948:	4638      	mov	r0, r7
 800594a:	f7fa fdc7 	bl	80004dc <__aeabi_i2d>
 800594e:	4622      	mov	r2, r4
 8005950:	462b      	mov	r3, r5
 8005952:	f7fb f895 	bl	8000a80 <__aeabi_dcmpeq>
 8005956:	b900      	cbnz	r0, 800595a <_dtoa_r+0x16a>
 8005958:	3f01      	subs	r7, #1
 800595a:	2f16      	cmp	r7, #22
 800595c:	d854      	bhi.n	8005a08 <_dtoa_r+0x218>
 800595e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005962:	4b60      	ldr	r3, [pc, #384]	@ (8005ae4 <_dtoa_r+0x2f4>)
 8005964:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	f7fb f892 	bl	8000a94 <__aeabi_dcmplt>
 8005970:	2800      	cmp	r0, #0
 8005972:	d04b      	beq.n	8005a0c <_dtoa_r+0x21c>
 8005974:	2300      	movs	r3, #0
 8005976:	3f01      	subs	r7, #1
 8005978:	930f      	str	r3, [sp, #60]	@ 0x3c
 800597a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800597c:	1b9b      	subs	r3, r3, r6
 800597e:	1e5a      	subs	r2, r3, #1
 8005980:	bf49      	itett	mi
 8005982:	f1c3 0301 	rsbmi	r3, r3, #1
 8005986:	2300      	movpl	r3, #0
 8005988:	9304      	strmi	r3, [sp, #16]
 800598a:	2300      	movmi	r3, #0
 800598c:	9209      	str	r2, [sp, #36]	@ 0x24
 800598e:	bf54      	ite	pl
 8005990:	9304      	strpl	r3, [sp, #16]
 8005992:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005994:	2f00      	cmp	r7, #0
 8005996:	db3b      	blt.n	8005a10 <_dtoa_r+0x220>
 8005998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800599a:	970e      	str	r7, [sp, #56]	@ 0x38
 800599c:	443b      	add	r3, r7
 800599e:	9309      	str	r3, [sp, #36]	@ 0x24
 80059a0:	2300      	movs	r3, #0
 80059a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80059a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059a6:	2b09      	cmp	r3, #9
 80059a8:	d865      	bhi.n	8005a76 <_dtoa_r+0x286>
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	bfc4      	itt	gt
 80059ae:	3b04      	subgt	r3, #4
 80059b0:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80059b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059b4:	bfc8      	it	gt
 80059b6:	2400      	movgt	r4, #0
 80059b8:	f1a3 0302 	sub.w	r3, r3, #2
 80059bc:	bfd8      	it	le
 80059be:	2401      	movle	r4, #1
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d864      	bhi.n	8005a8e <_dtoa_r+0x29e>
 80059c4:	e8df f003 	tbb	[pc, r3]
 80059c8:	2c385553 	.word	0x2c385553
 80059cc:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80059d0:	441e      	add	r6, r3
 80059d2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	bfc1      	itttt	gt
 80059da:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80059de:	fa08 f803 	lslgt.w	r8, r8, r3
 80059e2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059e6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059ea:	bfd6      	itet	le
 80059ec:	f1c3 0320 	rsble	r3, r3, #32
 80059f0:	ea48 0003 	orrgt.w	r0, r8, r3
 80059f4:	fa04 f003 	lslle.w	r0, r4, r3
 80059f8:	f7fa fd60 	bl	80004bc <__aeabi_ui2d>
 80059fc:	2201      	movs	r2, #1
 80059fe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005a02:	3e01      	subs	r6, #1
 8005a04:	9212      	str	r2, [sp, #72]	@ 0x48
 8005a06:	e774      	b.n	80058f2 <_dtoa_r+0x102>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e7b5      	b.n	8005978 <_dtoa_r+0x188>
 8005a0c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005a0e:	e7b4      	b.n	800597a <_dtoa_r+0x18a>
 8005a10:	9b04      	ldr	r3, [sp, #16]
 8005a12:	1bdb      	subs	r3, r3, r7
 8005a14:	9304      	str	r3, [sp, #16]
 8005a16:	427b      	negs	r3, r7
 8005a18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a1e:	e7c1      	b.n	80059a4 <_dtoa_r+0x1b4>
 8005a20:	2301      	movs	r3, #1
 8005a22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a26:	eb07 0b03 	add.w	fp, r7, r3
 8005a2a:	f10b 0301 	add.w	r3, fp, #1
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	9308      	str	r3, [sp, #32]
 8005a32:	bfb8      	it	lt
 8005a34:	2301      	movlt	r3, #1
 8005a36:	e006      	b.n	8005a46 <_dtoa_r+0x256>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	dd28      	ble.n	8005a94 <_dtoa_r+0x2a4>
 8005a42:	469b      	mov	fp, r3
 8005a44:	9308      	str	r3, [sp, #32]
 8005a46:	2100      	movs	r1, #0
 8005a48:	2204      	movs	r2, #4
 8005a4a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005a4e:	f102 0514 	add.w	r5, r2, #20
 8005a52:	429d      	cmp	r5, r3
 8005a54:	d926      	bls.n	8005aa4 <_dtoa_r+0x2b4>
 8005a56:	6041      	str	r1, [r0, #4]
 8005a58:	4648      	mov	r0, r9
 8005a5a:	f000 fd9b 	bl	8006594 <_Balloc>
 8005a5e:	4682      	mov	sl, r0
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d143      	bne.n	8005aec <_dtoa_r+0x2fc>
 8005a64:	4602      	mov	r2, r0
 8005a66:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ae8 <_dtoa_r+0x2f8>)
 8005a6c:	e6d4      	b.n	8005818 <_dtoa_r+0x28>
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e7e3      	b.n	8005a3a <_dtoa_r+0x24a>
 8005a72:	2300      	movs	r3, #0
 8005a74:	e7d5      	b.n	8005a22 <_dtoa_r+0x232>
 8005a76:	2401      	movs	r4, #1
 8005a78:	2300      	movs	r3, #0
 8005a7a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a7c:	9320      	str	r3, [sp, #128]	@ 0x80
 8005a7e:	f04f 3bff 	mov.w	fp, #4294967295
 8005a82:	2200      	movs	r2, #0
 8005a84:	2312      	movs	r3, #18
 8005a86:	f8cd b020 	str.w	fp, [sp, #32]
 8005a8a:	9221      	str	r2, [sp, #132]	@ 0x84
 8005a8c:	e7db      	b.n	8005a46 <_dtoa_r+0x256>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a92:	e7f4      	b.n	8005a7e <_dtoa_r+0x28e>
 8005a94:	f04f 0b01 	mov.w	fp, #1
 8005a98:	465b      	mov	r3, fp
 8005a9a:	f8cd b020 	str.w	fp, [sp, #32]
 8005a9e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005aa2:	e7d0      	b.n	8005a46 <_dtoa_r+0x256>
 8005aa4:	3101      	adds	r1, #1
 8005aa6:	0052      	lsls	r2, r2, #1
 8005aa8:	e7d1      	b.n	8005a4e <_dtoa_r+0x25e>
 8005aaa:	bf00      	nop
 8005aac:	f3af 8000 	nop.w
 8005ab0:	636f4361 	.word	0x636f4361
 8005ab4:	3fd287a7 	.word	0x3fd287a7
 8005ab8:	8b60c8b3 	.word	0x8b60c8b3
 8005abc:	3fc68a28 	.word	0x3fc68a28
 8005ac0:	509f79fb 	.word	0x509f79fb
 8005ac4:	3fd34413 	.word	0x3fd34413
 8005ac8:	08007cb1 	.word	0x08007cb1
 8005acc:	08007cc8 	.word	0x08007cc8
 8005ad0:	7ff00000 	.word	0x7ff00000
 8005ad4:	08007cad 	.word	0x08007cad
 8005ad8:	08007c81 	.word	0x08007c81
 8005adc:	08007c80 	.word	0x08007c80
 8005ae0:	3ff80000 	.word	0x3ff80000
 8005ae4:	08007e18 	.word	0x08007e18
 8005ae8:	08007d20 	.word	0x08007d20
 8005aec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005af0:	6018      	str	r0, [r3, #0]
 8005af2:	9b08      	ldr	r3, [sp, #32]
 8005af4:	2b0e      	cmp	r3, #14
 8005af6:	f200 80a1 	bhi.w	8005c3c <_dtoa_r+0x44c>
 8005afa:	2c00      	cmp	r4, #0
 8005afc:	f000 809e 	beq.w	8005c3c <_dtoa_r+0x44c>
 8005b00:	2f00      	cmp	r7, #0
 8005b02:	dd33      	ble.n	8005b6c <_dtoa_r+0x37c>
 8005b04:	4b9c      	ldr	r3, [pc, #624]	@ (8005d78 <_dtoa_r+0x588>)
 8005b06:	f007 020f 	and.w	r2, r7, #15
 8005b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b0e:	05f8      	lsls	r0, r7, #23
 8005b10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b14:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005b18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b1c:	d516      	bpl.n	8005b4c <_dtoa_r+0x35c>
 8005b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b22:	4b96      	ldr	r3, [pc, #600]	@ (8005d7c <_dtoa_r+0x58c>)
 8005b24:	2603      	movs	r6, #3
 8005b26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b2a:	f7fa fe6b 	bl	8000804 <__aeabi_ddiv>
 8005b2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b32:	f004 040f 	and.w	r4, r4, #15
 8005b36:	4d91      	ldr	r5, [pc, #580]	@ (8005d7c <_dtoa_r+0x58c>)
 8005b38:	b954      	cbnz	r4, 8005b50 <_dtoa_r+0x360>
 8005b3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b42:	f7fa fe5f 	bl	8000804 <__aeabi_ddiv>
 8005b46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b4a:	e028      	b.n	8005b9e <_dtoa_r+0x3ae>
 8005b4c:	2602      	movs	r6, #2
 8005b4e:	e7f2      	b.n	8005b36 <_dtoa_r+0x346>
 8005b50:	07e1      	lsls	r1, r4, #31
 8005b52:	d508      	bpl.n	8005b66 <_dtoa_r+0x376>
 8005b54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b5c:	f7fa fd28 	bl	80005b0 <__aeabi_dmul>
 8005b60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b64:	3601      	adds	r6, #1
 8005b66:	1064      	asrs	r4, r4, #1
 8005b68:	3508      	adds	r5, #8
 8005b6a:	e7e5      	b.n	8005b38 <_dtoa_r+0x348>
 8005b6c:	f000 80af 	beq.w	8005cce <_dtoa_r+0x4de>
 8005b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b74:	427c      	negs	r4, r7
 8005b76:	4b80      	ldr	r3, [pc, #512]	@ (8005d78 <_dtoa_r+0x588>)
 8005b78:	f004 020f 	and.w	r2, r4, #15
 8005b7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b84:	f7fa fd14 	bl	80005b0 <__aeabi_dmul>
 8005b88:	2602      	movs	r6, #2
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b90:	4d7a      	ldr	r5, [pc, #488]	@ (8005d7c <_dtoa_r+0x58c>)
 8005b92:	1124      	asrs	r4, r4, #4
 8005b94:	2c00      	cmp	r4, #0
 8005b96:	f040 808f 	bne.w	8005cb8 <_dtoa_r+0x4c8>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1d3      	bne.n	8005b46 <_dtoa_r+0x356>
 8005b9e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005ba2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8094 	beq.w	8005cd2 <_dtoa_r+0x4e2>
 8005baa:	2200      	movs	r2, #0
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	4b73      	ldr	r3, [pc, #460]	@ (8005d80 <_dtoa_r+0x590>)
 8005bb2:	f7fa ff6f 	bl	8000a94 <__aeabi_dcmplt>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	f000 808b 	beq.w	8005cd2 <_dtoa_r+0x4e2>
 8005bbc:	9b08      	ldr	r3, [sp, #32]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 8087 	beq.w	8005cd2 <_dtoa_r+0x4e2>
 8005bc4:	f1bb 0f00 	cmp.w	fp, #0
 8005bc8:	dd34      	ble.n	8005c34 <_dtoa_r+0x444>
 8005bca:	4620      	mov	r0, r4
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4629      	mov	r1, r5
 8005bd0:	4b6c      	ldr	r3, [pc, #432]	@ (8005d84 <_dtoa_r+0x594>)
 8005bd2:	f7fa fced 	bl	80005b0 <__aeabi_dmul>
 8005bd6:	465c      	mov	r4, fp
 8005bd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005bdc:	f107 38ff 	add.w	r8, r7, #4294967295
 8005be0:	3601      	adds	r6, #1
 8005be2:	4630      	mov	r0, r6
 8005be4:	f7fa fc7a 	bl	80004dc <__aeabi_i2d>
 8005be8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bec:	f7fa fce0 	bl	80005b0 <__aeabi_dmul>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4b65      	ldr	r3, [pc, #404]	@ (8005d88 <_dtoa_r+0x598>)
 8005bf4:	f7fa fb26 	bl	8000244 <__adddf3>
 8005bf8:	4605      	mov	r5, r0
 8005bfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005bfe:	2c00      	cmp	r4, #0
 8005c00:	d16a      	bne.n	8005cd8 <_dtoa_r+0x4e8>
 8005c02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c06:	2200      	movs	r2, #0
 8005c08:	4b60      	ldr	r3, [pc, #384]	@ (8005d8c <_dtoa_r+0x59c>)
 8005c0a:	f7fa fb19 	bl	8000240 <__aeabi_dsub>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c16:	462a      	mov	r2, r5
 8005c18:	4633      	mov	r3, r6
 8005c1a:	f7fa ff59 	bl	8000ad0 <__aeabi_dcmpgt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f040 8298 	bne.w	8006154 <_dtoa_r+0x964>
 8005c24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c28:	462a      	mov	r2, r5
 8005c2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c2e:	f7fa ff31 	bl	8000a94 <__aeabi_dcmplt>
 8005c32:	bb38      	cbnz	r0, 8005c84 <_dtoa_r+0x494>
 8005c34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c38:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f2c0 8157 	blt.w	8005ef2 <_dtoa_r+0x702>
 8005c44:	2f0e      	cmp	r7, #14
 8005c46:	f300 8154 	bgt.w	8005ef2 <_dtoa_r+0x702>
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d78 <_dtoa_r+0x588>)
 8005c4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c54:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f280 80e5 	bge.w	8005e2a <_dtoa_r+0x63a>
 8005c60:	9b08      	ldr	r3, [sp, #32]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	f300 80e1 	bgt.w	8005e2a <_dtoa_r+0x63a>
 8005c68:	d10c      	bne.n	8005c84 <_dtoa_r+0x494>
 8005c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4b46      	ldr	r3, [pc, #280]	@ (8005d8c <_dtoa_r+0x59c>)
 8005c72:	f7fa fc9d 	bl	80005b0 <__aeabi_dmul>
 8005c76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c7a:	f7fa ff1f 	bl	8000abc <__aeabi_dcmpge>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	f000 8266 	beq.w	8006150 <_dtoa_r+0x960>
 8005c84:	2400      	movs	r4, #0
 8005c86:	4625      	mov	r5, r4
 8005c88:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c8a:	4656      	mov	r6, sl
 8005c8c:	ea6f 0803 	mvn.w	r8, r3
 8005c90:	2700      	movs	r7, #0
 8005c92:	4621      	mov	r1, r4
 8005c94:	4648      	mov	r0, r9
 8005c96:	f000 fcbd 	bl	8006614 <_Bfree>
 8005c9a:	2d00      	cmp	r5, #0
 8005c9c:	f000 80bd 	beq.w	8005e1a <_dtoa_r+0x62a>
 8005ca0:	b12f      	cbz	r7, 8005cae <_dtoa_r+0x4be>
 8005ca2:	42af      	cmp	r7, r5
 8005ca4:	d003      	beq.n	8005cae <_dtoa_r+0x4be>
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	4648      	mov	r0, r9
 8005caa:	f000 fcb3 	bl	8006614 <_Bfree>
 8005cae:	4629      	mov	r1, r5
 8005cb0:	4648      	mov	r0, r9
 8005cb2:	f000 fcaf 	bl	8006614 <_Bfree>
 8005cb6:	e0b0      	b.n	8005e1a <_dtoa_r+0x62a>
 8005cb8:	07e2      	lsls	r2, r4, #31
 8005cba:	d505      	bpl.n	8005cc8 <_dtoa_r+0x4d8>
 8005cbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cc0:	f7fa fc76 	bl	80005b0 <__aeabi_dmul>
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	1064      	asrs	r4, r4, #1
 8005cca:	3508      	adds	r5, #8
 8005ccc:	e762      	b.n	8005b94 <_dtoa_r+0x3a4>
 8005cce:	2602      	movs	r6, #2
 8005cd0:	e765      	b.n	8005b9e <_dtoa_r+0x3ae>
 8005cd2:	46b8      	mov	r8, r7
 8005cd4:	9c08      	ldr	r4, [sp, #32]
 8005cd6:	e784      	b.n	8005be2 <_dtoa_r+0x3f2>
 8005cd8:	4b27      	ldr	r3, [pc, #156]	@ (8005d78 <_dtoa_r+0x588>)
 8005cda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005cdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ce0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ce4:	4454      	add	r4, sl
 8005ce6:	2900      	cmp	r1, #0
 8005ce8:	d054      	beq.n	8005d94 <_dtoa_r+0x5a4>
 8005cea:	2000      	movs	r0, #0
 8005cec:	4928      	ldr	r1, [pc, #160]	@ (8005d90 <_dtoa_r+0x5a0>)
 8005cee:	f7fa fd89 	bl	8000804 <__aeabi_ddiv>
 8005cf2:	4633      	mov	r3, r6
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	f7fa faa3 	bl	8000240 <__aeabi_dsub>
 8005cfa:	4656      	mov	r6, sl
 8005cfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d04:	f7fa ff04 	bl	8000b10 <__aeabi_d2iz>
 8005d08:	4605      	mov	r5, r0
 8005d0a:	f7fa fbe7 	bl	80004dc <__aeabi_i2d>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d16:	f7fa fa93 	bl	8000240 <__aeabi_dsub>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	3530      	adds	r5, #48	@ 0x30
 8005d20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d28:	f806 5b01 	strb.w	r5, [r6], #1
 8005d2c:	f7fa feb2 	bl	8000a94 <__aeabi_dcmplt>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d172      	bne.n	8005e1a <_dtoa_r+0x62a>
 8005d34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d38:	2000      	movs	r0, #0
 8005d3a:	4911      	ldr	r1, [pc, #68]	@ (8005d80 <_dtoa_r+0x590>)
 8005d3c:	f7fa fa80 	bl	8000240 <__aeabi_dsub>
 8005d40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d44:	f7fa fea6 	bl	8000a94 <__aeabi_dcmplt>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	f040 80b4 	bne.w	8005eb6 <_dtoa_r+0x6c6>
 8005d4e:	42a6      	cmp	r6, r4
 8005d50:	f43f af70 	beq.w	8005c34 <_dtoa_r+0x444>
 8005d54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d84 <_dtoa_r+0x594>)
 8005d5c:	f7fa fc28 	bl	80005b0 <__aeabi_dmul>
 8005d60:	2200      	movs	r2, #0
 8005d62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d6a:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <_dtoa_r+0x594>)
 8005d6c:	f7fa fc20 	bl	80005b0 <__aeabi_dmul>
 8005d70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d74:	e7c4      	b.n	8005d00 <_dtoa_r+0x510>
 8005d76:	bf00      	nop
 8005d78:	08007e18 	.word	0x08007e18
 8005d7c:	08007df0 	.word	0x08007df0
 8005d80:	3ff00000 	.word	0x3ff00000
 8005d84:	40240000 	.word	0x40240000
 8005d88:	401c0000 	.word	0x401c0000
 8005d8c:	40140000 	.word	0x40140000
 8005d90:	3fe00000 	.word	0x3fe00000
 8005d94:	4631      	mov	r1, r6
 8005d96:	4628      	mov	r0, r5
 8005d98:	f7fa fc0a 	bl	80005b0 <__aeabi_dmul>
 8005d9c:	4656      	mov	r6, sl
 8005d9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005da2:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005da4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005da8:	f7fa feb2 	bl	8000b10 <__aeabi_d2iz>
 8005dac:	4605      	mov	r5, r0
 8005dae:	f7fa fb95 	bl	80004dc <__aeabi_i2d>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dba:	f7fa fa41 	bl	8000240 <__aeabi_dsub>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	3530      	adds	r5, #48	@ 0x30
 8005dc4:	f806 5b01 	strb.w	r5, [r6], #1
 8005dc8:	42a6      	cmp	r6, r4
 8005dca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	d124      	bne.n	8005e1e <_dtoa_r+0x62e>
 8005dd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005dd8:	4bae      	ldr	r3, [pc, #696]	@ (8006094 <_dtoa_r+0x8a4>)
 8005dda:	f7fa fa33 	bl	8000244 <__adddf3>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005de6:	f7fa fe73 	bl	8000ad0 <__aeabi_dcmpgt>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d163      	bne.n	8005eb6 <_dtoa_r+0x6c6>
 8005dee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005df2:	2000      	movs	r0, #0
 8005df4:	49a7      	ldr	r1, [pc, #668]	@ (8006094 <_dtoa_r+0x8a4>)
 8005df6:	f7fa fa23 	bl	8000240 <__aeabi_dsub>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e02:	f7fa fe47 	bl	8000a94 <__aeabi_dcmplt>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	f43f af14 	beq.w	8005c34 <_dtoa_r+0x444>
 8005e0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005e0e:	1e73      	subs	r3, r6, #1
 8005e10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e16:	2b30      	cmp	r3, #48	@ 0x30
 8005e18:	d0f8      	beq.n	8005e0c <_dtoa_r+0x61c>
 8005e1a:	4647      	mov	r7, r8
 8005e1c:	e03b      	b.n	8005e96 <_dtoa_r+0x6a6>
 8005e1e:	4b9e      	ldr	r3, [pc, #632]	@ (8006098 <_dtoa_r+0x8a8>)
 8005e20:	f7fa fbc6 	bl	80005b0 <__aeabi_dmul>
 8005e24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e28:	e7bc      	b.n	8005da4 <_dtoa_r+0x5b4>
 8005e2a:	4656      	mov	r6, sl
 8005e2c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005e30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e34:	4620      	mov	r0, r4
 8005e36:	4629      	mov	r1, r5
 8005e38:	f7fa fce4 	bl	8000804 <__aeabi_ddiv>
 8005e3c:	f7fa fe68 	bl	8000b10 <__aeabi_d2iz>
 8005e40:	4680      	mov	r8, r0
 8005e42:	f7fa fb4b 	bl	80004dc <__aeabi_i2d>
 8005e46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e4a:	f7fa fbb1 	bl	80005b0 <__aeabi_dmul>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	460b      	mov	r3, r1
 8005e52:	4620      	mov	r0, r4
 8005e54:	4629      	mov	r1, r5
 8005e56:	f7fa f9f3 	bl	8000240 <__aeabi_dsub>
 8005e5a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005e5e:	9d08      	ldr	r5, [sp, #32]
 8005e60:	f806 4b01 	strb.w	r4, [r6], #1
 8005e64:	eba6 040a 	sub.w	r4, r6, sl
 8005e68:	42a5      	cmp	r5, r4
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	d133      	bne.n	8005ed8 <_dtoa_r+0x6e8>
 8005e70:	f7fa f9e8 	bl	8000244 <__adddf3>
 8005e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e78:	4604      	mov	r4, r0
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	f7fa fe28 	bl	8000ad0 <__aeabi_dcmpgt>
 8005e80:	b9c0      	cbnz	r0, 8005eb4 <_dtoa_r+0x6c4>
 8005e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e86:	4620      	mov	r0, r4
 8005e88:	4629      	mov	r1, r5
 8005e8a:	f7fa fdf9 	bl	8000a80 <__aeabi_dcmpeq>
 8005e8e:	b110      	cbz	r0, 8005e96 <_dtoa_r+0x6a6>
 8005e90:	f018 0f01 	tst.w	r8, #1
 8005e94:	d10e      	bne.n	8005eb4 <_dtoa_r+0x6c4>
 8005e96:	4648      	mov	r0, r9
 8005e98:	9903      	ldr	r1, [sp, #12]
 8005e9a:	f000 fbbb 	bl	8006614 <_Bfree>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	7033      	strb	r3, [r6, #0]
 8005ea2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005ea4:	3701      	adds	r7, #1
 8005ea6:	601f      	str	r7, [r3, #0]
 8005ea8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 824b 	beq.w	8006346 <_dtoa_r+0xb56>
 8005eb0:	601e      	str	r6, [r3, #0]
 8005eb2:	e248      	b.n	8006346 <_dtoa_r+0xb56>
 8005eb4:	46b8      	mov	r8, r7
 8005eb6:	4633      	mov	r3, r6
 8005eb8:	461e      	mov	r6, r3
 8005eba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ebe:	2a39      	cmp	r2, #57	@ 0x39
 8005ec0:	d106      	bne.n	8005ed0 <_dtoa_r+0x6e0>
 8005ec2:	459a      	cmp	sl, r3
 8005ec4:	d1f8      	bne.n	8005eb8 <_dtoa_r+0x6c8>
 8005ec6:	2230      	movs	r2, #48	@ 0x30
 8005ec8:	f108 0801 	add.w	r8, r8, #1
 8005ecc:	f88a 2000 	strb.w	r2, [sl]
 8005ed0:	781a      	ldrb	r2, [r3, #0]
 8005ed2:	3201      	adds	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	e7a0      	b.n	8005e1a <_dtoa_r+0x62a>
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4b6f      	ldr	r3, [pc, #444]	@ (8006098 <_dtoa_r+0x8a8>)
 8005edc:	f7fa fb68 	bl	80005b0 <__aeabi_dmul>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	460d      	mov	r5, r1
 8005ee8:	f7fa fdca 	bl	8000a80 <__aeabi_dcmpeq>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d09f      	beq.n	8005e30 <_dtoa_r+0x640>
 8005ef0:	e7d1      	b.n	8005e96 <_dtoa_r+0x6a6>
 8005ef2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ef4:	2a00      	cmp	r2, #0
 8005ef6:	f000 80ea 	beq.w	80060ce <_dtoa_r+0x8de>
 8005efa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005efc:	2a01      	cmp	r2, #1
 8005efe:	f300 80cd 	bgt.w	800609c <_dtoa_r+0x8ac>
 8005f02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f04:	2a00      	cmp	r2, #0
 8005f06:	f000 80c1 	beq.w	800608c <_dtoa_r+0x89c>
 8005f0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f10:	9e04      	ldr	r6, [sp, #16]
 8005f12:	9a04      	ldr	r2, [sp, #16]
 8005f14:	2101      	movs	r1, #1
 8005f16:	441a      	add	r2, r3
 8005f18:	9204      	str	r2, [sp, #16]
 8005f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f1c:	4648      	mov	r0, r9
 8005f1e:	441a      	add	r2, r3
 8005f20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f22:	f000 fc2b 	bl	800677c <__i2b>
 8005f26:	4605      	mov	r5, r0
 8005f28:	b166      	cbz	r6, 8005f44 <_dtoa_r+0x754>
 8005f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	dd09      	ble.n	8005f44 <_dtoa_r+0x754>
 8005f30:	42b3      	cmp	r3, r6
 8005f32:	bfa8      	it	ge
 8005f34:	4633      	movge	r3, r6
 8005f36:	9a04      	ldr	r2, [sp, #16]
 8005f38:	1af6      	subs	r6, r6, r3
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	9204      	str	r2, [sp, #16]
 8005f3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f46:	b30b      	cbz	r3, 8005f8c <_dtoa_r+0x79c>
 8005f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80c6 	beq.w	80060dc <_dtoa_r+0x8ec>
 8005f50:	2c00      	cmp	r4, #0
 8005f52:	f000 80c0 	beq.w	80060d6 <_dtoa_r+0x8e6>
 8005f56:	4629      	mov	r1, r5
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4648      	mov	r0, r9
 8005f5c:	f000 fcc6 	bl	80068ec <__pow5mult>
 8005f60:	9a03      	ldr	r2, [sp, #12]
 8005f62:	4601      	mov	r1, r0
 8005f64:	4605      	mov	r5, r0
 8005f66:	4648      	mov	r0, r9
 8005f68:	f000 fc1e 	bl	80067a8 <__multiply>
 8005f6c:	9903      	ldr	r1, [sp, #12]
 8005f6e:	4680      	mov	r8, r0
 8005f70:	4648      	mov	r0, r9
 8005f72:	f000 fb4f 	bl	8006614 <_Bfree>
 8005f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f78:	1b1b      	subs	r3, r3, r4
 8005f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f7c:	f000 80b1 	beq.w	80060e2 <_dtoa_r+0x8f2>
 8005f80:	4641      	mov	r1, r8
 8005f82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f84:	4648      	mov	r0, r9
 8005f86:	f000 fcb1 	bl	80068ec <__pow5mult>
 8005f8a:	9003      	str	r0, [sp, #12]
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	4648      	mov	r0, r9
 8005f90:	f000 fbf4 	bl	800677c <__i2b>
 8005f94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f96:	4604      	mov	r4, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 81d8 	beq.w	800634e <_dtoa_r+0xb5e>
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4648      	mov	r0, r9
 8005fa4:	f000 fca2 	bl	80068ec <__pow5mult>
 8005fa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005faa:	4604      	mov	r4, r0
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	f300 809f 	bgt.w	80060f0 <_dtoa_r+0x900>
 8005fb2:	9b06      	ldr	r3, [sp, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 8097 	bne.w	80060e8 <_dtoa_r+0x8f8>
 8005fba:	9b07      	ldr	r3, [sp, #28]
 8005fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 8093 	bne.w	80060ec <_dtoa_r+0x8fc>
 8005fc6:	9b07      	ldr	r3, [sp, #28]
 8005fc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fcc:	0d1b      	lsrs	r3, r3, #20
 8005fce:	051b      	lsls	r3, r3, #20
 8005fd0:	b133      	cbz	r3, 8005fe0 <_dtoa_r+0x7f0>
 8005fd2:	9b04      	ldr	r3, [sp, #16]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	9304      	str	r3, [sp, #16]
 8005fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fda:	3301      	adds	r3, #1
 8005fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fde:	2301      	movs	r3, #1
 8005fe0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 81b8 	beq.w	800635a <_dtoa_r+0xb6a>
 8005fea:	6923      	ldr	r3, [r4, #16]
 8005fec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ff0:	6918      	ldr	r0, [r3, #16]
 8005ff2:	f000 fb77 	bl	80066e4 <__hi0bits>
 8005ff6:	f1c0 0020 	rsb	r0, r0, #32
 8005ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffc:	4418      	add	r0, r3
 8005ffe:	f010 001f 	ands.w	r0, r0, #31
 8006002:	f000 8082 	beq.w	800610a <_dtoa_r+0x91a>
 8006006:	f1c0 0320 	rsb	r3, r0, #32
 800600a:	2b04      	cmp	r3, #4
 800600c:	dd73      	ble.n	80060f6 <_dtoa_r+0x906>
 800600e:	9b04      	ldr	r3, [sp, #16]
 8006010:	f1c0 001c 	rsb	r0, r0, #28
 8006014:	4403      	add	r3, r0
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800601a:	4406      	add	r6, r0
 800601c:	4403      	add	r3, r0
 800601e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006020:	9b04      	ldr	r3, [sp, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	dd05      	ble.n	8006032 <_dtoa_r+0x842>
 8006026:	461a      	mov	r2, r3
 8006028:	4648      	mov	r0, r9
 800602a:	9903      	ldr	r1, [sp, #12]
 800602c:	f000 fcb8 	bl	80069a0 <__lshift>
 8006030:	9003      	str	r0, [sp, #12]
 8006032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006034:	2b00      	cmp	r3, #0
 8006036:	dd05      	ble.n	8006044 <_dtoa_r+0x854>
 8006038:	4621      	mov	r1, r4
 800603a:	461a      	mov	r2, r3
 800603c:	4648      	mov	r0, r9
 800603e:	f000 fcaf 	bl	80069a0 <__lshift>
 8006042:	4604      	mov	r4, r0
 8006044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d061      	beq.n	800610e <_dtoa_r+0x91e>
 800604a:	4621      	mov	r1, r4
 800604c:	9803      	ldr	r0, [sp, #12]
 800604e:	f000 fd13 	bl	8006a78 <__mcmp>
 8006052:	2800      	cmp	r0, #0
 8006054:	da5b      	bge.n	800610e <_dtoa_r+0x91e>
 8006056:	2300      	movs	r3, #0
 8006058:	220a      	movs	r2, #10
 800605a:	4648      	mov	r0, r9
 800605c:	9903      	ldr	r1, [sp, #12]
 800605e:	f000 fafb 	bl	8006658 <__multadd>
 8006062:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006064:	f107 38ff 	add.w	r8, r7, #4294967295
 8006068:	9003      	str	r0, [sp, #12]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 8177 	beq.w	800635e <_dtoa_r+0xb6e>
 8006070:	4629      	mov	r1, r5
 8006072:	2300      	movs	r3, #0
 8006074:	220a      	movs	r2, #10
 8006076:	4648      	mov	r0, r9
 8006078:	f000 faee 	bl	8006658 <__multadd>
 800607c:	f1bb 0f00 	cmp.w	fp, #0
 8006080:	4605      	mov	r5, r0
 8006082:	dc6f      	bgt.n	8006164 <_dtoa_r+0x974>
 8006084:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006086:	2b02      	cmp	r3, #2
 8006088:	dc49      	bgt.n	800611e <_dtoa_r+0x92e>
 800608a:	e06b      	b.n	8006164 <_dtoa_r+0x974>
 800608c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800608e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006092:	e73c      	b.n	8005f0e <_dtoa_r+0x71e>
 8006094:	3fe00000 	.word	0x3fe00000
 8006098:	40240000 	.word	0x40240000
 800609c:	9b08      	ldr	r3, [sp, #32]
 800609e:	1e5c      	subs	r4, r3, #1
 80060a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060a2:	42a3      	cmp	r3, r4
 80060a4:	db09      	blt.n	80060ba <_dtoa_r+0x8ca>
 80060a6:	1b1c      	subs	r4, r3, r4
 80060a8:	9b08      	ldr	r3, [sp, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f6bf af30 	bge.w	8005f10 <_dtoa_r+0x720>
 80060b0:	9b04      	ldr	r3, [sp, #16]
 80060b2:	9a08      	ldr	r2, [sp, #32]
 80060b4:	1a9e      	subs	r6, r3, r2
 80060b6:	2300      	movs	r3, #0
 80060b8:	e72b      	b.n	8005f12 <_dtoa_r+0x722>
 80060ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060be:	1ae3      	subs	r3, r4, r3
 80060c0:	441a      	add	r2, r3
 80060c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80060c4:	9e04      	ldr	r6, [sp, #16]
 80060c6:	2400      	movs	r4, #0
 80060c8:	9b08      	ldr	r3, [sp, #32]
 80060ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80060cc:	e721      	b.n	8005f12 <_dtoa_r+0x722>
 80060ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060d0:	9e04      	ldr	r6, [sp, #16]
 80060d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80060d4:	e728      	b.n	8005f28 <_dtoa_r+0x738>
 80060d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80060da:	e751      	b.n	8005f80 <_dtoa_r+0x790>
 80060dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060de:	9903      	ldr	r1, [sp, #12]
 80060e0:	e750      	b.n	8005f84 <_dtoa_r+0x794>
 80060e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80060e6:	e751      	b.n	8005f8c <_dtoa_r+0x79c>
 80060e8:	2300      	movs	r3, #0
 80060ea:	e779      	b.n	8005fe0 <_dtoa_r+0x7f0>
 80060ec:	9b06      	ldr	r3, [sp, #24]
 80060ee:	e777      	b.n	8005fe0 <_dtoa_r+0x7f0>
 80060f0:	2300      	movs	r3, #0
 80060f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80060f4:	e779      	b.n	8005fea <_dtoa_r+0x7fa>
 80060f6:	d093      	beq.n	8006020 <_dtoa_r+0x830>
 80060f8:	9a04      	ldr	r2, [sp, #16]
 80060fa:	331c      	adds	r3, #28
 80060fc:	441a      	add	r2, r3
 80060fe:	9204      	str	r2, [sp, #16]
 8006100:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006102:	441e      	add	r6, r3
 8006104:	441a      	add	r2, r3
 8006106:	9209      	str	r2, [sp, #36]	@ 0x24
 8006108:	e78a      	b.n	8006020 <_dtoa_r+0x830>
 800610a:	4603      	mov	r3, r0
 800610c:	e7f4      	b.n	80060f8 <_dtoa_r+0x908>
 800610e:	9b08      	ldr	r3, [sp, #32]
 8006110:	46b8      	mov	r8, r7
 8006112:	2b00      	cmp	r3, #0
 8006114:	dc20      	bgt.n	8006158 <_dtoa_r+0x968>
 8006116:	469b      	mov	fp, r3
 8006118:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800611a:	2b02      	cmp	r3, #2
 800611c:	dd1e      	ble.n	800615c <_dtoa_r+0x96c>
 800611e:	f1bb 0f00 	cmp.w	fp, #0
 8006122:	f47f adb1 	bne.w	8005c88 <_dtoa_r+0x498>
 8006126:	4621      	mov	r1, r4
 8006128:	465b      	mov	r3, fp
 800612a:	2205      	movs	r2, #5
 800612c:	4648      	mov	r0, r9
 800612e:	f000 fa93 	bl	8006658 <__multadd>
 8006132:	4601      	mov	r1, r0
 8006134:	4604      	mov	r4, r0
 8006136:	9803      	ldr	r0, [sp, #12]
 8006138:	f000 fc9e 	bl	8006a78 <__mcmp>
 800613c:	2800      	cmp	r0, #0
 800613e:	f77f ada3 	ble.w	8005c88 <_dtoa_r+0x498>
 8006142:	4656      	mov	r6, sl
 8006144:	2331      	movs	r3, #49	@ 0x31
 8006146:	f108 0801 	add.w	r8, r8, #1
 800614a:	f806 3b01 	strb.w	r3, [r6], #1
 800614e:	e59f      	b.n	8005c90 <_dtoa_r+0x4a0>
 8006150:	46b8      	mov	r8, r7
 8006152:	9c08      	ldr	r4, [sp, #32]
 8006154:	4625      	mov	r5, r4
 8006156:	e7f4      	b.n	8006142 <_dtoa_r+0x952>
 8006158:	f8dd b020 	ldr.w	fp, [sp, #32]
 800615c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8101 	beq.w	8006366 <_dtoa_r+0xb76>
 8006164:	2e00      	cmp	r6, #0
 8006166:	dd05      	ble.n	8006174 <_dtoa_r+0x984>
 8006168:	4629      	mov	r1, r5
 800616a:	4632      	mov	r2, r6
 800616c:	4648      	mov	r0, r9
 800616e:	f000 fc17 	bl	80069a0 <__lshift>
 8006172:	4605      	mov	r5, r0
 8006174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006176:	2b00      	cmp	r3, #0
 8006178:	d05c      	beq.n	8006234 <_dtoa_r+0xa44>
 800617a:	4648      	mov	r0, r9
 800617c:	6869      	ldr	r1, [r5, #4]
 800617e:	f000 fa09 	bl	8006594 <_Balloc>
 8006182:	4606      	mov	r6, r0
 8006184:	b928      	cbnz	r0, 8006192 <_dtoa_r+0x9a2>
 8006186:	4602      	mov	r2, r0
 8006188:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800618c:	4b80      	ldr	r3, [pc, #512]	@ (8006390 <_dtoa_r+0xba0>)
 800618e:	f7ff bb43 	b.w	8005818 <_dtoa_r+0x28>
 8006192:	692a      	ldr	r2, [r5, #16]
 8006194:	f105 010c 	add.w	r1, r5, #12
 8006198:	3202      	adds	r2, #2
 800619a:	0092      	lsls	r2, r2, #2
 800619c:	300c      	adds	r0, #12
 800619e:	f000 ffef 	bl	8007180 <memcpy>
 80061a2:	2201      	movs	r2, #1
 80061a4:	4631      	mov	r1, r6
 80061a6:	4648      	mov	r0, r9
 80061a8:	f000 fbfa 	bl	80069a0 <__lshift>
 80061ac:	462f      	mov	r7, r5
 80061ae:	4605      	mov	r5, r0
 80061b0:	f10a 0301 	add.w	r3, sl, #1
 80061b4:	9304      	str	r3, [sp, #16]
 80061b6:	eb0a 030b 	add.w	r3, sl, fp
 80061ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80061bc:	9b06      	ldr	r3, [sp, #24]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	4621      	mov	r1, r4
 80061c8:	9803      	ldr	r0, [sp, #12]
 80061ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80061ce:	f7ff fa86 	bl	80056de <quorem>
 80061d2:	4603      	mov	r3, r0
 80061d4:	4639      	mov	r1, r7
 80061d6:	3330      	adds	r3, #48	@ 0x30
 80061d8:	9006      	str	r0, [sp, #24]
 80061da:	9803      	ldr	r0, [sp, #12]
 80061dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061de:	f000 fc4b 	bl	8006a78 <__mcmp>
 80061e2:	462a      	mov	r2, r5
 80061e4:	9008      	str	r0, [sp, #32]
 80061e6:	4621      	mov	r1, r4
 80061e8:	4648      	mov	r0, r9
 80061ea:	f000 fc61 	bl	8006ab0 <__mdiff>
 80061ee:	68c2      	ldr	r2, [r0, #12]
 80061f0:	4606      	mov	r6, r0
 80061f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061f4:	bb02      	cbnz	r2, 8006238 <_dtoa_r+0xa48>
 80061f6:	4601      	mov	r1, r0
 80061f8:	9803      	ldr	r0, [sp, #12]
 80061fa:	f000 fc3d 	bl	8006a78 <__mcmp>
 80061fe:	4602      	mov	r2, r0
 8006200:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006202:	4631      	mov	r1, r6
 8006204:	4648      	mov	r0, r9
 8006206:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800620a:	f000 fa03 	bl	8006614 <_Bfree>
 800620e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006210:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006212:	9e04      	ldr	r6, [sp, #16]
 8006214:	ea42 0103 	orr.w	r1, r2, r3
 8006218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800621a:	4319      	orrs	r1, r3
 800621c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800621e:	d10d      	bne.n	800623c <_dtoa_r+0xa4c>
 8006220:	2b39      	cmp	r3, #57	@ 0x39
 8006222:	d027      	beq.n	8006274 <_dtoa_r+0xa84>
 8006224:	9a08      	ldr	r2, [sp, #32]
 8006226:	2a00      	cmp	r2, #0
 8006228:	dd01      	ble.n	800622e <_dtoa_r+0xa3e>
 800622a:	9b06      	ldr	r3, [sp, #24]
 800622c:	3331      	adds	r3, #49	@ 0x31
 800622e:	f88b 3000 	strb.w	r3, [fp]
 8006232:	e52e      	b.n	8005c92 <_dtoa_r+0x4a2>
 8006234:	4628      	mov	r0, r5
 8006236:	e7b9      	b.n	80061ac <_dtoa_r+0x9bc>
 8006238:	2201      	movs	r2, #1
 800623a:	e7e2      	b.n	8006202 <_dtoa_r+0xa12>
 800623c:	9908      	ldr	r1, [sp, #32]
 800623e:	2900      	cmp	r1, #0
 8006240:	db04      	blt.n	800624c <_dtoa_r+0xa5c>
 8006242:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006244:	4301      	orrs	r1, r0
 8006246:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006248:	4301      	orrs	r1, r0
 800624a:	d120      	bne.n	800628e <_dtoa_r+0xa9e>
 800624c:	2a00      	cmp	r2, #0
 800624e:	ddee      	ble.n	800622e <_dtoa_r+0xa3e>
 8006250:	2201      	movs	r2, #1
 8006252:	9903      	ldr	r1, [sp, #12]
 8006254:	4648      	mov	r0, r9
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	f000 fba2 	bl	80069a0 <__lshift>
 800625c:	4621      	mov	r1, r4
 800625e:	9003      	str	r0, [sp, #12]
 8006260:	f000 fc0a 	bl	8006a78 <__mcmp>
 8006264:	2800      	cmp	r0, #0
 8006266:	9b04      	ldr	r3, [sp, #16]
 8006268:	dc02      	bgt.n	8006270 <_dtoa_r+0xa80>
 800626a:	d1e0      	bne.n	800622e <_dtoa_r+0xa3e>
 800626c:	07da      	lsls	r2, r3, #31
 800626e:	d5de      	bpl.n	800622e <_dtoa_r+0xa3e>
 8006270:	2b39      	cmp	r3, #57	@ 0x39
 8006272:	d1da      	bne.n	800622a <_dtoa_r+0xa3a>
 8006274:	2339      	movs	r3, #57	@ 0x39
 8006276:	f88b 3000 	strb.w	r3, [fp]
 800627a:	4633      	mov	r3, r6
 800627c:	461e      	mov	r6, r3
 800627e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006282:	3b01      	subs	r3, #1
 8006284:	2a39      	cmp	r2, #57	@ 0x39
 8006286:	d04e      	beq.n	8006326 <_dtoa_r+0xb36>
 8006288:	3201      	adds	r2, #1
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	e501      	b.n	8005c92 <_dtoa_r+0x4a2>
 800628e:	2a00      	cmp	r2, #0
 8006290:	dd03      	ble.n	800629a <_dtoa_r+0xaaa>
 8006292:	2b39      	cmp	r3, #57	@ 0x39
 8006294:	d0ee      	beq.n	8006274 <_dtoa_r+0xa84>
 8006296:	3301      	adds	r3, #1
 8006298:	e7c9      	b.n	800622e <_dtoa_r+0xa3e>
 800629a:	9a04      	ldr	r2, [sp, #16]
 800629c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800629e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062a2:	428a      	cmp	r2, r1
 80062a4:	d028      	beq.n	80062f8 <_dtoa_r+0xb08>
 80062a6:	2300      	movs	r3, #0
 80062a8:	220a      	movs	r2, #10
 80062aa:	9903      	ldr	r1, [sp, #12]
 80062ac:	4648      	mov	r0, r9
 80062ae:	f000 f9d3 	bl	8006658 <__multadd>
 80062b2:	42af      	cmp	r7, r5
 80062b4:	9003      	str	r0, [sp, #12]
 80062b6:	f04f 0300 	mov.w	r3, #0
 80062ba:	f04f 020a 	mov.w	r2, #10
 80062be:	4639      	mov	r1, r7
 80062c0:	4648      	mov	r0, r9
 80062c2:	d107      	bne.n	80062d4 <_dtoa_r+0xae4>
 80062c4:	f000 f9c8 	bl	8006658 <__multadd>
 80062c8:	4607      	mov	r7, r0
 80062ca:	4605      	mov	r5, r0
 80062cc:	9b04      	ldr	r3, [sp, #16]
 80062ce:	3301      	adds	r3, #1
 80062d0:	9304      	str	r3, [sp, #16]
 80062d2:	e777      	b.n	80061c4 <_dtoa_r+0x9d4>
 80062d4:	f000 f9c0 	bl	8006658 <__multadd>
 80062d8:	4629      	mov	r1, r5
 80062da:	4607      	mov	r7, r0
 80062dc:	2300      	movs	r3, #0
 80062de:	220a      	movs	r2, #10
 80062e0:	4648      	mov	r0, r9
 80062e2:	f000 f9b9 	bl	8006658 <__multadd>
 80062e6:	4605      	mov	r5, r0
 80062e8:	e7f0      	b.n	80062cc <_dtoa_r+0xadc>
 80062ea:	f1bb 0f00 	cmp.w	fp, #0
 80062ee:	bfcc      	ite	gt
 80062f0:	465e      	movgt	r6, fp
 80062f2:	2601      	movle	r6, #1
 80062f4:	2700      	movs	r7, #0
 80062f6:	4456      	add	r6, sl
 80062f8:	2201      	movs	r2, #1
 80062fa:	9903      	ldr	r1, [sp, #12]
 80062fc:	4648      	mov	r0, r9
 80062fe:	9304      	str	r3, [sp, #16]
 8006300:	f000 fb4e 	bl	80069a0 <__lshift>
 8006304:	4621      	mov	r1, r4
 8006306:	9003      	str	r0, [sp, #12]
 8006308:	f000 fbb6 	bl	8006a78 <__mcmp>
 800630c:	2800      	cmp	r0, #0
 800630e:	dcb4      	bgt.n	800627a <_dtoa_r+0xa8a>
 8006310:	d102      	bne.n	8006318 <_dtoa_r+0xb28>
 8006312:	9b04      	ldr	r3, [sp, #16]
 8006314:	07db      	lsls	r3, r3, #31
 8006316:	d4b0      	bmi.n	800627a <_dtoa_r+0xa8a>
 8006318:	4633      	mov	r3, r6
 800631a:	461e      	mov	r6, r3
 800631c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006320:	2a30      	cmp	r2, #48	@ 0x30
 8006322:	d0fa      	beq.n	800631a <_dtoa_r+0xb2a>
 8006324:	e4b5      	b.n	8005c92 <_dtoa_r+0x4a2>
 8006326:	459a      	cmp	sl, r3
 8006328:	d1a8      	bne.n	800627c <_dtoa_r+0xa8c>
 800632a:	2331      	movs	r3, #49	@ 0x31
 800632c:	f108 0801 	add.w	r8, r8, #1
 8006330:	f88a 3000 	strb.w	r3, [sl]
 8006334:	e4ad      	b.n	8005c92 <_dtoa_r+0x4a2>
 8006336:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006338:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006394 <_dtoa_r+0xba4>
 800633c:	b11b      	cbz	r3, 8006346 <_dtoa_r+0xb56>
 800633e:	f10a 0308 	add.w	r3, sl, #8
 8006342:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	4650      	mov	r0, sl
 8006348:	b017      	add	sp, #92	@ 0x5c
 800634a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006350:	2b01      	cmp	r3, #1
 8006352:	f77f ae2e 	ble.w	8005fb2 <_dtoa_r+0x7c2>
 8006356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006358:	930a      	str	r3, [sp, #40]	@ 0x28
 800635a:	2001      	movs	r0, #1
 800635c:	e64d      	b.n	8005ffa <_dtoa_r+0x80a>
 800635e:	f1bb 0f00 	cmp.w	fp, #0
 8006362:	f77f aed9 	ble.w	8006118 <_dtoa_r+0x928>
 8006366:	4656      	mov	r6, sl
 8006368:	4621      	mov	r1, r4
 800636a:	9803      	ldr	r0, [sp, #12]
 800636c:	f7ff f9b7 	bl	80056de <quorem>
 8006370:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006374:	f806 3b01 	strb.w	r3, [r6], #1
 8006378:	eba6 020a 	sub.w	r2, r6, sl
 800637c:	4593      	cmp	fp, r2
 800637e:	ddb4      	ble.n	80062ea <_dtoa_r+0xafa>
 8006380:	2300      	movs	r3, #0
 8006382:	220a      	movs	r2, #10
 8006384:	4648      	mov	r0, r9
 8006386:	9903      	ldr	r1, [sp, #12]
 8006388:	f000 f966 	bl	8006658 <__multadd>
 800638c:	9003      	str	r0, [sp, #12]
 800638e:	e7eb      	b.n	8006368 <_dtoa_r+0xb78>
 8006390:	08007d20 	.word	0x08007d20
 8006394:	08007ca4 	.word	0x08007ca4

08006398 <_free_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	4605      	mov	r5, r0
 800639c:	2900      	cmp	r1, #0
 800639e:	d040      	beq.n	8006422 <_free_r+0x8a>
 80063a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a4:	1f0c      	subs	r4, r1, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bfb8      	it	lt
 80063aa:	18e4      	addlt	r4, r4, r3
 80063ac:	f000 f8e6 	bl	800657c <__malloc_lock>
 80063b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006424 <_free_r+0x8c>)
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	b933      	cbnz	r3, 80063c4 <_free_r+0x2c>
 80063b6:	6063      	str	r3, [r4, #4]
 80063b8:	6014      	str	r4, [r2, #0]
 80063ba:	4628      	mov	r0, r5
 80063bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c0:	f000 b8e2 	b.w	8006588 <__malloc_unlock>
 80063c4:	42a3      	cmp	r3, r4
 80063c6:	d908      	bls.n	80063da <_free_r+0x42>
 80063c8:	6820      	ldr	r0, [r4, #0]
 80063ca:	1821      	adds	r1, r4, r0
 80063cc:	428b      	cmp	r3, r1
 80063ce:	bf01      	itttt	eq
 80063d0:	6819      	ldreq	r1, [r3, #0]
 80063d2:	685b      	ldreq	r3, [r3, #4]
 80063d4:	1809      	addeq	r1, r1, r0
 80063d6:	6021      	streq	r1, [r4, #0]
 80063d8:	e7ed      	b.n	80063b6 <_free_r+0x1e>
 80063da:	461a      	mov	r2, r3
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	b10b      	cbz	r3, 80063e4 <_free_r+0x4c>
 80063e0:	42a3      	cmp	r3, r4
 80063e2:	d9fa      	bls.n	80063da <_free_r+0x42>
 80063e4:	6811      	ldr	r1, [r2, #0]
 80063e6:	1850      	adds	r0, r2, r1
 80063e8:	42a0      	cmp	r0, r4
 80063ea:	d10b      	bne.n	8006404 <_free_r+0x6c>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	4401      	add	r1, r0
 80063f0:	1850      	adds	r0, r2, r1
 80063f2:	4283      	cmp	r3, r0
 80063f4:	6011      	str	r1, [r2, #0]
 80063f6:	d1e0      	bne.n	80063ba <_free_r+0x22>
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4408      	add	r0, r1
 80063fe:	6010      	str	r0, [r2, #0]
 8006400:	6053      	str	r3, [r2, #4]
 8006402:	e7da      	b.n	80063ba <_free_r+0x22>
 8006404:	d902      	bls.n	800640c <_free_r+0x74>
 8006406:	230c      	movs	r3, #12
 8006408:	602b      	str	r3, [r5, #0]
 800640a:	e7d6      	b.n	80063ba <_free_r+0x22>
 800640c:	6820      	ldr	r0, [r4, #0]
 800640e:	1821      	adds	r1, r4, r0
 8006410:	428b      	cmp	r3, r1
 8006412:	bf01      	itttt	eq
 8006414:	6819      	ldreq	r1, [r3, #0]
 8006416:	685b      	ldreq	r3, [r3, #4]
 8006418:	1809      	addeq	r1, r1, r0
 800641a:	6021      	streq	r1, [r4, #0]
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	6054      	str	r4, [r2, #4]
 8006420:	e7cb      	b.n	80063ba <_free_r+0x22>
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	20000468 	.word	0x20000468

08006428 <malloc>:
 8006428:	4b02      	ldr	r3, [pc, #8]	@ (8006434 <malloc+0xc>)
 800642a:	4601      	mov	r1, r0
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	f000 b825 	b.w	800647c <_malloc_r>
 8006432:	bf00      	nop
 8006434:	20000018 	.word	0x20000018

08006438 <sbrk_aligned>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	4e0f      	ldr	r6, [pc, #60]	@ (8006478 <sbrk_aligned+0x40>)
 800643c:	460c      	mov	r4, r1
 800643e:	6831      	ldr	r1, [r6, #0]
 8006440:	4605      	mov	r5, r0
 8006442:	b911      	cbnz	r1, 800644a <sbrk_aligned+0x12>
 8006444:	f000 fe8c 	bl	8007160 <_sbrk_r>
 8006448:	6030      	str	r0, [r6, #0]
 800644a:	4621      	mov	r1, r4
 800644c:	4628      	mov	r0, r5
 800644e:	f000 fe87 	bl	8007160 <_sbrk_r>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d103      	bne.n	800645e <sbrk_aligned+0x26>
 8006456:	f04f 34ff 	mov.w	r4, #4294967295
 800645a:	4620      	mov	r0, r4
 800645c:	bd70      	pop	{r4, r5, r6, pc}
 800645e:	1cc4      	adds	r4, r0, #3
 8006460:	f024 0403 	bic.w	r4, r4, #3
 8006464:	42a0      	cmp	r0, r4
 8006466:	d0f8      	beq.n	800645a <sbrk_aligned+0x22>
 8006468:	1a21      	subs	r1, r4, r0
 800646a:	4628      	mov	r0, r5
 800646c:	f000 fe78 	bl	8007160 <_sbrk_r>
 8006470:	3001      	adds	r0, #1
 8006472:	d1f2      	bne.n	800645a <sbrk_aligned+0x22>
 8006474:	e7ef      	b.n	8006456 <sbrk_aligned+0x1e>
 8006476:	bf00      	nop
 8006478:	20000464 	.word	0x20000464

0800647c <_malloc_r>:
 800647c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006480:	1ccd      	adds	r5, r1, #3
 8006482:	f025 0503 	bic.w	r5, r5, #3
 8006486:	3508      	adds	r5, #8
 8006488:	2d0c      	cmp	r5, #12
 800648a:	bf38      	it	cc
 800648c:	250c      	movcc	r5, #12
 800648e:	2d00      	cmp	r5, #0
 8006490:	4606      	mov	r6, r0
 8006492:	db01      	blt.n	8006498 <_malloc_r+0x1c>
 8006494:	42a9      	cmp	r1, r5
 8006496:	d904      	bls.n	80064a2 <_malloc_r+0x26>
 8006498:	230c      	movs	r3, #12
 800649a:	6033      	str	r3, [r6, #0]
 800649c:	2000      	movs	r0, #0
 800649e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006578 <_malloc_r+0xfc>
 80064a6:	f000 f869 	bl	800657c <__malloc_lock>
 80064aa:	f8d8 3000 	ldr.w	r3, [r8]
 80064ae:	461c      	mov	r4, r3
 80064b0:	bb44      	cbnz	r4, 8006504 <_malloc_r+0x88>
 80064b2:	4629      	mov	r1, r5
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff ffbf 	bl	8006438 <sbrk_aligned>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	4604      	mov	r4, r0
 80064be:	d158      	bne.n	8006572 <_malloc_r+0xf6>
 80064c0:	f8d8 4000 	ldr.w	r4, [r8]
 80064c4:	4627      	mov	r7, r4
 80064c6:	2f00      	cmp	r7, #0
 80064c8:	d143      	bne.n	8006552 <_malloc_r+0xd6>
 80064ca:	2c00      	cmp	r4, #0
 80064cc:	d04b      	beq.n	8006566 <_malloc_r+0xea>
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	4639      	mov	r1, r7
 80064d2:	4630      	mov	r0, r6
 80064d4:	eb04 0903 	add.w	r9, r4, r3
 80064d8:	f000 fe42 	bl	8007160 <_sbrk_r>
 80064dc:	4581      	cmp	r9, r0
 80064de:	d142      	bne.n	8006566 <_malloc_r+0xea>
 80064e0:	6821      	ldr	r1, [r4, #0]
 80064e2:	4630      	mov	r0, r6
 80064e4:	1a6d      	subs	r5, r5, r1
 80064e6:	4629      	mov	r1, r5
 80064e8:	f7ff ffa6 	bl	8006438 <sbrk_aligned>
 80064ec:	3001      	adds	r0, #1
 80064ee:	d03a      	beq.n	8006566 <_malloc_r+0xea>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	442b      	add	r3, r5
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	f8d8 3000 	ldr.w	r3, [r8]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	bb62      	cbnz	r2, 8006558 <_malloc_r+0xdc>
 80064fe:	f8c8 7000 	str.w	r7, [r8]
 8006502:	e00f      	b.n	8006524 <_malloc_r+0xa8>
 8006504:	6822      	ldr	r2, [r4, #0]
 8006506:	1b52      	subs	r2, r2, r5
 8006508:	d420      	bmi.n	800654c <_malloc_r+0xd0>
 800650a:	2a0b      	cmp	r2, #11
 800650c:	d917      	bls.n	800653e <_malloc_r+0xc2>
 800650e:	1961      	adds	r1, r4, r5
 8006510:	42a3      	cmp	r3, r4
 8006512:	6025      	str	r5, [r4, #0]
 8006514:	bf18      	it	ne
 8006516:	6059      	strne	r1, [r3, #4]
 8006518:	6863      	ldr	r3, [r4, #4]
 800651a:	bf08      	it	eq
 800651c:	f8c8 1000 	streq.w	r1, [r8]
 8006520:	5162      	str	r2, [r4, r5]
 8006522:	604b      	str	r3, [r1, #4]
 8006524:	4630      	mov	r0, r6
 8006526:	f000 f82f 	bl	8006588 <__malloc_unlock>
 800652a:	f104 000b 	add.w	r0, r4, #11
 800652e:	1d23      	adds	r3, r4, #4
 8006530:	f020 0007 	bic.w	r0, r0, #7
 8006534:	1ac2      	subs	r2, r0, r3
 8006536:	bf1c      	itt	ne
 8006538:	1a1b      	subne	r3, r3, r0
 800653a:	50a3      	strne	r3, [r4, r2]
 800653c:	e7af      	b.n	800649e <_malloc_r+0x22>
 800653e:	6862      	ldr	r2, [r4, #4]
 8006540:	42a3      	cmp	r3, r4
 8006542:	bf0c      	ite	eq
 8006544:	f8c8 2000 	streq.w	r2, [r8]
 8006548:	605a      	strne	r2, [r3, #4]
 800654a:	e7eb      	b.n	8006524 <_malloc_r+0xa8>
 800654c:	4623      	mov	r3, r4
 800654e:	6864      	ldr	r4, [r4, #4]
 8006550:	e7ae      	b.n	80064b0 <_malloc_r+0x34>
 8006552:	463c      	mov	r4, r7
 8006554:	687f      	ldr	r7, [r7, #4]
 8006556:	e7b6      	b.n	80064c6 <_malloc_r+0x4a>
 8006558:	461a      	mov	r2, r3
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	42a3      	cmp	r3, r4
 800655e:	d1fb      	bne.n	8006558 <_malloc_r+0xdc>
 8006560:	2300      	movs	r3, #0
 8006562:	6053      	str	r3, [r2, #4]
 8006564:	e7de      	b.n	8006524 <_malloc_r+0xa8>
 8006566:	230c      	movs	r3, #12
 8006568:	4630      	mov	r0, r6
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	f000 f80c 	bl	8006588 <__malloc_unlock>
 8006570:	e794      	b.n	800649c <_malloc_r+0x20>
 8006572:	6005      	str	r5, [r0, #0]
 8006574:	e7d6      	b.n	8006524 <_malloc_r+0xa8>
 8006576:	bf00      	nop
 8006578:	20000468 	.word	0x20000468

0800657c <__malloc_lock>:
 800657c:	4801      	ldr	r0, [pc, #4]	@ (8006584 <__malloc_lock+0x8>)
 800657e:	f7ff b89e 	b.w	80056be <__retarget_lock_acquire_recursive>
 8006582:	bf00      	nop
 8006584:	20000460 	.word	0x20000460

08006588 <__malloc_unlock>:
 8006588:	4801      	ldr	r0, [pc, #4]	@ (8006590 <__malloc_unlock+0x8>)
 800658a:	f7ff b899 	b.w	80056c0 <__retarget_lock_release_recursive>
 800658e:	bf00      	nop
 8006590:	20000460 	.word	0x20000460

08006594 <_Balloc>:
 8006594:	b570      	push	{r4, r5, r6, lr}
 8006596:	69c6      	ldr	r6, [r0, #28]
 8006598:	4604      	mov	r4, r0
 800659a:	460d      	mov	r5, r1
 800659c:	b976      	cbnz	r6, 80065bc <_Balloc+0x28>
 800659e:	2010      	movs	r0, #16
 80065a0:	f7ff ff42 	bl	8006428 <malloc>
 80065a4:	4602      	mov	r2, r0
 80065a6:	61e0      	str	r0, [r4, #28]
 80065a8:	b920      	cbnz	r0, 80065b4 <_Balloc+0x20>
 80065aa:	216b      	movs	r1, #107	@ 0x6b
 80065ac:	4b17      	ldr	r3, [pc, #92]	@ (800660c <_Balloc+0x78>)
 80065ae:	4818      	ldr	r0, [pc, #96]	@ (8006610 <_Balloc+0x7c>)
 80065b0:	f000 fdf4 	bl	800719c <__assert_func>
 80065b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065b8:	6006      	str	r6, [r0, #0]
 80065ba:	60c6      	str	r6, [r0, #12]
 80065bc:	69e6      	ldr	r6, [r4, #28]
 80065be:	68f3      	ldr	r3, [r6, #12]
 80065c0:	b183      	cbz	r3, 80065e4 <_Balloc+0x50>
 80065c2:	69e3      	ldr	r3, [r4, #28]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065ca:	b9b8      	cbnz	r0, 80065fc <_Balloc+0x68>
 80065cc:	2101      	movs	r1, #1
 80065ce:	fa01 f605 	lsl.w	r6, r1, r5
 80065d2:	1d72      	adds	r2, r6, #5
 80065d4:	4620      	mov	r0, r4
 80065d6:	0092      	lsls	r2, r2, #2
 80065d8:	f000 fdfe 	bl	80071d8 <_calloc_r>
 80065dc:	b160      	cbz	r0, 80065f8 <_Balloc+0x64>
 80065de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065e2:	e00e      	b.n	8006602 <_Balloc+0x6e>
 80065e4:	2221      	movs	r2, #33	@ 0x21
 80065e6:	2104      	movs	r1, #4
 80065e8:	4620      	mov	r0, r4
 80065ea:	f000 fdf5 	bl	80071d8 <_calloc_r>
 80065ee:	69e3      	ldr	r3, [r4, #28]
 80065f0:	60f0      	str	r0, [r6, #12]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e4      	bne.n	80065c2 <_Balloc+0x2e>
 80065f8:	2000      	movs	r0, #0
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	6802      	ldr	r2, [r0, #0]
 80065fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006602:	2300      	movs	r3, #0
 8006604:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006608:	e7f7      	b.n	80065fa <_Balloc+0x66>
 800660a:	bf00      	nop
 800660c:	08007cb1 	.word	0x08007cb1
 8006610:	08007d31 	.word	0x08007d31

08006614 <_Bfree>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	69c6      	ldr	r6, [r0, #28]
 8006618:	4605      	mov	r5, r0
 800661a:	460c      	mov	r4, r1
 800661c:	b976      	cbnz	r6, 800663c <_Bfree+0x28>
 800661e:	2010      	movs	r0, #16
 8006620:	f7ff ff02 	bl	8006428 <malloc>
 8006624:	4602      	mov	r2, r0
 8006626:	61e8      	str	r0, [r5, #28]
 8006628:	b920      	cbnz	r0, 8006634 <_Bfree+0x20>
 800662a:	218f      	movs	r1, #143	@ 0x8f
 800662c:	4b08      	ldr	r3, [pc, #32]	@ (8006650 <_Bfree+0x3c>)
 800662e:	4809      	ldr	r0, [pc, #36]	@ (8006654 <_Bfree+0x40>)
 8006630:	f000 fdb4 	bl	800719c <__assert_func>
 8006634:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006638:	6006      	str	r6, [r0, #0]
 800663a:	60c6      	str	r6, [r0, #12]
 800663c:	b13c      	cbz	r4, 800664e <_Bfree+0x3a>
 800663e:	69eb      	ldr	r3, [r5, #28]
 8006640:	6862      	ldr	r2, [r4, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006648:	6021      	str	r1, [r4, #0]
 800664a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800664e:	bd70      	pop	{r4, r5, r6, pc}
 8006650:	08007cb1 	.word	0x08007cb1
 8006654:	08007d31 	.word	0x08007d31

08006658 <__multadd>:
 8006658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665c:	4607      	mov	r7, r0
 800665e:	460c      	mov	r4, r1
 8006660:	461e      	mov	r6, r3
 8006662:	2000      	movs	r0, #0
 8006664:	690d      	ldr	r5, [r1, #16]
 8006666:	f101 0c14 	add.w	ip, r1, #20
 800666a:	f8dc 3000 	ldr.w	r3, [ip]
 800666e:	3001      	adds	r0, #1
 8006670:	b299      	uxth	r1, r3
 8006672:	fb02 6101 	mla	r1, r2, r1, r6
 8006676:	0c1e      	lsrs	r6, r3, #16
 8006678:	0c0b      	lsrs	r3, r1, #16
 800667a:	fb02 3306 	mla	r3, r2, r6, r3
 800667e:	b289      	uxth	r1, r1
 8006680:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006684:	4285      	cmp	r5, r0
 8006686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800668a:	f84c 1b04 	str.w	r1, [ip], #4
 800668e:	dcec      	bgt.n	800666a <__multadd+0x12>
 8006690:	b30e      	cbz	r6, 80066d6 <__multadd+0x7e>
 8006692:	68a3      	ldr	r3, [r4, #8]
 8006694:	42ab      	cmp	r3, r5
 8006696:	dc19      	bgt.n	80066cc <__multadd+0x74>
 8006698:	6861      	ldr	r1, [r4, #4]
 800669a:	4638      	mov	r0, r7
 800669c:	3101      	adds	r1, #1
 800669e:	f7ff ff79 	bl	8006594 <_Balloc>
 80066a2:	4680      	mov	r8, r0
 80066a4:	b928      	cbnz	r0, 80066b2 <__multadd+0x5a>
 80066a6:	4602      	mov	r2, r0
 80066a8:	21ba      	movs	r1, #186	@ 0xba
 80066aa:	4b0c      	ldr	r3, [pc, #48]	@ (80066dc <__multadd+0x84>)
 80066ac:	480c      	ldr	r0, [pc, #48]	@ (80066e0 <__multadd+0x88>)
 80066ae:	f000 fd75 	bl	800719c <__assert_func>
 80066b2:	6922      	ldr	r2, [r4, #16]
 80066b4:	f104 010c 	add.w	r1, r4, #12
 80066b8:	3202      	adds	r2, #2
 80066ba:	0092      	lsls	r2, r2, #2
 80066bc:	300c      	adds	r0, #12
 80066be:	f000 fd5f 	bl	8007180 <memcpy>
 80066c2:	4621      	mov	r1, r4
 80066c4:	4638      	mov	r0, r7
 80066c6:	f7ff ffa5 	bl	8006614 <_Bfree>
 80066ca:	4644      	mov	r4, r8
 80066cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066d0:	3501      	adds	r5, #1
 80066d2:	615e      	str	r6, [r3, #20]
 80066d4:	6125      	str	r5, [r4, #16]
 80066d6:	4620      	mov	r0, r4
 80066d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066dc:	08007d20 	.word	0x08007d20
 80066e0:	08007d31 	.word	0x08007d31

080066e4 <__hi0bits>:
 80066e4:	4603      	mov	r3, r0
 80066e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066ea:	bf3a      	itte	cc
 80066ec:	0403      	lslcc	r3, r0, #16
 80066ee:	2010      	movcc	r0, #16
 80066f0:	2000      	movcs	r0, #0
 80066f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066f6:	bf3c      	itt	cc
 80066f8:	021b      	lslcc	r3, r3, #8
 80066fa:	3008      	addcc	r0, #8
 80066fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006700:	bf3c      	itt	cc
 8006702:	011b      	lslcc	r3, r3, #4
 8006704:	3004      	addcc	r0, #4
 8006706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800670a:	bf3c      	itt	cc
 800670c:	009b      	lslcc	r3, r3, #2
 800670e:	3002      	addcc	r0, #2
 8006710:	2b00      	cmp	r3, #0
 8006712:	db05      	blt.n	8006720 <__hi0bits+0x3c>
 8006714:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006718:	f100 0001 	add.w	r0, r0, #1
 800671c:	bf08      	it	eq
 800671e:	2020      	moveq	r0, #32
 8006720:	4770      	bx	lr

08006722 <__lo0bits>:
 8006722:	6803      	ldr	r3, [r0, #0]
 8006724:	4602      	mov	r2, r0
 8006726:	f013 0007 	ands.w	r0, r3, #7
 800672a:	d00b      	beq.n	8006744 <__lo0bits+0x22>
 800672c:	07d9      	lsls	r1, r3, #31
 800672e:	d421      	bmi.n	8006774 <__lo0bits+0x52>
 8006730:	0798      	lsls	r0, r3, #30
 8006732:	bf49      	itett	mi
 8006734:	085b      	lsrmi	r3, r3, #1
 8006736:	089b      	lsrpl	r3, r3, #2
 8006738:	2001      	movmi	r0, #1
 800673a:	6013      	strmi	r3, [r2, #0]
 800673c:	bf5c      	itt	pl
 800673e:	2002      	movpl	r0, #2
 8006740:	6013      	strpl	r3, [r2, #0]
 8006742:	4770      	bx	lr
 8006744:	b299      	uxth	r1, r3
 8006746:	b909      	cbnz	r1, 800674c <__lo0bits+0x2a>
 8006748:	2010      	movs	r0, #16
 800674a:	0c1b      	lsrs	r3, r3, #16
 800674c:	b2d9      	uxtb	r1, r3
 800674e:	b909      	cbnz	r1, 8006754 <__lo0bits+0x32>
 8006750:	3008      	adds	r0, #8
 8006752:	0a1b      	lsrs	r3, r3, #8
 8006754:	0719      	lsls	r1, r3, #28
 8006756:	bf04      	itt	eq
 8006758:	091b      	lsreq	r3, r3, #4
 800675a:	3004      	addeq	r0, #4
 800675c:	0799      	lsls	r1, r3, #30
 800675e:	bf04      	itt	eq
 8006760:	089b      	lsreq	r3, r3, #2
 8006762:	3002      	addeq	r0, #2
 8006764:	07d9      	lsls	r1, r3, #31
 8006766:	d403      	bmi.n	8006770 <__lo0bits+0x4e>
 8006768:	085b      	lsrs	r3, r3, #1
 800676a:	f100 0001 	add.w	r0, r0, #1
 800676e:	d003      	beq.n	8006778 <__lo0bits+0x56>
 8006770:	6013      	str	r3, [r2, #0]
 8006772:	4770      	bx	lr
 8006774:	2000      	movs	r0, #0
 8006776:	4770      	bx	lr
 8006778:	2020      	movs	r0, #32
 800677a:	4770      	bx	lr

0800677c <__i2b>:
 800677c:	b510      	push	{r4, lr}
 800677e:	460c      	mov	r4, r1
 8006780:	2101      	movs	r1, #1
 8006782:	f7ff ff07 	bl	8006594 <_Balloc>
 8006786:	4602      	mov	r2, r0
 8006788:	b928      	cbnz	r0, 8006796 <__i2b+0x1a>
 800678a:	f240 1145 	movw	r1, #325	@ 0x145
 800678e:	4b04      	ldr	r3, [pc, #16]	@ (80067a0 <__i2b+0x24>)
 8006790:	4804      	ldr	r0, [pc, #16]	@ (80067a4 <__i2b+0x28>)
 8006792:	f000 fd03 	bl	800719c <__assert_func>
 8006796:	2301      	movs	r3, #1
 8006798:	6144      	str	r4, [r0, #20]
 800679a:	6103      	str	r3, [r0, #16]
 800679c:	bd10      	pop	{r4, pc}
 800679e:	bf00      	nop
 80067a0:	08007d20 	.word	0x08007d20
 80067a4:	08007d31 	.word	0x08007d31

080067a8 <__multiply>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	4617      	mov	r7, r2
 80067ae:	690a      	ldr	r2, [r1, #16]
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4689      	mov	r9, r1
 80067b4:	429a      	cmp	r2, r3
 80067b6:	bfa2      	ittt	ge
 80067b8:	463b      	movge	r3, r7
 80067ba:	460f      	movge	r7, r1
 80067bc:	4699      	movge	r9, r3
 80067be:	693d      	ldr	r5, [r7, #16]
 80067c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	eb05 060a 	add.w	r6, r5, sl
 80067cc:	42b3      	cmp	r3, r6
 80067ce:	b085      	sub	sp, #20
 80067d0:	bfb8      	it	lt
 80067d2:	3101      	addlt	r1, #1
 80067d4:	f7ff fede 	bl	8006594 <_Balloc>
 80067d8:	b930      	cbnz	r0, 80067e8 <__multiply+0x40>
 80067da:	4602      	mov	r2, r0
 80067dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067e0:	4b40      	ldr	r3, [pc, #256]	@ (80068e4 <__multiply+0x13c>)
 80067e2:	4841      	ldr	r0, [pc, #260]	@ (80068e8 <__multiply+0x140>)
 80067e4:	f000 fcda 	bl	800719c <__assert_func>
 80067e8:	f100 0414 	add.w	r4, r0, #20
 80067ec:	4623      	mov	r3, r4
 80067ee:	2200      	movs	r2, #0
 80067f0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80067f4:	4573      	cmp	r3, lr
 80067f6:	d320      	bcc.n	800683a <__multiply+0x92>
 80067f8:	f107 0814 	add.w	r8, r7, #20
 80067fc:	f109 0114 	add.w	r1, r9, #20
 8006800:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006804:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006808:	9302      	str	r3, [sp, #8]
 800680a:	1beb      	subs	r3, r5, r7
 800680c:	3b15      	subs	r3, #21
 800680e:	f023 0303 	bic.w	r3, r3, #3
 8006812:	3304      	adds	r3, #4
 8006814:	3715      	adds	r7, #21
 8006816:	42bd      	cmp	r5, r7
 8006818:	bf38      	it	cc
 800681a:	2304      	movcc	r3, #4
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	9b02      	ldr	r3, [sp, #8]
 8006820:	9103      	str	r1, [sp, #12]
 8006822:	428b      	cmp	r3, r1
 8006824:	d80c      	bhi.n	8006840 <__multiply+0x98>
 8006826:	2e00      	cmp	r6, #0
 8006828:	dd03      	ble.n	8006832 <__multiply+0x8a>
 800682a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800682e:	2b00      	cmp	r3, #0
 8006830:	d055      	beq.n	80068de <__multiply+0x136>
 8006832:	6106      	str	r6, [r0, #16]
 8006834:	b005      	add	sp, #20
 8006836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683a:	f843 2b04 	str.w	r2, [r3], #4
 800683e:	e7d9      	b.n	80067f4 <__multiply+0x4c>
 8006840:	f8b1 a000 	ldrh.w	sl, [r1]
 8006844:	f1ba 0f00 	cmp.w	sl, #0
 8006848:	d01f      	beq.n	800688a <__multiply+0xe2>
 800684a:	46c4      	mov	ip, r8
 800684c:	46a1      	mov	r9, r4
 800684e:	2700      	movs	r7, #0
 8006850:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006854:	f8d9 3000 	ldr.w	r3, [r9]
 8006858:	fa1f fb82 	uxth.w	fp, r2
 800685c:	b29b      	uxth	r3, r3
 800685e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006862:	443b      	add	r3, r7
 8006864:	f8d9 7000 	ldr.w	r7, [r9]
 8006868:	0c12      	lsrs	r2, r2, #16
 800686a:	0c3f      	lsrs	r7, r7, #16
 800686c:	fb0a 7202 	mla	r2, sl, r2, r7
 8006870:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006874:	b29b      	uxth	r3, r3
 8006876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800687a:	4565      	cmp	r5, ip
 800687c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006880:	f849 3b04 	str.w	r3, [r9], #4
 8006884:	d8e4      	bhi.n	8006850 <__multiply+0xa8>
 8006886:	9b01      	ldr	r3, [sp, #4]
 8006888:	50e7      	str	r7, [r4, r3]
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	3104      	adds	r1, #4
 800688e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006892:	f1b9 0f00 	cmp.w	r9, #0
 8006896:	d020      	beq.n	80068da <__multiply+0x132>
 8006898:	4647      	mov	r7, r8
 800689a:	46a4      	mov	ip, r4
 800689c:	f04f 0a00 	mov.w	sl, #0
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	f8b7 b000 	ldrh.w	fp, [r7]
 80068a6:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	fb09 220b 	mla	r2, r9, fp, r2
 80068b0:	4452      	add	r2, sl
 80068b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b6:	f84c 3b04 	str.w	r3, [ip], #4
 80068ba:	f857 3b04 	ldr.w	r3, [r7], #4
 80068be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068c2:	f8bc 3000 	ldrh.w	r3, [ip]
 80068c6:	42bd      	cmp	r5, r7
 80068c8:	fb09 330a 	mla	r3, r9, sl, r3
 80068cc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80068d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068d4:	d8e5      	bhi.n	80068a2 <__multiply+0xfa>
 80068d6:	9a01      	ldr	r2, [sp, #4]
 80068d8:	50a3      	str	r3, [r4, r2]
 80068da:	3404      	adds	r4, #4
 80068dc:	e79f      	b.n	800681e <__multiply+0x76>
 80068de:	3e01      	subs	r6, #1
 80068e0:	e7a1      	b.n	8006826 <__multiply+0x7e>
 80068e2:	bf00      	nop
 80068e4:	08007d20 	.word	0x08007d20
 80068e8:	08007d31 	.word	0x08007d31

080068ec <__pow5mult>:
 80068ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f0:	4615      	mov	r5, r2
 80068f2:	f012 0203 	ands.w	r2, r2, #3
 80068f6:	4607      	mov	r7, r0
 80068f8:	460e      	mov	r6, r1
 80068fa:	d007      	beq.n	800690c <__pow5mult+0x20>
 80068fc:	4c25      	ldr	r4, [pc, #148]	@ (8006994 <__pow5mult+0xa8>)
 80068fe:	3a01      	subs	r2, #1
 8006900:	2300      	movs	r3, #0
 8006902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006906:	f7ff fea7 	bl	8006658 <__multadd>
 800690a:	4606      	mov	r6, r0
 800690c:	10ad      	asrs	r5, r5, #2
 800690e:	d03d      	beq.n	800698c <__pow5mult+0xa0>
 8006910:	69fc      	ldr	r4, [r7, #28]
 8006912:	b97c      	cbnz	r4, 8006934 <__pow5mult+0x48>
 8006914:	2010      	movs	r0, #16
 8006916:	f7ff fd87 	bl	8006428 <malloc>
 800691a:	4602      	mov	r2, r0
 800691c:	61f8      	str	r0, [r7, #28]
 800691e:	b928      	cbnz	r0, 800692c <__pow5mult+0x40>
 8006920:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006924:	4b1c      	ldr	r3, [pc, #112]	@ (8006998 <__pow5mult+0xac>)
 8006926:	481d      	ldr	r0, [pc, #116]	@ (800699c <__pow5mult+0xb0>)
 8006928:	f000 fc38 	bl	800719c <__assert_func>
 800692c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006930:	6004      	str	r4, [r0, #0]
 8006932:	60c4      	str	r4, [r0, #12]
 8006934:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800693c:	b94c      	cbnz	r4, 8006952 <__pow5mult+0x66>
 800693e:	f240 2171 	movw	r1, #625	@ 0x271
 8006942:	4638      	mov	r0, r7
 8006944:	f7ff ff1a 	bl	800677c <__i2b>
 8006948:	2300      	movs	r3, #0
 800694a:	4604      	mov	r4, r0
 800694c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006950:	6003      	str	r3, [r0, #0]
 8006952:	f04f 0900 	mov.w	r9, #0
 8006956:	07eb      	lsls	r3, r5, #31
 8006958:	d50a      	bpl.n	8006970 <__pow5mult+0x84>
 800695a:	4631      	mov	r1, r6
 800695c:	4622      	mov	r2, r4
 800695e:	4638      	mov	r0, r7
 8006960:	f7ff ff22 	bl	80067a8 <__multiply>
 8006964:	4680      	mov	r8, r0
 8006966:	4631      	mov	r1, r6
 8006968:	4638      	mov	r0, r7
 800696a:	f7ff fe53 	bl	8006614 <_Bfree>
 800696e:	4646      	mov	r6, r8
 8006970:	106d      	asrs	r5, r5, #1
 8006972:	d00b      	beq.n	800698c <__pow5mult+0xa0>
 8006974:	6820      	ldr	r0, [r4, #0]
 8006976:	b938      	cbnz	r0, 8006988 <__pow5mult+0x9c>
 8006978:	4622      	mov	r2, r4
 800697a:	4621      	mov	r1, r4
 800697c:	4638      	mov	r0, r7
 800697e:	f7ff ff13 	bl	80067a8 <__multiply>
 8006982:	6020      	str	r0, [r4, #0]
 8006984:	f8c0 9000 	str.w	r9, [r0]
 8006988:	4604      	mov	r4, r0
 800698a:	e7e4      	b.n	8006956 <__pow5mult+0x6a>
 800698c:	4630      	mov	r0, r6
 800698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006992:	bf00      	nop
 8006994:	08007de4 	.word	0x08007de4
 8006998:	08007cb1 	.word	0x08007cb1
 800699c:	08007d31 	.word	0x08007d31

080069a0 <__lshift>:
 80069a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	460c      	mov	r4, r1
 80069a6:	4607      	mov	r7, r0
 80069a8:	4691      	mov	r9, r2
 80069aa:	6923      	ldr	r3, [r4, #16]
 80069ac:	6849      	ldr	r1, [r1, #4]
 80069ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069b2:	68a3      	ldr	r3, [r4, #8]
 80069b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069b8:	f108 0601 	add.w	r6, r8, #1
 80069bc:	42b3      	cmp	r3, r6
 80069be:	db0b      	blt.n	80069d8 <__lshift+0x38>
 80069c0:	4638      	mov	r0, r7
 80069c2:	f7ff fde7 	bl	8006594 <_Balloc>
 80069c6:	4605      	mov	r5, r0
 80069c8:	b948      	cbnz	r0, 80069de <__lshift+0x3e>
 80069ca:	4602      	mov	r2, r0
 80069cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069d0:	4b27      	ldr	r3, [pc, #156]	@ (8006a70 <__lshift+0xd0>)
 80069d2:	4828      	ldr	r0, [pc, #160]	@ (8006a74 <__lshift+0xd4>)
 80069d4:	f000 fbe2 	bl	800719c <__assert_func>
 80069d8:	3101      	adds	r1, #1
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	e7ee      	b.n	80069bc <__lshift+0x1c>
 80069de:	2300      	movs	r3, #0
 80069e0:	f100 0114 	add.w	r1, r0, #20
 80069e4:	f100 0210 	add.w	r2, r0, #16
 80069e8:	4618      	mov	r0, r3
 80069ea:	4553      	cmp	r3, sl
 80069ec:	db33      	blt.n	8006a56 <__lshift+0xb6>
 80069ee:	6920      	ldr	r0, [r4, #16]
 80069f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069f4:	f104 0314 	add.w	r3, r4, #20
 80069f8:	f019 091f 	ands.w	r9, r9, #31
 80069fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a04:	d02b      	beq.n	8006a5e <__lshift+0xbe>
 8006a06:	468a      	mov	sl, r1
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f1c9 0e20 	rsb	lr, r9, #32
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	fa00 f009 	lsl.w	r0, r0, r9
 8006a14:	4310      	orrs	r0, r2
 8006a16:	f84a 0b04 	str.w	r0, [sl], #4
 8006a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a1e:	459c      	cmp	ip, r3
 8006a20:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a24:	d8f3      	bhi.n	8006a0e <__lshift+0x6e>
 8006a26:	ebac 0304 	sub.w	r3, ip, r4
 8006a2a:	3b15      	subs	r3, #21
 8006a2c:	f023 0303 	bic.w	r3, r3, #3
 8006a30:	3304      	adds	r3, #4
 8006a32:	f104 0015 	add.w	r0, r4, #21
 8006a36:	4560      	cmp	r0, ip
 8006a38:	bf88      	it	hi
 8006a3a:	2304      	movhi	r3, #4
 8006a3c:	50ca      	str	r2, [r1, r3]
 8006a3e:	b10a      	cbz	r2, 8006a44 <__lshift+0xa4>
 8006a40:	f108 0602 	add.w	r6, r8, #2
 8006a44:	3e01      	subs	r6, #1
 8006a46:	4638      	mov	r0, r7
 8006a48:	4621      	mov	r1, r4
 8006a4a:	612e      	str	r6, [r5, #16]
 8006a4c:	f7ff fde2 	bl	8006614 <_Bfree>
 8006a50:	4628      	mov	r0, r5
 8006a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	e7c5      	b.n	80069ea <__lshift+0x4a>
 8006a5e:	3904      	subs	r1, #4
 8006a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a64:	459c      	cmp	ip, r3
 8006a66:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a6a:	d8f9      	bhi.n	8006a60 <__lshift+0xc0>
 8006a6c:	e7ea      	b.n	8006a44 <__lshift+0xa4>
 8006a6e:	bf00      	nop
 8006a70:	08007d20 	.word	0x08007d20
 8006a74:	08007d31 	.word	0x08007d31

08006a78 <__mcmp>:
 8006a78:	4603      	mov	r3, r0
 8006a7a:	690a      	ldr	r2, [r1, #16]
 8006a7c:	6900      	ldr	r0, [r0, #16]
 8006a7e:	b530      	push	{r4, r5, lr}
 8006a80:	1a80      	subs	r0, r0, r2
 8006a82:	d10e      	bne.n	8006aa2 <__mcmp+0x2a>
 8006a84:	3314      	adds	r3, #20
 8006a86:	3114      	adds	r1, #20
 8006a88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a98:	4295      	cmp	r5, r2
 8006a9a:	d003      	beq.n	8006aa4 <__mcmp+0x2c>
 8006a9c:	d205      	bcs.n	8006aaa <__mcmp+0x32>
 8006a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa2:	bd30      	pop	{r4, r5, pc}
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	d3f3      	bcc.n	8006a90 <__mcmp+0x18>
 8006aa8:	e7fb      	b.n	8006aa2 <__mcmp+0x2a>
 8006aaa:	2001      	movs	r0, #1
 8006aac:	e7f9      	b.n	8006aa2 <__mcmp+0x2a>
	...

08006ab0 <__mdiff>:
 8006ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	4689      	mov	r9, r1
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4648      	mov	r0, r9
 8006abc:	4614      	mov	r4, r2
 8006abe:	f7ff ffdb 	bl	8006a78 <__mcmp>
 8006ac2:	1e05      	subs	r5, r0, #0
 8006ac4:	d112      	bne.n	8006aec <__mdiff+0x3c>
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff fd63 	bl	8006594 <_Balloc>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	b928      	cbnz	r0, 8006ade <__mdiff+0x2e>
 8006ad2:	f240 2137 	movw	r1, #567	@ 0x237
 8006ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8006bd0 <__mdiff+0x120>)
 8006ad8:	483e      	ldr	r0, [pc, #248]	@ (8006bd4 <__mdiff+0x124>)
 8006ada:	f000 fb5f 	bl	800719c <__assert_func>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	b003      	add	sp, #12
 8006ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aec:	bfbc      	itt	lt
 8006aee:	464b      	movlt	r3, r9
 8006af0:	46a1      	movlt	r9, r4
 8006af2:	4630      	mov	r0, r6
 8006af4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006af8:	bfba      	itte	lt
 8006afa:	461c      	movlt	r4, r3
 8006afc:	2501      	movlt	r5, #1
 8006afe:	2500      	movge	r5, #0
 8006b00:	f7ff fd48 	bl	8006594 <_Balloc>
 8006b04:	4602      	mov	r2, r0
 8006b06:	b918      	cbnz	r0, 8006b10 <__mdiff+0x60>
 8006b08:	f240 2145 	movw	r1, #581	@ 0x245
 8006b0c:	4b30      	ldr	r3, [pc, #192]	@ (8006bd0 <__mdiff+0x120>)
 8006b0e:	e7e3      	b.n	8006ad8 <__mdiff+0x28>
 8006b10:	f100 0b14 	add.w	fp, r0, #20
 8006b14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b18:	f109 0310 	add.w	r3, r9, #16
 8006b1c:	60c5      	str	r5, [r0, #12]
 8006b1e:	f04f 0c00 	mov.w	ip, #0
 8006b22:	f109 0514 	add.w	r5, r9, #20
 8006b26:	46d9      	mov	r9, fp
 8006b28:	6926      	ldr	r6, [r4, #16]
 8006b2a:	f104 0e14 	add.w	lr, r4, #20
 8006b2e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b32:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	9b01      	ldr	r3, [sp, #4]
 8006b3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b42:	b281      	uxth	r1, r0
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	fa1f f38a 	uxth.w	r3, sl
 8006b4a:	1a5b      	subs	r3, r3, r1
 8006b4c:	0c00      	lsrs	r0, r0, #16
 8006b4e:	4463      	add	r3, ip
 8006b50:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b54:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b5e:	4576      	cmp	r6, lr
 8006b60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b64:	f849 3b04 	str.w	r3, [r9], #4
 8006b68:	d8e6      	bhi.n	8006b38 <__mdiff+0x88>
 8006b6a:	1b33      	subs	r3, r6, r4
 8006b6c:	3b15      	subs	r3, #21
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	3415      	adds	r4, #21
 8006b74:	3304      	adds	r3, #4
 8006b76:	42a6      	cmp	r6, r4
 8006b78:	bf38      	it	cc
 8006b7a:	2304      	movcc	r3, #4
 8006b7c:	441d      	add	r5, r3
 8006b7e:	445b      	add	r3, fp
 8006b80:	461e      	mov	r6, r3
 8006b82:	462c      	mov	r4, r5
 8006b84:	4544      	cmp	r4, r8
 8006b86:	d30e      	bcc.n	8006ba6 <__mdiff+0xf6>
 8006b88:	f108 0103 	add.w	r1, r8, #3
 8006b8c:	1b49      	subs	r1, r1, r5
 8006b8e:	f021 0103 	bic.w	r1, r1, #3
 8006b92:	3d03      	subs	r5, #3
 8006b94:	45a8      	cmp	r8, r5
 8006b96:	bf38      	it	cc
 8006b98:	2100      	movcc	r1, #0
 8006b9a:	440b      	add	r3, r1
 8006b9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ba0:	b199      	cbz	r1, 8006bca <__mdiff+0x11a>
 8006ba2:	6117      	str	r7, [r2, #16]
 8006ba4:	e79e      	b.n	8006ae4 <__mdiff+0x34>
 8006ba6:	46e6      	mov	lr, ip
 8006ba8:	f854 1b04 	ldr.w	r1, [r4], #4
 8006bac:	fa1f fc81 	uxth.w	ip, r1
 8006bb0:	44f4      	add	ip, lr
 8006bb2:	0c08      	lsrs	r0, r1, #16
 8006bb4:	4471      	add	r1, lr
 8006bb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006bba:	b289      	uxth	r1, r1
 8006bbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006bc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bc4:	f846 1b04 	str.w	r1, [r6], #4
 8006bc8:	e7dc      	b.n	8006b84 <__mdiff+0xd4>
 8006bca:	3f01      	subs	r7, #1
 8006bcc:	e7e6      	b.n	8006b9c <__mdiff+0xec>
 8006bce:	bf00      	nop
 8006bd0:	08007d20 	.word	0x08007d20
 8006bd4:	08007d31 	.word	0x08007d31

08006bd8 <__d2b>:
 8006bd8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4690      	mov	r8, r2
 8006be0:	4699      	mov	r9, r3
 8006be2:	9e08      	ldr	r6, [sp, #32]
 8006be4:	f7ff fcd6 	bl	8006594 <_Balloc>
 8006be8:	4604      	mov	r4, r0
 8006bea:	b930      	cbnz	r0, 8006bfa <__d2b+0x22>
 8006bec:	4602      	mov	r2, r0
 8006bee:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bf2:	4b23      	ldr	r3, [pc, #140]	@ (8006c80 <__d2b+0xa8>)
 8006bf4:	4823      	ldr	r0, [pc, #140]	@ (8006c84 <__d2b+0xac>)
 8006bf6:	f000 fad1 	bl	800719c <__assert_func>
 8006bfa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c02:	b10d      	cbz	r5, 8006c08 <__d2b+0x30>
 8006c04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c08:	9301      	str	r3, [sp, #4]
 8006c0a:	f1b8 0300 	subs.w	r3, r8, #0
 8006c0e:	d024      	beq.n	8006c5a <__d2b+0x82>
 8006c10:	4668      	mov	r0, sp
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	f7ff fd85 	bl	8006722 <__lo0bits>
 8006c18:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c1c:	b1d8      	cbz	r0, 8006c56 <__d2b+0x7e>
 8006c1e:	f1c0 0320 	rsb	r3, r0, #32
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	430b      	orrs	r3, r1
 8006c28:	40c2      	lsrs	r2, r0
 8006c2a:	6163      	str	r3, [r4, #20]
 8006c2c:	9201      	str	r2, [sp, #4]
 8006c2e:	9b01      	ldr	r3, [sp, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bf0c      	ite	eq
 8006c34:	2201      	moveq	r2, #1
 8006c36:	2202      	movne	r2, #2
 8006c38:	61a3      	str	r3, [r4, #24]
 8006c3a:	6122      	str	r2, [r4, #16]
 8006c3c:	b1ad      	cbz	r5, 8006c6a <__d2b+0x92>
 8006c3e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c42:	4405      	add	r5, r0
 8006c44:	6035      	str	r5, [r6, #0]
 8006c46:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4c:	6018      	str	r0, [r3, #0]
 8006c4e:	4620      	mov	r0, r4
 8006c50:	b002      	add	sp, #8
 8006c52:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006c56:	6161      	str	r1, [r4, #20]
 8006c58:	e7e9      	b.n	8006c2e <__d2b+0x56>
 8006c5a:	a801      	add	r0, sp, #4
 8006c5c:	f7ff fd61 	bl	8006722 <__lo0bits>
 8006c60:	9b01      	ldr	r3, [sp, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	6163      	str	r3, [r4, #20]
 8006c66:	3020      	adds	r0, #32
 8006c68:	e7e7      	b.n	8006c3a <__d2b+0x62>
 8006c6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c72:	6030      	str	r0, [r6, #0]
 8006c74:	6918      	ldr	r0, [r3, #16]
 8006c76:	f7ff fd35 	bl	80066e4 <__hi0bits>
 8006c7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c7e:	e7e4      	b.n	8006c4a <__d2b+0x72>
 8006c80:	08007d20 	.word	0x08007d20
 8006c84:	08007d31 	.word	0x08007d31

08006c88 <__sfputc_r>:
 8006c88:	6893      	ldr	r3, [r2, #8]
 8006c8a:	b410      	push	{r4}
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	6093      	str	r3, [r2, #8]
 8006c92:	da07      	bge.n	8006ca4 <__sfputc_r+0x1c>
 8006c94:	6994      	ldr	r4, [r2, #24]
 8006c96:	42a3      	cmp	r3, r4
 8006c98:	db01      	blt.n	8006c9e <__sfputc_r+0x16>
 8006c9a:	290a      	cmp	r1, #10
 8006c9c:	d102      	bne.n	8006ca4 <__sfputc_r+0x1c>
 8006c9e:	bc10      	pop	{r4}
 8006ca0:	f7fe bbfb 	b.w	800549a <__swbuf_r>
 8006ca4:	6813      	ldr	r3, [r2, #0]
 8006ca6:	1c58      	adds	r0, r3, #1
 8006ca8:	6010      	str	r0, [r2, #0]
 8006caa:	7019      	strb	r1, [r3, #0]
 8006cac:	4608      	mov	r0, r1
 8006cae:	bc10      	pop	{r4}
 8006cb0:	4770      	bx	lr

08006cb2 <__sfputs_r>:
 8006cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb4:	4606      	mov	r6, r0
 8006cb6:	460f      	mov	r7, r1
 8006cb8:	4614      	mov	r4, r2
 8006cba:	18d5      	adds	r5, r2, r3
 8006cbc:	42ac      	cmp	r4, r5
 8006cbe:	d101      	bne.n	8006cc4 <__sfputs_r+0x12>
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	e007      	b.n	8006cd4 <__sfputs_r+0x22>
 8006cc4:	463a      	mov	r2, r7
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ccc:	f7ff ffdc 	bl	8006c88 <__sfputc_r>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d1f3      	bne.n	8006cbc <__sfputs_r+0xa>
 8006cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006cd8 <_vfiprintf_r>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	460d      	mov	r5, r1
 8006cde:	4614      	mov	r4, r2
 8006ce0:	4698      	mov	r8, r3
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	b09d      	sub	sp, #116	@ 0x74
 8006ce6:	b118      	cbz	r0, 8006cf0 <_vfiprintf_r+0x18>
 8006ce8:	6a03      	ldr	r3, [r0, #32]
 8006cea:	b90b      	cbnz	r3, 8006cf0 <_vfiprintf_r+0x18>
 8006cec:	f7fe faec 	bl	80052c8 <__sinit>
 8006cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cf2:	07d9      	lsls	r1, r3, #31
 8006cf4:	d405      	bmi.n	8006d02 <_vfiprintf_r+0x2a>
 8006cf6:	89ab      	ldrh	r3, [r5, #12]
 8006cf8:	059a      	lsls	r2, r3, #22
 8006cfa:	d402      	bmi.n	8006d02 <_vfiprintf_r+0x2a>
 8006cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cfe:	f7fe fcde 	bl	80056be <__retarget_lock_acquire_recursive>
 8006d02:	89ab      	ldrh	r3, [r5, #12]
 8006d04:	071b      	lsls	r3, r3, #28
 8006d06:	d501      	bpl.n	8006d0c <_vfiprintf_r+0x34>
 8006d08:	692b      	ldr	r3, [r5, #16]
 8006d0a:	b99b      	cbnz	r3, 8006d34 <_vfiprintf_r+0x5c>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f7fe fc02 	bl	8005518 <__swsetup_r>
 8006d14:	b170      	cbz	r0, 8006d34 <_vfiprintf_r+0x5c>
 8006d16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d18:	07dc      	lsls	r4, r3, #31
 8006d1a:	d504      	bpl.n	8006d26 <_vfiprintf_r+0x4e>
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	b01d      	add	sp, #116	@ 0x74
 8006d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d26:	89ab      	ldrh	r3, [r5, #12]
 8006d28:	0598      	lsls	r0, r3, #22
 8006d2a:	d4f7      	bmi.n	8006d1c <_vfiprintf_r+0x44>
 8006d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d2e:	f7fe fcc7 	bl	80056c0 <__retarget_lock_release_recursive>
 8006d32:	e7f3      	b.n	8006d1c <_vfiprintf_r+0x44>
 8006d34:	2300      	movs	r3, #0
 8006d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d38:	2320      	movs	r3, #32
 8006d3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d3e:	2330      	movs	r3, #48	@ 0x30
 8006d40:	f04f 0901 	mov.w	r9, #1
 8006d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d48:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006ef4 <_vfiprintf_r+0x21c>
 8006d4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d50:	4623      	mov	r3, r4
 8006d52:	469a      	mov	sl, r3
 8006d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d58:	b10a      	cbz	r2, 8006d5e <_vfiprintf_r+0x86>
 8006d5a:	2a25      	cmp	r2, #37	@ 0x25
 8006d5c:	d1f9      	bne.n	8006d52 <_vfiprintf_r+0x7a>
 8006d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d62:	d00b      	beq.n	8006d7c <_vfiprintf_r+0xa4>
 8006d64:	465b      	mov	r3, fp
 8006d66:	4622      	mov	r2, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4630      	mov	r0, r6
 8006d6c:	f7ff ffa1 	bl	8006cb2 <__sfputs_r>
 8006d70:	3001      	adds	r0, #1
 8006d72:	f000 80a7 	beq.w	8006ec4 <_vfiprintf_r+0x1ec>
 8006d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d78:	445a      	add	r2, fp
 8006d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 809f 	beq.w	8006ec4 <_vfiprintf_r+0x1ec>
 8006d86:	2300      	movs	r3, #0
 8006d88:	f04f 32ff 	mov.w	r2, #4294967295
 8006d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d90:	f10a 0a01 	add.w	sl, sl, #1
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	9307      	str	r3, [sp, #28]
 8006d98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d9e:	4654      	mov	r4, sl
 8006da0:	2205      	movs	r2, #5
 8006da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006da6:	4853      	ldr	r0, [pc, #332]	@ (8006ef4 <_vfiprintf_r+0x21c>)
 8006da8:	f7fe fc8b 	bl	80056c2 <memchr>
 8006dac:	9a04      	ldr	r2, [sp, #16]
 8006dae:	b9d8      	cbnz	r0, 8006de8 <_vfiprintf_r+0x110>
 8006db0:	06d1      	lsls	r1, r2, #27
 8006db2:	bf44      	itt	mi
 8006db4:	2320      	movmi	r3, #32
 8006db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dba:	0713      	lsls	r3, r2, #28
 8006dbc:	bf44      	itt	mi
 8006dbe:	232b      	movmi	r3, #43	@ 0x2b
 8006dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dca:	d015      	beq.n	8006df8 <_vfiprintf_r+0x120>
 8006dcc:	4654      	mov	r4, sl
 8006dce:	2000      	movs	r0, #0
 8006dd0:	f04f 0c0a 	mov.w	ip, #10
 8006dd4:	9a07      	ldr	r2, [sp, #28]
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ddc:	3b30      	subs	r3, #48	@ 0x30
 8006dde:	2b09      	cmp	r3, #9
 8006de0:	d94b      	bls.n	8006e7a <_vfiprintf_r+0x1a2>
 8006de2:	b1b0      	cbz	r0, 8006e12 <_vfiprintf_r+0x13a>
 8006de4:	9207      	str	r2, [sp, #28]
 8006de6:	e014      	b.n	8006e12 <_vfiprintf_r+0x13a>
 8006de8:	eba0 0308 	sub.w	r3, r0, r8
 8006dec:	fa09 f303 	lsl.w	r3, r9, r3
 8006df0:	4313      	orrs	r3, r2
 8006df2:	46a2      	mov	sl, r4
 8006df4:	9304      	str	r3, [sp, #16]
 8006df6:	e7d2      	b.n	8006d9e <_vfiprintf_r+0xc6>
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	1d19      	adds	r1, r3, #4
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	9103      	str	r1, [sp, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bfbb      	ittet	lt
 8006e04:	425b      	neglt	r3, r3
 8006e06:	f042 0202 	orrlt.w	r2, r2, #2
 8006e0a:	9307      	strge	r3, [sp, #28]
 8006e0c:	9307      	strlt	r3, [sp, #28]
 8006e0e:	bfb8      	it	lt
 8006e10:	9204      	strlt	r2, [sp, #16]
 8006e12:	7823      	ldrb	r3, [r4, #0]
 8006e14:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e16:	d10a      	bne.n	8006e2e <_vfiprintf_r+0x156>
 8006e18:	7863      	ldrb	r3, [r4, #1]
 8006e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e1c:	d132      	bne.n	8006e84 <_vfiprintf_r+0x1ac>
 8006e1e:	9b03      	ldr	r3, [sp, #12]
 8006e20:	3402      	adds	r4, #2
 8006e22:	1d1a      	adds	r2, r3, #4
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	9203      	str	r2, [sp, #12]
 8006e28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e2c:	9305      	str	r3, [sp, #20]
 8006e2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006ef8 <_vfiprintf_r+0x220>
 8006e32:	2203      	movs	r2, #3
 8006e34:	4650      	mov	r0, sl
 8006e36:	7821      	ldrb	r1, [r4, #0]
 8006e38:	f7fe fc43 	bl	80056c2 <memchr>
 8006e3c:	b138      	cbz	r0, 8006e4e <_vfiprintf_r+0x176>
 8006e3e:	2240      	movs	r2, #64	@ 0x40
 8006e40:	9b04      	ldr	r3, [sp, #16]
 8006e42:	eba0 000a 	sub.w	r0, r0, sl
 8006e46:	4082      	lsls	r2, r0
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	3401      	adds	r4, #1
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e52:	2206      	movs	r2, #6
 8006e54:	4829      	ldr	r0, [pc, #164]	@ (8006efc <_vfiprintf_r+0x224>)
 8006e56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e5a:	f7fe fc32 	bl	80056c2 <memchr>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	d03f      	beq.n	8006ee2 <_vfiprintf_r+0x20a>
 8006e62:	4b27      	ldr	r3, [pc, #156]	@ (8006f00 <_vfiprintf_r+0x228>)
 8006e64:	bb1b      	cbnz	r3, 8006eae <_vfiprintf_r+0x1d6>
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	3307      	adds	r3, #7
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	3308      	adds	r3, #8
 8006e70:	9303      	str	r3, [sp, #12]
 8006e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e74:	443b      	add	r3, r7
 8006e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e78:	e76a      	b.n	8006d50 <_vfiprintf_r+0x78>
 8006e7a:	460c      	mov	r4, r1
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e82:	e7a8      	b.n	8006dd6 <_vfiprintf_r+0xfe>
 8006e84:	2300      	movs	r3, #0
 8006e86:	f04f 0c0a 	mov.w	ip, #10
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	3401      	adds	r4, #1
 8006e8e:	9305      	str	r3, [sp, #20]
 8006e90:	4620      	mov	r0, r4
 8006e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e96:	3a30      	subs	r2, #48	@ 0x30
 8006e98:	2a09      	cmp	r2, #9
 8006e9a:	d903      	bls.n	8006ea4 <_vfiprintf_r+0x1cc>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0c6      	beq.n	8006e2e <_vfiprintf_r+0x156>
 8006ea0:	9105      	str	r1, [sp, #20]
 8006ea2:	e7c4      	b.n	8006e2e <_vfiprintf_r+0x156>
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006eac:	e7f0      	b.n	8006e90 <_vfiprintf_r+0x1b8>
 8006eae:	ab03      	add	r3, sp, #12
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	4b13      	ldr	r3, [pc, #76]	@ (8006f04 <_vfiprintf_r+0x22c>)
 8006eb8:	a904      	add	r1, sp, #16
 8006eba:	f7fd fdbd 	bl	8004a38 <_printf_float>
 8006ebe:	4607      	mov	r7, r0
 8006ec0:	1c78      	adds	r0, r7, #1
 8006ec2:	d1d6      	bne.n	8006e72 <_vfiprintf_r+0x19a>
 8006ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ec6:	07d9      	lsls	r1, r3, #31
 8006ec8:	d405      	bmi.n	8006ed6 <_vfiprintf_r+0x1fe>
 8006eca:	89ab      	ldrh	r3, [r5, #12]
 8006ecc:	059a      	lsls	r2, r3, #22
 8006ece:	d402      	bmi.n	8006ed6 <_vfiprintf_r+0x1fe>
 8006ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006ed2:	f7fe fbf5 	bl	80056c0 <__retarget_lock_release_recursive>
 8006ed6:	89ab      	ldrh	r3, [r5, #12]
 8006ed8:	065b      	lsls	r3, r3, #25
 8006eda:	f53f af1f 	bmi.w	8006d1c <_vfiprintf_r+0x44>
 8006ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ee0:	e71e      	b.n	8006d20 <_vfiprintf_r+0x48>
 8006ee2:	ab03      	add	r3, sp, #12
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	462a      	mov	r2, r5
 8006ee8:	4630      	mov	r0, r6
 8006eea:	4b06      	ldr	r3, [pc, #24]	@ (8006f04 <_vfiprintf_r+0x22c>)
 8006eec:	a904      	add	r1, sp, #16
 8006eee:	f7fe f841 	bl	8004f74 <_printf_i>
 8006ef2:	e7e4      	b.n	8006ebe <_vfiprintf_r+0x1e6>
 8006ef4:	08007d8a 	.word	0x08007d8a
 8006ef8:	08007d90 	.word	0x08007d90
 8006efc:	08007d94 	.word	0x08007d94
 8006f00:	08004a39 	.word	0x08004a39
 8006f04:	08006cb3 	.word	0x08006cb3

08006f08 <__sflush_r>:
 8006f08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	0716      	lsls	r6, r2, #28
 8006f10:	4605      	mov	r5, r0
 8006f12:	460c      	mov	r4, r1
 8006f14:	d454      	bmi.n	8006fc0 <__sflush_r+0xb8>
 8006f16:	684b      	ldr	r3, [r1, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	dc02      	bgt.n	8006f22 <__sflush_r+0x1a>
 8006f1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	dd48      	ble.n	8006fb4 <__sflush_r+0xac>
 8006f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	d045      	beq.n	8006fb4 <__sflush_r+0xac>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f2e:	682f      	ldr	r7, [r5, #0]
 8006f30:	6a21      	ldr	r1, [r4, #32]
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	d030      	beq.n	8006f98 <__sflush_r+0x90>
 8006f36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	0759      	lsls	r1, r3, #29
 8006f3c:	d505      	bpl.n	8006f4a <__sflush_r+0x42>
 8006f3e:	6863      	ldr	r3, [r4, #4]
 8006f40:	1ad2      	subs	r2, r2, r3
 8006f42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f44:	b10b      	cbz	r3, 8006f4a <__sflush_r+0x42>
 8006f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f48:	1ad2      	subs	r2, r2, r3
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f50:	6a21      	ldr	r1, [r4, #32]
 8006f52:	47b0      	blx	r6
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	d106      	bne.n	8006f68 <__sflush_r+0x60>
 8006f5a:	6829      	ldr	r1, [r5, #0]
 8006f5c:	291d      	cmp	r1, #29
 8006f5e:	d82b      	bhi.n	8006fb8 <__sflush_r+0xb0>
 8006f60:	4a28      	ldr	r2, [pc, #160]	@ (8007004 <__sflush_r+0xfc>)
 8006f62:	40ca      	lsrs	r2, r1
 8006f64:	07d6      	lsls	r6, r2, #31
 8006f66:	d527      	bpl.n	8006fb8 <__sflush_r+0xb0>
 8006f68:	2200      	movs	r2, #0
 8006f6a:	6062      	str	r2, [r4, #4]
 8006f6c:	6922      	ldr	r2, [r4, #16]
 8006f6e:	04d9      	lsls	r1, r3, #19
 8006f70:	6022      	str	r2, [r4, #0]
 8006f72:	d504      	bpl.n	8006f7e <__sflush_r+0x76>
 8006f74:	1c42      	adds	r2, r0, #1
 8006f76:	d101      	bne.n	8006f7c <__sflush_r+0x74>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b903      	cbnz	r3, 8006f7e <__sflush_r+0x76>
 8006f7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f80:	602f      	str	r7, [r5, #0]
 8006f82:	b1b9      	cbz	r1, 8006fb4 <__sflush_r+0xac>
 8006f84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f88:	4299      	cmp	r1, r3
 8006f8a:	d002      	beq.n	8006f92 <__sflush_r+0x8a>
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	f7ff fa03 	bl	8006398 <_free_r>
 8006f92:	2300      	movs	r3, #0
 8006f94:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f96:	e00d      	b.n	8006fb4 <__sflush_r+0xac>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b0      	blx	r6
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	1c50      	adds	r0, r2, #1
 8006fa2:	d1c9      	bne.n	8006f38 <__sflush_r+0x30>
 8006fa4:	682b      	ldr	r3, [r5, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0c6      	beq.n	8006f38 <__sflush_r+0x30>
 8006faa:	2b1d      	cmp	r3, #29
 8006fac:	d001      	beq.n	8006fb2 <__sflush_r+0xaa>
 8006fae:	2b16      	cmp	r3, #22
 8006fb0:	d11d      	bne.n	8006fee <__sflush_r+0xe6>
 8006fb2:	602f      	str	r7, [r5, #0]
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e021      	b.n	8006ffc <__sflush_r+0xf4>
 8006fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fbc:	b21b      	sxth	r3, r3
 8006fbe:	e01a      	b.n	8006ff6 <__sflush_r+0xee>
 8006fc0:	690f      	ldr	r7, [r1, #16]
 8006fc2:	2f00      	cmp	r7, #0
 8006fc4:	d0f6      	beq.n	8006fb4 <__sflush_r+0xac>
 8006fc6:	0793      	lsls	r3, r2, #30
 8006fc8:	bf18      	it	ne
 8006fca:	2300      	movne	r3, #0
 8006fcc:	680e      	ldr	r6, [r1, #0]
 8006fce:	bf08      	it	eq
 8006fd0:	694b      	ldreq	r3, [r1, #20]
 8006fd2:	1bf6      	subs	r6, r6, r7
 8006fd4:	600f      	str	r7, [r1, #0]
 8006fd6:	608b      	str	r3, [r1, #8]
 8006fd8:	2e00      	cmp	r6, #0
 8006fda:	ddeb      	ble.n	8006fb4 <__sflush_r+0xac>
 8006fdc:	4633      	mov	r3, r6
 8006fde:	463a      	mov	r2, r7
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	6a21      	ldr	r1, [r4, #32]
 8006fe4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006fe8:	47e0      	blx	ip
 8006fea:	2800      	cmp	r0, #0
 8006fec:	dc07      	bgt.n	8006ffe <__sflush_r+0xf6>
 8006fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffa:	81a3      	strh	r3, [r4, #12]
 8006ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffe:	4407      	add	r7, r0
 8007000:	1a36      	subs	r6, r6, r0
 8007002:	e7e9      	b.n	8006fd8 <__sflush_r+0xd0>
 8007004:	20400001 	.word	0x20400001

08007008 <_fflush_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b913      	cbnz	r3, 8007018 <_fflush_r+0x10>
 8007012:	2500      	movs	r5, #0
 8007014:	4628      	mov	r0, r5
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	b118      	cbz	r0, 8007022 <_fflush_r+0x1a>
 800701a:	6a03      	ldr	r3, [r0, #32]
 800701c:	b90b      	cbnz	r3, 8007022 <_fflush_r+0x1a>
 800701e:	f7fe f953 	bl	80052c8 <__sinit>
 8007022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f3      	beq.n	8007012 <_fflush_r+0xa>
 800702a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800702c:	07d0      	lsls	r0, r2, #31
 800702e:	d404      	bmi.n	800703a <_fflush_r+0x32>
 8007030:	0599      	lsls	r1, r3, #22
 8007032:	d402      	bmi.n	800703a <_fflush_r+0x32>
 8007034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007036:	f7fe fb42 	bl	80056be <__retarget_lock_acquire_recursive>
 800703a:	4628      	mov	r0, r5
 800703c:	4621      	mov	r1, r4
 800703e:	f7ff ff63 	bl	8006f08 <__sflush_r>
 8007042:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007044:	4605      	mov	r5, r0
 8007046:	07da      	lsls	r2, r3, #31
 8007048:	d4e4      	bmi.n	8007014 <_fflush_r+0xc>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	059b      	lsls	r3, r3, #22
 800704e:	d4e1      	bmi.n	8007014 <_fflush_r+0xc>
 8007050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007052:	f7fe fb35 	bl	80056c0 <__retarget_lock_release_recursive>
 8007056:	e7dd      	b.n	8007014 <_fflush_r+0xc>

08007058 <__swhatbuf_r>:
 8007058:	b570      	push	{r4, r5, r6, lr}
 800705a:	460c      	mov	r4, r1
 800705c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007060:	4615      	mov	r5, r2
 8007062:	2900      	cmp	r1, #0
 8007064:	461e      	mov	r6, r3
 8007066:	b096      	sub	sp, #88	@ 0x58
 8007068:	da0c      	bge.n	8007084 <__swhatbuf_r+0x2c>
 800706a:	89a3      	ldrh	r3, [r4, #12]
 800706c:	2100      	movs	r1, #0
 800706e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007072:	bf14      	ite	ne
 8007074:	2340      	movne	r3, #64	@ 0x40
 8007076:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800707a:	2000      	movs	r0, #0
 800707c:	6031      	str	r1, [r6, #0]
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	b016      	add	sp, #88	@ 0x58
 8007082:	bd70      	pop	{r4, r5, r6, pc}
 8007084:	466a      	mov	r2, sp
 8007086:	f000 f849 	bl	800711c <_fstat_r>
 800708a:	2800      	cmp	r0, #0
 800708c:	dbed      	blt.n	800706a <__swhatbuf_r+0x12>
 800708e:	9901      	ldr	r1, [sp, #4]
 8007090:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007094:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007098:	4259      	negs	r1, r3
 800709a:	4159      	adcs	r1, r3
 800709c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070a0:	e7eb      	b.n	800707a <__swhatbuf_r+0x22>

080070a2 <__smakebuf_r>:
 80070a2:	898b      	ldrh	r3, [r1, #12]
 80070a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070a6:	079d      	lsls	r5, r3, #30
 80070a8:	4606      	mov	r6, r0
 80070aa:	460c      	mov	r4, r1
 80070ac:	d507      	bpl.n	80070be <__smakebuf_r+0x1c>
 80070ae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	2301      	movs	r3, #1
 80070b8:	6163      	str	r3, [r4, #20]
 80070ba:	b003      	add	sp, #12
 80070bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070be:	466a      	mov	r2, sp
 80070c0:	ab01      	add	r3, sp, #4
 80070c2:	f7ff ffc9 	bl	8007058 <__swhatbuf_r>
 80070c6:	9f00      	ldr	r7, [sp, #0]
 80070c8:	4605      	mov	r5, r0
 80070ca:	4639      	mov	r1, r7
 80070cc:	4630      	mov	r0, r6
 80070ce:	f7ff f9d5 	bl	800647c <_malloc_r>
 80070d2:	b948      	cbnz	r0, 80070e8 <__smakebuf_r+0x46>
 80070d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d8:	059a      	lsls	r2, r3, #22
 80070da:	d4ee      	bmi.n	80070ba <__smakebuf_r+0x18>
 80070dc:	f023 0303 	bic.w	r3, r3, #3
 80070e0:	f043 0302 	orr.w	r3, r3, #2
 80070e4:	81a3      	strh	r3, [r4, #12]
 80070e6:	e7e2      	b.n	80070ae <__smakebuf_r+0xc>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	6020      	str	r0, [r4, #0]
 80070f8:	b15b      	cbz	r3, 8007112 <__smakebuf_r+0x70>
 80070fa:	4630      	mov	r0, r6
 80070fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007100:	f000 f81e 	bl	8007140 <_isatty_r>
 8007104:	b128      	cbz	r0, 8007112 <__smakebuf_r+0x70>
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	f043 0301 	orr.w	r3, r3, #1
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	89a3      	ldrh	r3, [r4, #12]
 8007114:	431d      	orrs	r5, r3
 8007116:	81a5      	strh	r5, [r4, #12]
 8007118:	e7cf      	b.n	80070ba <__smakebuf_r+0x18>
	...

0800711c <_fstat_r>:
 800711c:	b538      	push	{r3, r4, r5, lr}
 800711e:	2300      	movs	r3, #0
 8007120:	4d06      	ldr	r5, [pc, #24]	@ (800713c <_fstat_r+0x20>)
 8007122:	4604      	mov	r4, r0
 8007124:	4608      	mov	r0, r1
 8007126:	4611      	mov	r1, r2
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	f7fa fd91 	bl	8001c50 <_fstat>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	d102      	bne.n	8007138 <_fstat_r+0x1c>
 8007132:	682b      	ldr	r3, [r5, #0]
 8007134:	b103      	cbz	r3, 8007138 <_fstat_r+0x1c>
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	bd38      	pop	{r3, r4, r5, pc}
 800713a:	bf00      	nop
 800713c:	2000045c 	.word	0x2000045c

08007140 <_isatty_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	2300      	movs	r3, #0
 8007144:	4d05      	ldr	r5, [pc, #20]	@ (800715c <_isatty_r+0x1c>)
 8007146:	4604      	mov	r4, r0
 8007148:	4608      	mov	r0, r1
 800714a:	602b      	str	r3, [r5, #0]
 800714c:	f7fa fd8f 	bl	8001c6e <_isatty>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_isatty_r+0x1a>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_isatty_r+0x1a>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	2000045c 	.word	0x2000045c

08007160 <_sbrk_r>:
 8007160:	b538      	push	{r3, r4, r5, lr}
 8007162:	2300      	movs	r3, #0
 8007164:	4d05      	ldr	r5, [pc, #20]	@ (800717c <_sbrk_r+0x1c>)
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	602b      	str	r3, [r5, #0]
 800716c:	f7fa fd96 	bl	8001c9c <_sbrk>
 8007170:	1c43      	adds	r3, r0, #1
 8007172:	d102      	bne.n	800717a <_sbrk_r+0x1a>
 8007174:	682b      	ldr	r3, [r5, #0]
 8007176:	b103      	cbz	r3, 800717a <_sbrk_r+0x1a>
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	2000045c 	.word	0x2000045c

08007180 <memcpy>:
 8007180:	440a      	add	r2, r1
 8007182:	4291      	cmp	r1, r2
 8007184:	f100 33ff 	add.w	r3, r0, #4294967295
 8007188:	d100      	bne.n	800718c <memcpy+0xc>
 800718a:	4770      	bx	lr
 800718c:	b510      	push	{r4, lr}
 800718e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007192:	4291      	cmp	r1, r2
 8007194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007198:	d1f9      	bne.n	800718e <memcpy+0xe>
 800719a:	bd10      	pop	{r4, pc}

0800719c <__assert_func>:
 800719c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800719e:	4614      	mov	r4, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	4b09      	ldr	r3, [pc, #36]	@ (80071c8 <__assert_func+0x2c>)
 80071a4:	4605      	mov	r5, r0
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68d8      	ldr	r0, [r3, #12]
 80071aa:	b14c      	cbz	r4, 80071c0 <__assert_func+0x24>
 80071ac:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <__assert_func+0x30>)
 80071ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071b2:	9100      	str	r1, [sp, #0]
 80071b4:	462b      	mov	r3, r5
 80071b6:	4906      	ldr	r1, [pc, #24]	@ (80071d0 <__assert_func+0x34>)
 80071b8:	f000 f842 	bl	8007240 <fiprintf>
 80071bc:	f000 f852 	bl	8007264 <abort>
 80071c0:	4b04      	ldr	r3, [pc, #16]	@ (80071d4 <__assert_func+0x38>)
 80071c2:	461c      	mov	r4, r3
 80071c4:	e7f3      	b.n	80071ae <__assert_func+0x12>
 80071c6:	bf00      	nop
 80071c8:	20000018 	.word	0x20000018
 80071cc:	08007da5 	.word	0x08007da5
 80071d0:	08007db2 	.word	0x08007db2
 80071d4:	08007de0 	.word	0x08007de0

080071d8 <_calloc_r>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	fba1 5402 	umull	r5, r4, r1, r2
 80071de:	b934      	cbnz	r4, 80071ee <_calloc_r+0x16>
 80071e0:	4629      	mov	r1, r5
 80071e2:	f7ff f94b 	bl	800647c <_malloc_r>
 80071e6:	4606      	mov	r6, r0
 80071e8:	b928      	cbnz	r0, 80071f6 <_calloc_r+0x1e>
 80071ea:	4630      	mov	r0, r6
 80071ec:	bd70      	pop	{r4, r5, r6, pc}
 80071ee:	220c      	movs	r2, #12
 80071f0:	2600      	movs	r6, #0
 80071f2:	6002      	str	r2, [r0, #0]
 80071f4:	e7f9      	b.n	80071ea <_calloc_r+0x12>
 80071f6:	462a      	mov	r2, r5
 80071f8:	4621      	mov	r1, r4
 80071fa:	f7fe f9e3 	bl	80055c4 <memset>
 80071fe:	e7f4      	b.n	80071ea <_calloc_r+0x12>

08007200 <__ascii_mbtowc>:
 8007200:	b082      	sub	sp, #8
 8007202:	b901      	cbnz	r1, 8007206 <__ascii_mbtowc+0x6>
 8007204:	a901      	add	r1, sp, #4
 8007206:	b142      	cbz	r2, 800721a <__ascii_mbtowc+0x1a>
 8007208:	b14b      	cbz	r3, 800721e <__ascii_mbtowc+0x1e>
 800720a:	7813      	ldrb	r3, [r2, #0]
 800720c:	600b      	str	r3, [r1, #0]
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	1e10      	subs	r0, r2, #0
 8007212:	bf18      	it	ne
 8007214:	2001      	movne	r0, #1
 8007216:	b002      	add	sp, #8
 8007218:	4770      	bx	lr
 800721a:	4610      	mov	r0, r2
 800721c:	e7fb      	b.n	8007216 <__ascii_mbtowc+0x16>
 800721e:	f06f 0001 	mvn.w	r0, #1
 8007222:	e7f8      	b.n	8007216 <__ascii_mbtowc+0x16>

08007224 <__ascii_wctomb>:
 8007224:	4603      	mov	r3, r0
 8007226:	4608      	mov	r0, r1
 8007228:	b141      	cbz	r1, 800723c <__ascii_wctomb+0x18>
 800722a:	2aff      	cmp	r2, #255	@ 0xff
 800722c:	d904      	bls.n	8007238 <__ascii_wctomb+0x14>
 800722e:	228a      	movs	r2, #138	@ 0x8a
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	4770      	bx	lr
 8007238:	2001      	movs	r0, #1
 800723a:	700a      	strb	r2, [r1, #0]
 800723c:	4770      	bx	lr
	...

08007240 <fiprintf>:
 8007240:	b40e      	push	{r1, r2, r3}
 8007242:	b503      	push	{r0, r1, lr}
 8007244:	4601      	mov	r1, r0
 8007246:	ab03      	add	r3, sp, #12
 8007248:	4805      	ldr	r0, [pc, #20]	@ (8007260 <fiprintf+0x20>)
 800724a:	f853 2b04 	ldr.w	r2, [r3], #4
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	f7ff fd41 	bl	8006cd8 <_vfiprintf_r>
 8007256:	b002      	add	sp, #8
 8007258:	f85d eb04 	ldr.w	lr, [sp], #4
 800725c:	b003      	add	sp, #12
 800725e:	4770      	bx	lr
 8007260:	20000018 	.word	0x20000018

08007264 <abort>:
 8007264:	2006      	movs	r0, #6
 8007266:	b508      	push	{r3, lr}
 8007268:	f000 f82c 	bl	80072c4 <raise>
 800726c:	2001      	movs	r0, #1
 800726e:	f7fa fcbc 	bl	8001bea <_exit>

08007272 <_raise_r>:
 8007272:	291f      	cmp	r1, #31
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4605      	mov	r5, r0
 8007278:	460c      	mov	r4, r1
 800727a:	d904      	bls.n	8007286 <_raise_r+0x14>
 800727c:	2316      	movs	r3, #22
 800727e:	6003      	str	r3, [r0, #0]
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007288:	b112      	cbz	r2, 8007290 <_raise_r+0x1e>
 800728a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800728e:	b94b      	cbnz	r3, 80072a4 <_raise_r+0x32>
 8007290:	4628      	mov	r0, r5
 8007292:	f000 f831 	bl	80072f8 <_getpid_r>
 8007296:	4622      	mov	r2, r4
 8007298:	4601      	mov	r1, r0
 800729a:	4628      	mov	r0, r5
 800729c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a0:	f000 b818 	b.w	80072d4 <_kill_r>
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d00a      	beq.n	80072be <_raise_r+0x4c>
 80072a8:	1c59      	adds	r1, r3, #1
 80072aa:	d103      	bne.n	80072b4 <_raise_r+0x42>
 80072ac:	2316      	movs	r3, #22
 80072ae:	6003      	str	r3, [r0, #0]
 80072b0:	2001      	movs	r0, #1
 80072b2:	e7e7      	b.n	8007284 <_raise_r+0x12>
 80072b4:	2100      	movs	r1, #0
 80072b6:	4620      	mov	r0, r4
 80072b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072bc:	4798      	blx	r3
 80072be:	2000      	movs	r0, #0
 80072c0:	e7e0      	b.n	8007284 <_raise_r+0x12>
	...

080072c4 <raise>:
 80072c4:	4b02      	ldr	r3, [pc, #8]	@ (80072d0 <raise+0xc>)
 80072c6:	4601      	mov	r1, r0
 80072c8:	6818      	ldr	r0, [r3, #0]
 80072ca:	f7ff bfd2 	b.w	8007272 <_raise_r>
 80072ce:	bf00      	nop
 80072d0:	20000018 	.word	0x20000018

080072d4 <_kill_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	2300      	movs	r3, #0
 80072d8:	4d06      	ldr	r5, [pc, #24]	@ (80072f4 <_kill_r+0x20>)
 80072da:	4604      	mov	r4, r0
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	602b      	str	r3, [r5, #0]
 80072e2:	f7fa fc72 	bl	8001bca <_kill>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d102      	bne.n	80072f0 <_kill_r+0x1c>
 80072ea:	682b      	ldr	r3, [r5, #0]
 80072ec:	b103      	cbz	r3, 80072f0 <_kill_r+0x1c>
 80072ee:	6023      	str	r3, [r4, #0]
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
 80072f2:	bf00      	nop
 80072f4:	2000045c 	.word	0x2000045c

080072f8 <_getpid_r>:
 80072f8:	f7fa bc60 	b.w	8001bbc <_getpid>

080072fc <_init>:
 80072fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fe:	bf00      	nop
 8007300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007302:	bc08      	pop	{r3}
 8007304:	469e      	mov	lr, r3
 8007306:	4770      	bx	lr

08007308 <_fini>:
 8007308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730a:	bf00      	nop
 800730c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730e:	bc08      	pop	{r3}
 8007310:	469e      	mov	lr, r3
 8007312:	4770      	bx	lr
